
Practica_8_out_inputs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800200  00000784  00000818  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000784  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800216  00800216  0000082e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000082e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000860  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000127e  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d23  00000000  00000000  00001b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000608  00000000  00000000  00002881  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00002e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062b  00000000  00000000  00002f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000697  00000000  00000000  0000357b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003c12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8c c0       	rjmp	.+280    	; 0x11e <__bad_interrupt>
   6:	00 00       	nop
   8:	8a c0       	rjmp	.+276    	; 0x11e <__bad_interrupt>
   a:	00 00       	nop
   c:	88 c0       	rjmp	.+272    	; 0x11e <__bad_interrupt>
   e:	00 00       	nop
  10:	86 c0       	rjmp	.+268    	; 0x11e <__bad_interrupt>
  12:	00 00       	nop
  14:	84 c0       	rjmp	.+264    	; 0x11e <__bad_interrupt>
  16:	00 00       	nop
  18:	82 c0       	rjmp	.+260    	; 0x11e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	80 c0       	rjmp	.+256    	; 0x11e <__bad_interrupt>
  1e:	00 00       	nop
  20:	7e c0       	rjmp	.+252    	; 0x11e <__bad_interrupt>
  22:	00 00       	nop
  24:	7c c0       	rjmp	.+248    	; 0x11e <__bad_interrupt>
  26:	00 00       	nop
  28:	7a c0       	rjmp	.+244    	; 0x11e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	78 c0       	rjmp	.+240    	; 0x11e <__bad_interrupt>
  2e:	00 00       	nop
  30:	76 c0       	rjmp	.+236    	; 0x11e <__bad_interrupt>
  32:	00 00       	nop
  34:	74 c0       	rjmp	.+232    	; 0x11e <__bad_interrupt>
  36:	00 00       	nop
  38:	72 c0       	rjmp	.+228    	; 0x11e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	70 c0       	rjmp	.+224    	; 0x11e <__bad_interrupt>
  3e:	00 00       	nop
  40:	6e c0       	rjmp	.+220    	; 0x11e <__bad_interrupt>
  42:	00 00       	nop
  44:	6c c0       	rjmp	.+216    	; 0x11e <__bad_interrupt>
  46:	00 00       	nop
  48:	6a c0       	rjmp	.+212    	; 0x11e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	68 c0       	rjmp	.+208    	; 0x11e <__bad_interrupt>
  4e:	00 00       	nop
  50:	66 c0       	rjmp	.+204    	; 0x11e <__bad_interrupt>
  52:	00 00       	nop
  54:	64 c0       	rjmp	.+200    	; 0x11e <__bad_interrupt>
  56:	00 00       	nop
  58:	62 c0       	rjmp	.+196    	; 0x11e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	60 c0       	rjmp	.+192    	; 0x11e <__bad_interrupt>
  5e:	00 00       	nop
  60:	5e c0       	rjmp	.+188    	; 0x11e <__bad_interrupt>
  62:	00 00       	nop
  64:	5c c0       	rjmp	.+184    	; 0x11e <__bad_interrupt>
  66:	00 00       	nop
  68:	5a c0       	rjmp	.+180    	; 0x11e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	58 c0       	rjmp	.+176    	; 0x11e <__bad_interrupt>
  6e:	00 00       	nop
  70:	56 c0       	rjmp	.+172    	; 0x11e <__bad_interrupt>
  72:	00 00       	nop
  74:	54 c0       	rjmp	.+168    	; 0x11e <__bad_interrupt>
  76:	00 00       	nop
  78:	52 c0       	rjmp	.+164    	; 0x11e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	50 c0       	rjmp	.+160    	; 0x11e <__bad_interrupt>
  7e:	00 00       	nop
  80:	4e c0       	rjmp	.+156    	; 0x11e <__bad_interrupt>
  82:	00 00       	nop
  84:	4c c0       	rjmp	.+152    	; 0x11e <__bad_interrupt>
  86:	00 00       	nop
  88:	4a c0       	rjmp	.+148    	; 0x11e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	48 c0       	rjmp	.+144    	; 0x11e <__bad_interrupt>
  8e:	00 00       	nop
  90:	46 c0       	rjmp	.+140    	; 0x11e <__bad_interrupt>
  92:	00 00       	nop
  94:	44 c0       	rjmp	.+136    	; 0x11e <__bad_interrupt>
  96:	00 00       	nop
  98:	42 c0       	rjmp	.+132    	; 0x11e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	40 c0       	rjmp	.+128    	; 0x11e <__bad_interrupt>
  9e:	00 00       	nop
  a0:	3e c0       	rjmp	.+124    	; 0x11e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3c c0       	rjmp	.+120    	; 0x11e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3a c0       	rjmp	.+116    	; 0x11e <__bad_interrupt>
  aa:	00 00       	nop
  ac:	38 c0       	rjmp	.+112    	; 0x11e <__bad_interrupt>
  ae:	00 00       	nop
  b0:	36 c0       	rjmp	.+108    	; 0x11e <__bad_interrupt>
  b2:	00 00       	nop
  b4:	34 c0       	rjmp	.+104    	; 0x11e <__bad_interrupt>
  b6:	00 00       	nop
  b8:	32 c0       	rjmp	.+100    	; 0x11e <__bad_interrupt>
  ba:	00 00       	nop
  bc:	30 c0       	rjmp	.+96     	; 0x11e <__bad_interrupt>
  be:	00 00       	nop
  c0:	2e c0       	rjmp	.+92     	; 0x11e <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2c c0       	rjmp	.+88     	; 0x11e <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2a c0       	rjmp	.+84     	; 0x11e <__bad_interrupt>
  ca:	00 00       	nop
  cc:	28 c0       	rjmp	.+80     	; 0x11e <__bad_interrupt>
  ce:	00 00       	nop
  d0:	26 c0       	rjmp	.+76     	; 0x11e <__bad_interrupt>
  d2:	00 00       	nop
  d4:	24 c0       	rjmp	.+72     	; 0x11e <__bad_interrupt>
  d6:	00 00       	nop
  d8:	22 c0       	rjmp	.+68     	; 0x11e <__bad_interrupt>
  da:	00 00       	nop
  dc:	20 c0       	rjmp	.+64     	; 0x11e <__bad_interrupt>
  de:	00 00       	nop
  e0:	1e c0       	rjmp	.+60     	; 0x11e <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e4 e8       	ldi	r30, 0x84	; 132
  f8:	f7 e0       	ldi	r31, 0x07	; 7
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	0b bf       	out	0x3b, r16	; 59
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
 100:	07 90       	elpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	a6 31       	cpi	r26, 0x16	; 22
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
 10a:	22 e0       	ldi	r18, 0x02	; 2
 10c:	a6 e1       	ldi	r26, 0x16	; 22
 10e:	b2 e0       	ldi	r27, 0x02	; 2
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	a0 32       	cpi	r26, 0x20	; 32
 116:	b2 07       	cpc	r27, r18
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	db d0       	rcall	.+438    	; 0x2d2 <main>
 11c:	31 c3       	rjmp	.+1634   	; 0x780 <_exit>

0000011e <__bad_interrupt>:
 11e:	70 cf       	rjmp	.-288    	; 0x0 <__vectors>

00000120 <set_led>:

void set_led(uint8_t num_led)
{
	static uint8_t list_ddra[]={0x00,0x03,0x03,0x06,0x06,0x05,0x05,0x0C,0x0C};
	static uint8_t list_porta[]={0x00,0x02,0x01,0x04,0x02,0x01,0x04,0x08,0x04};
	DDRA=list_ddra[num_led];
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	fc 01       	movw	r30, r24
 124:	e3 5f       	subi	r30, 0xF3	; 243
 126:	fd 4f       	sbci	r31, 0xFD	; 253
 128:	20 81       	ld	r18, Z
 12a:	21 b9       	out	0x01, r18	; 1
	PORTA=list_porta[num_led];
 12c:	fc 01       	movw	r30, r24
 12e:	ec 5f       	subi	r30, 0xFC	; 252
 130:	fd 4f       	sbci	r31, 0xFD	; 253
 132:	80 81       	ld	r24, Z
 134:	82 b9       	out	0x02, r24	; 2
 136:	08 95       	ret

00000138 <matrix_keyboard>:
			
    }
}

void matrix_keyboard(button* input_key)
{
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	8c 01       	movw	r16, r24
	
	DDRB=0XFF;
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	84 b9       	out	0x04, r24	; 4
	DDRC=0X00;
 146:	17 b8       	out	0x07, r1	; 7
	PORTC=0XFF;	
 148:	88 b9       	out	0x08, r24	; 8
	PORTB=0xFB;
 14a:	8b ef       	ldi	r24, 0xFB	; 251
 14c:	85 b9       	out	0x05, r24	; 5
 14e:	c3 e0       	ldi	r28, 0x03	; 3
		if(PINC==0XFE)
		{
			set_led(i);
			_delay_ms(250);
			input_key->press_button=i;
			input_key->flag_press=1;
 150:	d1 e0       	ldi	r29, 0x01	; 1
	DDRC=0X00;
	PORTC=0XFF;	
	PORTB=0xFB;
	for(int i=3; i>0; i--)
	{
		if(PINC==0XFE)
 152:	86 b1       	in	r24, 0x06	; 6
 154:	8e 3f       	cpi	r24, 0xFE	; 254
 156:	71 f4       	brne	.+28     	; 0x174 <matrix_keyboard+0x3c>
		{
			set_led(i);
 158:	8c 2f       	mov	r24, r28
 15a:	e2 df       	rcall	.-60     	; 0x120 <set_led>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	2f ef       	ldi	r18, 0xFF	; 255
 15e:	84 e3       	ldi	r24, 0x34	; 52
 160:	9c e0       	ldi	r25, 0x0C	; 12
 162:	21 50       	subi	r18, 0x01	; 1
 164:	80 40       	sbci	r24, 0x00	; 0
 166:	90 40       	sbci	r25, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <matrix_keyboard+0x2a>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <matrix_keyboard+0x34>
 16c:	00 00       	nop
			_delay_ms(250);
			input_key->press_button=i;
 16e:	f8 01       	movw	r30, r16
 170:	c0 83       	st	Z, r28
			input_key->flag_press=1;
 172:	d1 83       	std	Z+1, r29	; 0x01
		}
		PORTB=PORTB>>1;
 174:	85 b1       	in	r24, 0x05	; 5
 176:	86 95       	lsr	r24
 178:	85 b9       	out	0x05, r24	; 5
 17a:	c1 50       	subi	r28, 0x01	; 1
	
	DDRB=0XFF;
	DDRC=0X00;
	PORTC=0XFF;	
	PORTB=0xFB;
	for(int i=3; i>0; i--)
 17c:	51 f7       	brne	.-44     	; 0x152 <matrix_keyboard+0x1a>
			input_key->flag_press=1;
		}
		PORTB=PORTB>>1;
	}
	
	PORTB=0xFB;
 17e:	8b ef       	ldi	r24, 0xFB	; 251
 180:	85 b9       	out	0x05, r24	; 5
 182:	c6 e0       	ldi	r28, 0x06	; 6
		if(PINC==0XFD)
		{
			set_led(i);
			_delay_ms(250);
			input_key->press_button=i;
			input_key->flag_press=1;
 184:	d1 e0       	ldi	r29, 0x01	; 1
	}
	
	PORTB=0xFB;
	for(int i=6; i>3; i--)
	{
		if(PINC==0XFD)
 186:	86 b1       	in	r24, 0x06	; 6
 188:	8d 3f       	cpi	r24, 0xFD	; 253
 18a:	71 f4       	brne	.+28     	; 0x1a8 <matrix_keyboard+0x70>
		{
			set_led(i);
 18c:	8c 2f       	mov	r24, r28
 18e:	c8 df       	rcall	.-112    	; 0x120 <set_led>
 190:	ff ef       	ldi	r31, 0xFF	; 255
 192:	24 e3       	ldi	r18, 0x34	; 52
 194:	8c e0       	ldi	r24, 0x0C	; 12
 196:	f1 50       	subi	r31, 0x01	; 1
 198:	20 40       	sbci	r18, 0x00	; 0
 19a:	80 40       	sbci	r24, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <matrix_keyboard+0x5e>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <matrix_keyboard+0x68>
 1a0:	00 00       	nop
			_delay_ms(250);
			input_key->press_button=i;
 1a2:	f8 01       	movw	r30, r16
 1a4:	c0 83       	st	Z, r28
			input_key->flag_press=1;
 1a6:	d1 83       	std	Z+1, r29	; 0x01
		}
		PORTB=PORTB>>1;
 1a8:	85 b1       	in	r24, 0x05	; 5
 1aa:	86 95       	lsr	r24
 1ac:	85 b9       	out	0x05, r24	; 5
 1ae:	c1 50       	subi	r28, 0x01	; 1
		}
		PORTB=PORTB>>1;
	}
	
	PORTB=0xFB;
	for(int i=6; i>3; i--)
 1b0:	c3 30       	cpi	r28, 0x03	; 3
 1b2:	49 f7       	brne	.-46     	; 0x186 <matrix_keyboard+0x4e>
			input_key->flag_press=1;
		}
		PORTB=PORTB>>1;
	}
	
	PORTB=0xFB;
 1b4:	8b ef       	ldi	r24, 0xFB	; 251
 1b6:	85 b9       	out	0x05, r24	; 5
 1b8:	c9 e0       	ldi	r28, 0x09	; 9
		if(PINC==0XFB)
		{
			set_led(i);
			_delay_ms(250);
			input_key->press_button=i;
			input_key->flag_press=1;
 1ba:	d1 e0       	ldi	r29, 0x01	; 1
	}
	
	PORTB=0xFB;
	for(int i=9; i>6; i--)
	{
		if(PINC==0XFB)
 1bc:	86 b1       	in	r24, 0x06	; 6
 1be:	8b 3f       	cpi	r24, 0xFB	; 251
		{
			set_led(i);
 1c0:	71 f4       	brne	.+28     	; 0x1de <matrix_keyboard+0xa6>
 1c2:	8c 2f       	mov	r24, r28
 1c4:	ad df       	rcall	.-166    	; 0x120 <set_led>
 1c6:	ff ef       	ldi	r31, 0xFF	; 255
 1c8:	24 e3       	ldi	r18, 0x34	; 52
 1ca:	8c e0       	ldi	r24, 0x0C	; 12
 1cc:	f1 50       	subi	r31, 0x01	; 1
 1ce:	20 40       	sbci	r18, 0x00	; 0
 1d0:	80 40       	sbci	r24, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <matrix_keyboard+0x94>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <matrix_keyboard+0x9e>
 1d6:	00 00       	nop
			_delay_ms(250);
			input_key->press_button=i;
 1d8:	f8 01       	movw	r30, r16
 1da:	c0 83       	st	Z, r28
			input_key->flag_press=1;
 1dc:	d1 83       	std	Z+1, r29	; 0x01
		}
		PORTB=PORTB>>1;
 1de:	85 b1       	in	r24, 0x05	; 5
 1e0:	86 95       	lsr	r24
 1e2:	85 b9       	out	0x05, r24	; 5
 1e4:	c1 50       	subi	r28, 0x01	; 1
		}
		PORTB=PORTB>>1;
	}
	
	PORTB=0xFB;
	for(int i=9; i>6; i--)
 1e6:	c6 30       	cpi	r28, 0x06	; 6
 1e8:	49 f7       	brne	.-46     	; 0x1bc <matrix_keyboard+0x84>
			input_key->press_button=i;
			input_key->flag_press=1;
		}
		PORTB=PORTB>>1;
	}
}
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	08 95       	ret

000001f4 <winner>:

void winner()
{
 1f4:	cf 92       	push	r12
 1f6:	df 92       	push	r13
 1f8:	ef 92       	push	r14
 1fa:	ff 92       	push	r15
 1fc:	0f 93       	push	r16
 1fe:	1f 93       	push	r17
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	68 94       	set
 206:	cc 24       	eor	r12, r12
 208:	c3 f8       	bld	r12, 3
 20a:	d1 2c       	mov	r13, r1
 20c:	12 c0       	rjmp	.+36     	; 0x232 <winner+0x3e>
	for(int z=8; z>0; z--){
		for(int j=0; j<8890; j++)
		{
			for(int i=8; i>0; i--)
			{
				if(i!=z)
 20e:	0c 17       	cp	r16, r28
 210:	1d 07       	cpc	r17, r29
 212:	11 f0       	breq	.+4      	; 0x218 <winner+0x24>
			{
				set_led(i);
 214:	8c 2f       	mov	r24, r28
 216:	84 df       	rcall	.-248    	; 0x120 <set_led>
void winner()
{
	for(int z=8; z>0; z--){
		for(int j=0; j<8890; j++)
		{
			for(int i=8; i>0; i--)
 218:	21 97       	sbiw	r28, 0x01	; 1
 21a:	c9 f7       	brne	.-14     	; 0x20e <winner+0x1a>
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	e8 1a       	sub	r14, r24
 220:	f1 08       	sbc	r15, r1
}

void winner()
{
	for(int z=8; z>0; z--){
		for(int j=0; j<8890; j++)
 222:	19 f0       	breq	.+6      	; 0x22a <winner+0x36>
		PORTB=PORTB>>1;
	}
}

void winner()
{
 224:	c8 e0       	ldi	r28, 0x08	; 8
 226:	d0 e0       	ldi	r29, 0x00	; 0
 228:	f2 cf       	rjmp	.-28     	; 0x20e <winner+0x1a>
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	c8 1a       	sub	r12, r24
 22e:	d1 08       	sbc	r13, r1
	for(int z=8; z>0; z--){
 230:	41 f0       	breq	.+16     	; 0x242 <winner+0x4e>
 232:	86 01       	movw	r16, r12
		PORTB=PORTB>>1;
	}
}

void winner()
{
 234:	0f 2e       	mov	r0, r31
 236:	fa eb       	ldi	r31, 0xBA	; 186
 238:	ef 2e       	mov	r14, r31
 23a:	f2 e2       	ldi	r31, 0x22	; 34
 23c:	ff 2e       	mov	r15, r31
 23e:	f0 2d       	mov	r31, r0
 240:	f1 cf       	rjmp	.-30     	; 0x224 <winner+0x30>
				set_led(i);
				}	
			}
		}
	}
}
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	1f 91       	pop	r17
 248:	0f 91       	pop	r16
 24a:	ff 90       	pop	r15
 24c:	ef 90       	pop	r14
 24e:	df 90       	pop	r13
 250:	cf 90       	pop	r12
 252:	08 95       	ret

00000254 <looser>:

void looser()
{
 254:	cf 92       	push	r12
 256:	df 92       	push	r13
 258:	ef 92       	push	r14
 25a:	ff 92       	push	r15
	
		for(float j=0; j<15000; j++)
 25c:	c1 2c       	mov	r12, r1
 25e:	d1 2c       	mov	r13, r1
 260:	76 01       	movw	r14, r12
		{
			for(int i=8; i>4; i--)
			{
					set_led(i);
 262:	88 e0       	ldi	r24, 0x08	; 8
 264:	5d df       	rcall	.-326    	; 0x120 <set_led>
 266:	87 e0       	ldi	r24, 0x07	; 7
 268:	5b df       	rcall	.-330    	; 0x120 <set_led>
 26a:	86 e0       	ldi	r24, 0x06	; 6
 26c:	59 df       	rcall	.-334    	; 0x120 <set_led>
 26e:	85 e0       	ldi	r24, 0x05	; 5
 270:	57 df       	rcall	.-338    	; 0x120 <set_led>
}

void looser()
{
	
		for(float j=0; j<15000; j++)
 272:	20 e0       	ldi	r18, 0x00	; 0
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	40 e8       	ldi	r20, 0x80	; 128
 278:	5f e3       	ldi	r21, 0x3F	; 63
 27a:	c7 01       	movw	r24, r14
 27c:	b6 01       	movw	r22, r12
 27e:	f1 d0       	rcall	.+482    	; 0x462 <__addsf3>
 280:	6b 01       	movw	r12, r22
 282:	7c 01       	movw	r14, r24
 284:	20 e0       	ldi	r18, 0x00	; 0
 286:	30 e6       	ldi	r19, 0x60	; 96
 288:	4a e6       	ldi	r20, 0x6A	; 106
 28a:	56 e4       	ldi	r21, 0x46	; 70
 28c:	4e d1       	rcall	.+668    	; 0x52a <__cmpsf2>
 28e:	88 23       	and	r24, r24
 290:	44 f3       	brlt	.-48     	; 0x262 <looser+0xe>
 292:	c1 2c       	mov	r12, r1
 294:	d1 2c       	mov	r13, r1
		
	for(float j2=0; j2<15000; j2++)
		{
			for(int i2=4; i2>0; i2--)
			{
					set_led(i2);
 296:	76 01       	movw	r14, r12
 298:	84 e0       	ldi	r24, 0x04	; 4
 29a:	42 df       	rcall	.-380    	; 0x120 <set_led>
 29c:	83 e0       	ldi	r24, 0x03	; 3
 29e:	40 df       	rcall	.-384    	; 0x120 <set_led>
 2a0:	82 e0       	ldi	r24, 0x02	; 2
 2a2:	3e df       	rcall	.-388    	; 0x120 <set_led>
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	3c df       	rcall	.-392    	; 0x120 <set_led>
 2a8:	20 e0       	ldi	r18, 0x00	; 0
			{
					set_led(i);
			}
		}
		
	for(float j2=0; j2<15000; j2++)
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	40 e8       	ldi	r20, 0x80	; 128
 2ae:	5f e3       	ldi	r21, 0x3F	; 63
 2b0:	c7 01       	movw	r24, r14
 2b2:	b6 01       	movw	r22, r12
 2b4:	d6 d0       	rcall	.+428    	; 0x462 <__addsf3>
 2b6:	6b 01       	movw	r12, r22
 2b8:	7c 01       	movw	r14, r24
 2ba:	20 e0       	ldi	r18, 0x00	; 0
 2bc:	30 e6       	ldi	r19, 0x60	; 96
 2be:	4a e6       	ldi	r20, 0x6A	; 106
 2c0:	56 e4       	ldi	r21, 0x46	; 70
 2c2:	33 d1       	rcall	.+614    	; 0x52a <__cmpsf2>
 2c4:	88 23       	and	r24, r24
 2c6:	44 f3       	brlt	.-48     	; 0x298 <looser+0x44>
 2c8:	ff 90       	pop	r15
 2ca:	ef 90       	pop	r14
			{
					set_led(i2);
			}
		}
	
}
 2cc:	df 90       	pop	r13
 2ce:	cf 90       	pop	r12
 2d0:	08 95       	ret

000002d2 <main>:
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
int count=0;



int main(void)
{
 2d6:	00 d0       	rcall	.+0      	; 0x2d8 <main+0x6>
 2d8:	1f 92       	push	r1
 2da:	cd b7       	in	r28, 0x3d	; 61
 2dc:	de b7       	in	r29, 0x3e	; 62

	button input_key={0,0,0};
 2de:	19 82       	std	Y+1, r1	; 0x01
 2e0:	1a 82       	std	Y+2, r1	; 0x02
 2e2:	1b 82       	std	Y+3, r1	; 0x03
 2e4:	0f 2e       	mov	r0, r31
 2e6:	f8 e1       	ldi	r31, 0x18	; 24
 2e8:	4f 2e       	mov	r4, r31
 2ea:	f2 e0       	ldi	r31, 0x02	; 2
 2ec:	5f 2e       	mov	r5, r31
 2ee:	f0 2d       	mov	r31, r0
 2f0:	0f 2e       	mov	r0, r31
 2f2:	f0 e2       	ldi	r31, 0x20	; 32
 2f4:	8f 2e       	mov	r8, r31
 2f6:	f2 e0       	ldi	r31, 0x02	; 2
 2f8:	9f 2e       	mov	r9, r31
 2fa:	f0 2d       	mov	r31, r0
			{
				
				
					while(input_key.flag_press==0)
					{
						matrix_keyboard(&input_key);
 2fc:	ce 01       	movw	r24, r28
 2fe:	01 96       	adiw	r24, 0x01	; 1
 300:	5c 01       	movw	r10, r24
 302:	68 2e       	mov	r6, r24
 304:	7b 2c       	mov	r7, r11
int count=0;



int main(void)
{
 306:	08 e1       	ldi	r16, 0x18	; 24
 308:	12 e0       	ldi	r17, 0x02	; 2
    {
		repeat:
		
		for (int i=0; i<8; i++)
		{
			srand (PINA+PINB+PINC);
 30a:	30 b1       	in	r19, 0x00	; 0
 30c:	83 b1       	in	r24, 0x03	; 3
 30e:	26 b1       	in	r18, 0x06	; 6
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	83 0f       	add	r24, r19
 314:	91 1d       	adc	r25, r1
 316:	82 0f       	add	r24, r18
 318:	91 1d       	adc	r25, r1
 31a:	ca d1       	rcall	.+916    	; 0x6b0 <srand>
			memory_simmon[i]=((rand() % (8-1+1))+1);
 31c:	c6 d1       	rcall	.+908    	; 0x6aa <rand>
 31e:	87 70       	andi	r24, 0x07	; 7
 320:	90 78       	andi	r25, 0x80	; 128
 322:	99 23       	and	r25, r25
 324:	24 f4       	brge	.+8      	; 0x32e <main+0x5c>
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	88 6f       	ori	r24, 0xF8	; 248
 32a:	9f 6f       	ori	r25, 0xFF	; 255
 32c:	01 96       	adiw	r24, 0x01	; 1
 32e:	8f 5f       	subi	r24, 0xFF	; 255
 330:	f8 01       	movw	r30, r16
 332:	81 93       	st	Z+, r24
 334:	8f 01       	movw	r16, r30
			set_led(memory_simmon[i]);
 336:	f4 de       	rcall	.-536    	; 0x120 <set_led>
 338:	80 16       	cp	r8, r16
	button input_key={0,0,0};
    while (1) 
    {
		repeat:
		
		for (int i=0; i<8; i++)
 33a:	91 06       	cpc	r9, r17
 33c:	31 f7       	brne	.-52     	; 0x30a <main+0x38>
 33e:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <__data_end>
			set_led(memory_simmon[i]);
		}	
		
		for (int j=0; j<8; j++)
		{
			if (8==count)
 342:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <__data_end+0x1>
 346:	08 97       	sbiw	r24, 0x08	; 8
 348:	61 f0       	breq	.+24     	; 0x362 <main+0x90>
 34a:	e1 2c       	mov	r14, r1
 34c:	f1 2c       	mov	r15, r1
 34e:	06 c0       	rjmp	.+12     	; 0x35c <main+0x8a>
 350:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <__data_end>
 354:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <__data_end+0x1>
 358:	08 97       	sbiw	r24, 0x08	; 8
 35a:	19 f0       	breq	.+6      	; 0x362 <main+0x90>
 35c:	ff 20       	and	r15, r15
					}
					winner();
				}
			}
			
			for (int k=0; k<=j; k++)
 35e:	84 f4       	brge	.+32     	; 0x380 <main+0xae>
 360:	64 c0       	rjmp	.+200    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		for (int j=0; j<8; j++)
		{
			if (8==count)
			{
				while(1){
					matrix_keyboard(&input_key);
 362:	c5 01       	movw	r24, r10
 364:	e9 de       	rcall	.-558    	; 0x138 <matrix_keyboard>
 366:	8a 81       	ldd	r24, Y+2	; 0x02
					if (input_key.flag_press!=0)
 368:	88 23       	and	r24, r24
 36a:	41 f0       	breq	.+16     	; 0x37c <main+0xaa>
					{
						set_led(0);
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	d8 de       	rcall	.-592    	; 0x120 <set_led>
 370:	1a 82       	std	Y+2, r1	; 0x02
						input_key.flag_press=0;
 372:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <__data_end+0x1>
						count=0;
 376:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <__data_end>
						goto repeat;
 37a:	c5 cf       	rjmp	.-118    	; 0x306 <main+0x34>
					}
					winner();
 37c:	3b df       	rcall	.-394    	; 0x1f4 <winner>
 37e:	f1 cf       	rjmp	.-30     	; 0x362 <main+0x90>
				}
 380:	82 01       	movw	r16, r4
			}
			
			for (int k=0; k<=j; k++)
 382:	c1 2c       	mov	r12, r1
 384:	d1 2c       	mov	r13, r1
			{
				set_led(memory_simmon[k]);
 386:	f8 01       	movw	r30, r16
 388:	81 91       	ld	r24, Z+
 38a:	8f 01       	movw	r16, r30
 38c:	c9 de       	rcall	.-622    	; 0x120 <set_led>
 38e:	ff ef       	ldi	r31, 0xFF	; 255
 390:	23 ed       	ldi	r18, 0xD3	; 211
 392:	80 e3       	ldi	r24, 0x30	; 48
 394:	f1 50       	subi	r31, 0x01	; 1
 396:	20 40       	sbci	r18, 0x00	; 0
 398:	80 40       	sbci	r24, 0x00	; 0
 39a:	e1 f7       	brne	.-8      	; 0x394 <main+0xc2>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <main+0xcc>
 39e:	00 00       	nop
				_delay_ms(1000);
				set_led(0);
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	be de       	rcall	.-644    	; 0x120 <set_led>
 3a4:	9f ef       	ldi	r25, 0xFF	; 255
 3a6:	e3 ed       	ldi	r30, 0xD3	; 211
 3a8:	f0 e3       	ldi	r31, 0x30	; 48
 3aa:	91 50       	subi	r25, 0x01	; 1
 3ac:	e0 40       	sbci	r30, 0x00	; 0
 3ae:	f0 40       	sbci	r31, 0x00	; 0
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <main+0xd8>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <main+0xe2>
 3b4:	00 00       	nop
 3b6:	2f ef       	ldi	r18, 0xFF	; 255
					}
					winner();
				}
			}
			
			for (int k=0; k<=j; k++)
 3b8:	c2 1a       	sub	r12, r18
 3ba:	d2 0a       	sbc	r13, r18
 3bc:	ec 14       	cp	r14, r12
 3be:	fd 04       	cpc	r15, r13
 3c0:	14 f7       	brge	.-60     	; 0x386 <main+0xb4>
 3c2:	c7 01       	movw	r24, r14
 3c4:	87 5e       	subi	r24, 0xE7	; 231
 3c6:	9d 4f       	sbci	r25, 0xFD	; 253
 3c8:	6c 01       	movw	r12, r24
 3ca:	82 01       	movw	r16, r4
 3cc:	2a c0       	rjmp	.+84     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
			{
				
				
					while(input_key.flag_press==0)
					{
						matrix_keyboard(&input_key);
 3ce:	86 2d       	mov	r24, r6
 3d0:	97 2d       	mov	r25, r7
 3d2:	b2 de       	rcall	.-668    	; 0x138 <matrix_keyboard>
 3d4:	9f ef       	ldi	r25, 0xFF	; 255
 3d6:	e3 ec       	ldi	r30, 0xC3	; 195
 3d8:	f9 e0       	ldi	r31, 0x09	; 9
 3da:	91 50       	subi	r25, 0x01	; 1
 3dc:	e0 40       	sbci	r30, 0x00	; 0
 3de:	f0 40       	sbci	r31, 0x00	; 0
 3e0:	e1 f7       	brne	.-8      	; 0x3da <main+0x108>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <main+0x112>
 3e4:	00 00       	nop
			
			for(int n=0; n<=j; n++)
			{
				
				
					while(input_key.flag_press==0)
 3e6:	8a 81       	ldd	r24, Y+2	; 0x02
 3e8:	88 23       	and	r24, r24
 3ea:	89 f3       	breq	.-30     	; 0x3ce <main+0xfc>
					{
						matrix_keyboard(&input_key);
						_delay_ms(200);
					}
					input_key.flag_press=0;
 3ec:	1a 82       	std	Y+2, r1	; 0x02
					set_led(0);
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	97 de       	rcall	.-722    	; 0x120 <set_led>
					
					
					
					if(memory_simmon[n]!=input_key.press_button)
 3f2:	f8 01       	movw	r30, r16
 3f4:	91 91       	ld	r25, Z+
 3f6:	8f 01       	movw	r16, r30
 3f8:	89 81       	ldd	r24, Y+1	; 0x01
 3fa:	98 17       	cp	r25, r24
					{
						while(1){
							matrix_keyboard(&input_key);
 3fc:	79 f0       	breq	.+30     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3fe:	c5 01       	movw	r24, r10
 400:	9b de       	rcall	.-714    	; 0x138 <matrix_keyboard>
						if (input_key.flag_press!=0)
 402:	8a 81       	ldd	r24, Y+2	; 0x02
 404:	88 23       	and	r24, r24
						{
							set_led(0);
 406:	41 f0       	breq	.+16     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	8a de       	rcall	.-748    	; 0x120 <set_led>
							input_key.flag_press=0;
 40c:	1a 82       	std	Y+2, r1	; 0x02
							count=0;
 40e:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <__data_end+0x1>
 412:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <__data_end>
							goto repeat;
 416:	77 cf       	rjmp	.-274    	; 0x306 <main+0x34>
						}
						looser();
 418:	1d df       	rcall	.-454    	; 0x254 <looser>
 41a:	f1 cf       	rjmp	.-30     	; 0x3fe <main+0x12c>
						}
 41c:	ec 15       	cp	r30, r12
				_delay_ms(1000);
				set_led(0);
				_delay_ms(1000);	
			}
			
			for(int n=0; n<=j; n++)
 41e:	fd 05       	cpc	r31, r13
 420:	21 f0       	breq	.+8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 422:	8a 81       	ldd	r24, Y+2	; 0x02
			{
				
				
					while(input_key.flag_press==0)
 424:	88 23       	and	r24, r24
 426:	99 f2       	breq	.-90     	; 0x3ce <main+0xfc>
 428:	e1 cf       	rjmp	.-62     	; 0x3ec <main+0x11a>
 42a:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <__data_end>
						}
						looser();
						}
					}
			}
			count++;
 42e:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <__data_end+0x1>
 432:	01 96       	adiw	r24, 0x01	; 1
 434:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <__data_end+0x1>
 438:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <__data_end>
 43c:	ff ef       	ldi	r31, 0xFF	; 255
 43e:	25 ea       	ldi	r18, 0xA5	; 165
 440:	8e e0       	ldi	r24, 0x0E	; 14
 442:	f1 50       	subi	r31, 0x01	; 1
 444:	20 40       	sbci	r18, 0x00	; 0
 446:	80 40       	sbci	r24, 0x00	; 0
 448:	e1 f7       	brne	.-8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 44c:	00 00       	nop
 44e:	9f ef       	ldi	r25, 0xFF	; 255
			srand (PINA+PINB+PINC);
			memory_simmon[i]=((rand() % (8-1+1))+1);
			set_led(memory_simmon[i]);
		}	
		
		for (int j=0; j<8; j++)
 450:	e9 1a       	sub	r14, r25
 452:	f9 0a       	sbc	r15, r25
 454:	e8 e0       	ldi	r30, 0x08	; 8
 456:	ee 16       	cp	r14, r30
 458:	f1 04       	cpc	r15, r1
 45a:	09 f0       	breq	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 45c:	79 cf       	rjmp	.-270    	; 0x350 <main+0x7e>
 45e:	53 cf       	rjmp	.-346    	; 0x306 <main+0x34>

00000460 <__subsf3>:
 460:	50 58       	subi	r21, 0x80	; 128

00000462 <__addsf3>:
 462:	bb 27       	eor	r27, r27
 464:	aa 27       	eor	r26, r26
 466:	0e d0       	rcall	.+28     	; 0x484 <__addsf3x>
 468:	9f c0       	rjmp	.+318    	; 0x5a8 <__fp_round>
 46a:	90 d0       	rcall	.+288    	; 0x58c <__fp_pscA>
 46c:	30 f0       	brcs	.+12     	; 0x47a <__addsf3+0x18>
 46e:	95 d0       	rcall	.+298    	; 0x59a <__fp_pscB>
 470:	20 f0       	brcs	.+8      	; 0x47a <__addsf3+0x18>
 472:	31 f4       	brne	.+12     	; 0x480 <__addsf3+0x1e>
 474:	9f 3f       	cpi	r25, 0xFF	; 255
 476:	11 f4       	brne	.+4      	; 0x47c <__addsf3+0x1a>
 478:	1e f4       	brtc	.+6      	; 0x480 <__addsf3+0x1e>
 47a:	85 c0       	rjmp	.+266    	; 0x586 <__fp_nan>
 47c:	0e f4       	brtc	.+2      	; 0x480 <__addsf3+0x1e>
 47e:	e0 95       	com	r30
 480:	e7 fb       	bst	r30, 7
 482:	7b c0       	rjmp	.+246    	; 0x57a <__fp_inf>

00000484 <__addsf3x>:
 484:	e9 2f       	mov	r30, r25
 486:	a1 d0       	rcall	.+322    	; 0x5ca <__fp_split3>
 488:	80 f3       	brcs	.-32     	; 0x46a <__addsf3+0x8>
 48a:	ba 17       	cp	r27, r26
 48c:	62 07       	cpc	r22, r18
 48e:	73 07       	cpc	r23, r19
 490:	84 07       	cpc	r24, r20
 492:	95 07       	cpc	r25, r21
 494:	18 f0       	brcs	.+6      	; 0x49c <__addsf3x+0x18>
 496:	71 f4       	brne	.+28     	; 0x4b4 <__addsf3x+0x30>
 498:	9e f5       	brtc	.+102    	; 0x500 <__addsf3x+0x7c>
 49a:	b9 c0       	rjmp	.+370    	; 0x60e <__fp_zero>
 49c:	0e f4       	brtc	.+2      	; 0x4a0 <__addsf3x+0x1c>
 49e:	e0 95       	com	r30
 4a0:	0b 2e       	mov	r0, r27
 4a2:	ba 2f       	mov	r27, r26
 4a4:	a0 2d       	mov	r26, r0
 4a6:	0b 01       	movw	r0, r22
 4a8:	b9 01       	movw	r22, r18
 4aa:	90 01       	movw	r18, r0
 4ac:	0c 01       	movw	r0, r24
 4ae:	ca 01       	movw	r24, r20
 4b0:	a0 01       	movw	r20, r0
 4b2:	11 24       	eor	r1, r1
 4b4:	ff 27       	eor	r31, r31
 4b6:	59 1b       	sub	r21, r25
 4b8:	99 f0       	breq	.+38     	; 0x4e0 <__addsf3x+0x5c>
 4ba:	59 3f       	cpi	r21, 0xF9	; 249
 4bc:	50 f4       	brcc	.+20     	; 0x4d2 <__addsf3x+0x4e>
 4be:	50 3e       	cpi	r21, 0xE0	; 224
 4c0:	68 f1       	brcs	.+90     	; 0x51c <__addsf3x+0x98>
 4c2:	1a 16       	cp	r1, r26
 4c4:	f0 40       	sbci	r31, 0x00	; 0
 4c6:	a2 2f       	mov	r26, r18
 4c8:	23 2f       	mov	r18, r19
 4ca:	34 2f       	mov	r19, r20
 4cc:	44 27       	eor	r20, r20
 4ce:	58 5f       	subi	r21, 0xF8	; 248
 4d0:	f3 cf       	rjmp	.-26     	; 0x4b8 <__addsf3x+0x34>
 4d2:	46 95       	lsr	r20
 4d4:	37 95       	ror	r19
 4d6:	27 95       	ror	r18
 4d8:	a7 95       	ror	r26
 4da:	f0 40       	sbci	r31, 0x00	; 0
 4dc:	53 95       	inc	r21
 4de:	c9 f7       	brne	.-14     	; 0x4d2 <__addsf3x+0x4e>
 4e0:	7e f4       	brtc	.+30     	; 0x500 <__addsf3x+0x7c>
 4e2:	1f 16       	cp	r1, r31
 4e4:	ba 0b       	sbc	r27, r26
 4e6:	62 0b       	sbc	r22, r18
 4e8:	73 0b       	sbc	r23, r19
 4ea:	84 0b       	sbc	r24, r20
 4ec:	ba f0       	brmi	.+46     	; 0x51c <__addsf3x+0x98>
 4ee:	91 50       	subi	r25, 0x01	; 1
 4f0:	a1 f0       	breq	.+40     	; 0x51a <__addsf3x+0x96>
 4f2:	ff 0f       	add	r31, r31
 4f4:	bb 1f       	adc	r27, r27
 4f6:	66 1f       	adc	r22, r22
 4f8:	77 1f       	adc	r23, r23
 4fa:	88 1f       	adc	r24, r24
 4fc:	c2 f7       	brpl	.-16     	; 0x4ee <__addsf3x+0x6a>
 4fe:	0e c0       	rjmp	.+28     	; 0x51c <__addsf3x+0x98>
 500:	ba 0f       	add	r27, r26
 502:	62 1f       	adc	r22, r18
 504:	73 1f       	adc	r23, r19
 506:	84 1f       	adc	r24, r20
 508:	48 f4       	brcc	.+18     	; 0x51c <__addsf3x+0x98>
 50a:	87 95       	ror	r24
 50c:	77 95       	ror	r23
 50e:	67 95       	ror	r22
 510:	b7 95       	ror	r27
 512:	f7 95       	ror	r31
 514:	9e 3f       	cpi	r25, 0xFE	; 254
 516:	08 f0       	brcs	.+2      	; 0x51a <__addsf3x+0x96>
 518:	b3 cf       	rjmp	.-154    	; 0x480 <__addsf3+0x1e>
 51a:	93 95       	inc	r25
 51c:	88 0f       	add	r24, r24
 51e:	08 f0       	brcs	.+2      	; 0x522 <__addsf3x+0x9e>
 520:	99 27       	eor	r25, r25
 522:	ee 0f       	add	r30, r30
 524:	97 95       	ror	r25
 526:	87 95       	ror	r24
 528:	08 95       	ret

0000052a <__cmpsf2>:
 52a:	03 d0       	rcall	.+6      	; 0x532 <__fp_cmp>
 52c:	08 f4       	brcc	.+2      	; 0x530 <__cmpsf2+0x6>
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	08 95       	ret

00000532 <__fp_cmp>:
 532:	99 0f       	add	r25, r25
 534:	00 08       	sbc	r0, r0
 536:	55 0f       	add	r21, r21
 538:	aa 0b       	sbc	r26, r26
 53a:	e0 e8       	ldi	r30, 0x80	; 128
 53c:	fe ef       	ldi	r31, 0xFE	; 254
 53e:	16 16       	cp	r1, r22
 540:	17 06       	cpc	r1, r23
 542:	e8 07       	cpc	r30, r24
 544:	f9 07       	cpc	r31, r25
 546:	c0 f0       	brcs	.+48     	; 0x578 <__fp_cmp+0x46>
 548:	12 16       	cp	r1, r18
 54a:	13 06       	cpc	r1, r19
 54c:	e4 07       	cpc	r30, r20
 54e:	f5 07       	cpc	r31, r21
 550:	98 f0       	brcs	.+38     	; 0x578 <__fp_cmp+0x46>
 552:	62 1b       	sub	r22, r18
 554:	73 0b       	sbc	r23, r19
 556:	84 0b       	sbc	r24, r20
 558:	95 0b       	sbc	r25, r21
 55a:	39 f4       	brne	.+14     	; 0x56a <__fp_cmp+0x38>
 55c:	0a 26       	eor	r0, r26
 55e:	61 f0       	breq	.+24     	; 0x578 <__fp_cmp+0x46>
 560:	23 2b       	or	r18, r19
 562:	24 2b       	or	r18, r20
 564:	25 2b       	or	r18, r21
 566:	21 f4       	brne	.+8      	; 0x570 <__fp_cmp+0x3e>
 568:	08 95       	ret
 56a:	0a 26       	eor	r0, r26
 56c:	09 f4       	brne	.+2      	; 0x570 <__fp_cmp+0x3e>
 56e:	a1 40       	sbci	r26, 0x01	; 1
 570:	a6 95       	lsr	r26
 572:	8f ef       	ldi	r24, 0xFF	; 255
 574:	81 1d       	adc	r24, r1
 576:	81 1d       	adc	r24, r1
 578:	08 95       	ret

0000057a <__fp_inf>:
 57a:	97 f9       	bld	r25, 7
 57c:	9f 67       	ori	r25, 0x7F	; 127
 57e:	80 e8       	ldi	r24, 0x80	; 128
 580:	70 e0       	ldi	r23, 0x00	; 0
 582:	60 e0       	ldi	r22, 0x00	; 0
 584:	08 95       	ret

00000586 <__fp_nan>:
 586:	9f ef       	ldi	r25, 0xFF	; 255
 588:	80 ec       	ldi	r24, 0xC0	; 192
 58a:	08 95       	ret

0000058c <__fp_pscA>:
 58c:	00 24       	eor	r0, r0
 58e:	0a 94       	dec	r0
 590:	16 16       	cp	r1, r22
 592:	17 06       	cpc	r1, r23
 594:	18 06       	cpc	r1, r24
 596:	09 06       	cpc	r0, r25
 598:	08 95       	ret

0000059a <__fp_pscB>:
 59a:	00 24       	eor	r0, r0
 59c:	0a 94       	dec	r0
 59e:	12 16       	cp	r1, r18
 5a0:	13 06       	cpc	r1, r19
 5a2:	14 06       	cpc	r1, r20
 5a4:	05 06       	cpc	r0, r21
 5a6:	08 95       	ret

000005a8 <__fp_round>:
 5a8:	09 2e       	mov	r0, r25
 5aa:	03 94       	inc	r0
 5ac:	00 0c       	add	r0, r0
 5ae:	11 f4       	brne	.+4      	; 0x5b4 <__fp_round+0xc>
 5b0:	88 23       	and	r24, r24
 5b2:	52 f0       	brmi	.+20     	; 0x5c8 <__fp_round+0x20>
 5b4:	bb 0f       	add	r27, r27
 5b6:	40 f4       	brcc	.+16     	; 0x5c8 <__fp_round+0x20>
 5b8:	bf 2b       	or	r27, r31
 5ba:	11 f4       	brne	.+4      	; 0x5c0 <__fp_round+0x18>
 5bc:	60 ff       	sbrs	r22, 0
 5be:	04 c0       	rjmp	.+8      	; 0x5c8 <__fp_round+0x20>
 5c0:	6f 5f       	subi	r22, 0xFF	; 255
 5c2:	7f 4f       	sbci	r23, 0xFF	; 255
 5c4:	8f 4f       	sbci	r24, 0xFF	; 255
 5c6:	9f 4f       	sbci	r25, 0xFF	; 255
 5c8:	08 95       	ret

000005ca <__fp_split3>:
 5ca:	57 fd       	sbrc	r21, 7
 5cc:	90 58       	subi	r25, 0x80	; 128
 5ce:	44 0f       	add	r20, r20
 5d0:	55 1f       	adc	r21, r21
 5d2:	59 f0       	breq	.+22     	; 0x5ea <__fp_splitA+0x10>
 5d4:	5f 3f       	cpi	r21, 0xFF	; 255
 5d6:	71 f0       	breq	.+28     	; 0x5f4 <__fp_splitA+0x1a>
 5d8:	47 95       	ror	r20

000005da <__fp_splitA>:
 5da:	88 0f       	add	r24, r24
 5dc:	97 fb       	bst	r25, 7
 5de:	99 1f       	adc	r25, r25
 5e0:	61 f0       	breq	.+24     	; 0x5fa <__fp_splitA+0x20>
 5e2:	9f 3f       	cpi	r25, 0xFF	; 255
 5e4:	79 f0       	breq	.+30     	; 0x604 <__fp_splitA+0x2a>
 5e6:	87 95       	ror	r24
 5e8:	08 95       	ret
 5ea:	12 16       	cp	r1, r18
 5ec:	13 06       	cpc	r1, r19
 5ee:	14 06       	cpc	r1, r20
 5f0:	55 1f       	adc	r21, r21
 5f2:	f2 cf       	rjmp	.-28     	; 0x5d8 <__fp_split3+0xe>
 5f4:	46 95       	lsr	r20
 5f6:	f1 df       	rcall	.-30     	; 0x5da <__fp_splitA>
 5f8:	08 c0       	rjmp	.+16     	; 0x60a <__fp_splitA+0x30>
 5fa:	16 16       	cp	r1, r22
 5fc:	17 06       	cpc	r1, r23
 5fe:	18 06       	cpc	r1, r24
 600:	99 1f       	adc	r25, r25
 602:	f1 cf       	rjmp	.-30     	; 0x5e6 <__fp_splitA+0xc>
 604:	86 95       	lsr	r24
 606:	71 05       	cpc	r23, r1
 608:	61 05       	cpc	r22, r1
 60a:	08 94       	sec
 60c:	08 95       	ret

0000060e <__fp_zero>:
 60e:	e8 94       	clt

00000610 <__fp_szero>:
 610:	bb 27       	eor	r27, r27
 612:	66 27       	eor	r22, r22
 614:	77 27       	eor	r23, r23
 616:	cb 01       	movw	r24, r22
 618:	97 f9       	bld	r25, 7
 61a:	08 95       	ret

0000061c <do_rand>:
 61c:	8f 92       	push	r8
 61e:	9f 92       	push	r9
 620:	af 92       	push	r10
 622:	bf 92       	push	r11
 624:	cf 92       	push	r12
 626:	df 92       	push	r13
 628:	ef 92       	push	r14
 62a:	ff 92       	push	r15
 62c:	cf 93       	push	r28
 62e:	df 93       	push	r29
 630:	ec 01       	movw	r28, r24
 632:	68 81       	ld	r22, Y
 634:	79 81       	ldd	r23, Y+1	; 0x01
 636:	8a 81       	ldd	r24, Y+2	; 0x02
 638:	9b 81       	ldd	r25, Y+3	; 0x03
 63a:	61 15       	cp	r22, r1
 63c:	71 05       	cpc	r23, r1
 63e:	81 05       	cpc	r24, r1
 640:	91 05       	cpc	r25, r1
 642:	21 f4       	brne	.+8      	; 0x64c <do_rand+0x30>
 644:	64 e2       	ldi	r22, 0x24	; 36
 646:	79 ed       	ldi	r23, 0xD9	; 217
 648:	8b e5       	ldi	r24, 0x5B	; 91
 64a:	97 e0       	ldi	r25, 0x07	; 7
 64c:	2d e1       	ldi	r18, 0x1D	; 29
 64e:	33 ef       	ldi	r19, 0xF3	; 243
 650:	41 e0       	ldi	r20, 0x01	; 1
 652:	50 e0       	ldi	r21, 0x00	; 0
 654:	38 d0       	rcall	.+112    	; 0x6c6 <__divmodsi4>
 656:	49 01       	movw	r8, r18
 658:	5a 01       	movw	r10, r20
 65a:	9b 01       	movw	r18, r22
 65c:	ac 01       	movw	r20, r24
 65e:	a7 ea       	ldi	r26, 0xA7	; 167
 660:	b1 e4       	ldi	r27, 0x41	; 65
 662:	4d d0       	rcall	.+154    	; 0x6fe <__muluhisi3>
 664:	6b 01       	movw	r12, r22
 666:	7c 01       	movw	r14, r24
 668:	ac ee       	ldi	r26, 0xEC	; 236
 66a:	b4 ef       	ldi	r27, 0xF4	; 244
 66c:	a5 01       	movw	r20, r10
 66e:	94 01       	movw	r18, r8
 670:	52 d0       	rcall	.+164    	; 0x716 <__mulohisi3>
 672:	dc 01       	movw	r26, r24
 674:	cb 01       	movw	r24, r22
 676:	8c 0d       	add	r24, r12
 678:	9d 1d       	adc	r25, r13
 67a:	ae 1d       	adc	r26, r14
 67c:	bf 1d       	adc	r27, r15
 67e:	b7 ff       	sbrs	r27, 7
 680:	03 c0       	rjmp	.+6      	; 0x688 <do_rand+0x6c>
 682:	01 97       	sbiw	r24, 0x01	; 1
 684:	a1 09       	sbc	r26, r1
 686:	b0 48       	sbci	r27, 0x80	; 128
 688:	88 83       	st	Y, r24
 68a:	99 83       	std	Y+1, r25	; 0x01
 68c:	aa 83       	std	Y+2, r26	; 0x02
 68e:	bb 83       	std	Y+3, r27	; 0x03
 690:	9f 77       	andi	r25, 0x7F	; 127
 692:	df 91       	pop	r29
 694:	cf 91       	pop	r28
 696:	ff 90       	pop	r15
 698:	ef 90       	pop	r14
 69a:	df 90       	pop	r13
 69c:	cf 90       	pop	r12
 69e:	bf 90       	pop	r11
 6a0:	af 90       	pop	r10
 6a2:	9f 90       	pop	r9
 6a4:	8f 90       	pop	r8
 6a6:	08 95       	ret

000006a8 <rand_r>:
 6a8:	b9 cf       	rjmp	.-142    	; 0x61c <do_rand>

000006aa <rand>:
 6aa:	80 e0       	ldi	r24, 0x00	; 0
 6ac:	92 e0       	ldi	r25, 0x02	; 2
 6ae:	b6 cf       	rjmp	.-148    	; 0x61c <do_rand>

000006b0 <srand>:
 6b0:	a0 e0       	ldi	r26, 0x00	; 0
 6b2:	b0 e0       	ldi	r27, 0x00	; 0
 6b4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
 6b8:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
 6bc:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__data_start+0x2>
 6c0:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__data_start+0x3>
 6c4:	08 95       	ret

000006c6 <__divmodsi4>:
 6c6:	05 2e       	mov	r0, r21
 6c8:	97 fb       	bst	r25, 7
 6ca:	16 f4       	brtc	.+4      	; 0x6d0 <__divmodsi4+0xa>
 6cc:	00 94       	com	r0
 6ce:	0f d0       	rcall	.+30     	; 0x6ee <__negsi2>
 6d0:	57 fd       	sbrc	r21, 7
 6d2:	05 d0       	rcall	.+10     	; 0x6de <__divmodsi4_neg2>
 6d4:	24 d0       	rcall	.+72     	; 0x71e <__udivmodsi4>
 6d6:	07 fc       	sbrc	r0, 7
 6d8:	02 d0       	rcall	.+4      	; 0x6de <__divmodsi4_neg2>
 6da:	46 f4       	brtc	.+16     	; 0x6ec <__divmodsi4_exit>
 6dc:	08 c0       	rjmp	.+16     	; 0x6ee <__negsi2>

000006de <__divmodsi4_neg2>:
 6de:	50 95       	com	r21
 6e0:	40 95       	com	r20
 6e2:	30 95       	com	r19
 6e4:	21 95       	neg	r18
 6e6:	3f 4f       	sbci	r19, 0xFF	; 255
 6e8:	4f 4f       	sbci	r20, 0xFF	; 255
 6ea:	5f 4f       	sbci	r21, 0xFF	; 255

000006ec <__divmodsi4_exit>:
 6ec:	08 95       	ret

000006ee <__negsi2>:
 6ee:	90 95       	com	r25
 6f0:	80 95       	com	r24
 6f2:	70 95       	com	r23
 6f4:	61 95       	neg	r22
 6f6:	7f 4f       	sbci	r23, 0xFF	; 255
 6f8:	8f 4f       	sbci	r24, 0xFF	; 255
 6fa:	9f 4f       	sbci	r25, 0xFF	; 255
 6fc:	08 95       	ret

000006fe <__muluhisi3>:
 6fe:	31 d0       	rcall	.+98     	; 0x762 <__umulhisi3>
 700:	a5 9f       	mul	r26, r21
 702:	90 0d       	add	r25, r0
 704:	b4 9f       	mul	r27, r20
 706:	90 0d       	add	r25, r0
 708:	a4 9f       	mul	r26, r20
 70a:	80 0d       	add	r24, r0
 70c:	91 1d       	adc	r25, r1
 70e:	11 24       	eor	r1, r1
 710:	08 95       	ret

00000712 <__mulshisi3>:
 712:	b7 ff       	sbrs	r27, 7
 714:	f4 cf       	rjmp	.-24     	; 0x6fe <__muluhisi3>

00000716 <__mulohisi3>:
 716:	f3 df       	rcall	.-26     	; 0x6fe <__muluhisi3>
 718:	82 1b       	sub	r24, r18
 71a:	93 0b       	sbc	r25, r19
 71c:	08 95       	ret

0000071e <__udivmodsi4>:
 71e:	a1 e2       	ldi	r26, 0x21	; 33
 720:	1a 2e       	mov	r1, r26
 722:	aa 1b       	sub	r26, r26
 724:	bb 1b       	sub	r27, r27
 726:	fd 01       	movw	r30, r26
 728:	0d c0       	rjmp	.+26     	; 0x744 <__udivmodsi4_ep>

0000072a <__udivmodsi4_loop>:
 72a:	aa 1f       	adc	r26, r26
 72c:	bb 1f       	adc	r27, r27
 72e:	ee 1f       	adc	r30, r30
 730:	ff 1f       	adc	r31, r31
 732:	a2 17       	cp	r26, r18
 734:	b3 07       	cpc	r27, r19
 736:	e4 07       	cpc	r30, r20
 738:	f5 07       	cpc	r31, r21
 73a:	20 f0       	brcs	.+8      	; 0x744 <__udivmodsi4_ep>
 73c:	a2 1b       	sub	r26, r18
 73e:	b3 0b       	sbc	r27, r19
 740:	e4 0b       	sbc	r30, r20
 742:	f5 0b       	sbc	r31, r21

00000744 <__udivmodsi4_ep>:
 744:	66 1f       	adc	r22, r22
 746:	77 1f       	adc	r23, r23
 748:	88 1f       	adc	r24, r24
 74a:	99 1f       	adc	r25, r25
 74c:	1a 94       	dec	r1
 74e:	69 f7       	brne	.-38     	; 0x72a <__udivmodsi4_loop>
 750:	60 95       	com	r22
 752:	70 95       	com	r23
 754:	80 95       	com	r24
 756:	90 95       	com	r25
 758:	9b 01       	movw	r18, r22
 75a:	ac 01       	movw	r20, r24
 75c:	bd 01       	movw	r22, r26
 75e:	cf 01       	movw	r24, r30
 760:	08 95       	ret

00000762 <__umulhisi3>:
 762:	a2 9f       	mul	r26, r18
 764:	b0 01       	movw	r22, r0
 766:	b3 9f       	mul	r27, r19
 768:	c0 01       	movw	r24, r0
 76a:	a3 9f       	mul	r26, r19
 76c:	70 0d       	add	r23, r0
 76e:	81 1d       	adc	r24, r1
 770:	11 24       	eor	r1, r1
 772:	91 1d       	adc	r25, r1
 774:	b2 9f       	mul	r27, r18
 776:	70 0d       	add	r23, r0
 778:	81 1d       	adc	r24, r1
 77a:	11 24       	eor	r1, r1
 77c:	91 1d       	adc	r25, r1
 77e:	08 95       	ret

00000780 <_exit>:
 780:	f8 94       	cli

00000782 <__stop_program>:
 782:	ff cf       	rjmp	.-2      	; 0x782 <__stop_program>
