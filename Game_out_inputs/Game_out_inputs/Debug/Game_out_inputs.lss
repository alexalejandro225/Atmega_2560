
Game_out_inputs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800200  00000756  000007ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000756  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800216  00800216  00000800  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000830  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000870  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011e6  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cea  00000000  00000000  00001ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000681  00000000  00000000  000027a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00002e24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ee  00000000  00000000  00002ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000049f  00000000  00000000  000034d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003975  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8c c0       	rjmp	.+280    	; 0x11e <__bad_interrupt>
   6:	00 00       	nop
   8:	8a c0       	rjmp	.+276    	; 0x11e <__bad_interrupt>
   a:	00 00       	nop
   c:	88 c0       	rjmp	.+272    	; 0x11e <__bad_interrupt>
   e:	00 00       	nop
  10:	86 c0       	rjmp	.+268    	; 0x11e <__bad_interrupt>
  12:	00 00       	nop
  14:	84 c0       	rjmp	.+264    	; 0x11e <__bad_interrupt>
  16:	00 00       	nop
  18:	82 c0       	rjmp	.+260    	; 0x11e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	80 c0       	rjmp	.+256    	; 0x11e <__bad_interrupt>
  1e:	00 00       	nop
  20:	7e c0       	rjmp	.+252    	; 0x11e <__bad_interrupt>
  22:	00 00       	nop
  24:	7c c0       	rjmp	.+248    	; 0x11e <__bad_interrupt>
  26:	00 00       	nop
  28:	7a c0       	rjmp	.+244    	; 0x11e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	78 c0       	rjmp	.+240    	; 0x11e <__bad_interrupt>
  2e:	00 00       	nop
  30:	76 c0       	rjmp	.+236    	; 0x11e <__bad_interrupt>
  32:	00 00       	nop
  34:	74 c0       	rjmp	.+232    	; 0x11e <__bad_interrupt>
  36:	00 00       	nop
  38:	72 c0       	rjmp	.+228    	; 0x11e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	70 c0       	rjmp	.+224    	; 0x11e <__bad_interrupt>
  3e:	00 00       	nop
  40:	6e c0       	rjmp	.+220    	; 0x11e <__bad_interrupt>
  42:	00 00       	nop
  44:	6c c0       	rjmp	.+216    	; 0x11e <__bad_interrupt>
  46:	00 00       	nop
  48:	6a c0       	rjmp	.+212    	; 0x11e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	68 c0       	rjmp	.+208    	; 0x11e <__bad_interrupt>
  4e:	00 00       	nop
  50:	66 c0       	rjmp	.+204    	; 0x11e <__bad_interrupt>
  52:	00 00       	nop
  54:	64 c0       	rjmp	.+200    	; 0x11e <__bad_interrupt>
  56:	00 00       	nop
  58:	62 c0       	rjmp	.+196    	; 0x11e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	60 c0       	rjmp	.+192    	; 0x11e <__bad_interrupt>
  5e:	00 00       	nop
  60:	5e c0       	rjmp	.+188    	; 0x11e <__bad_interrupt>
  62:	00 00       	nop
  64:	5c c0       	rjmp	.+184    	; 0x11e <__bad_interrupt>
  66:	00 00       	nop
  68:	5a c0       	rjmp	.+180    	; 0x11e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	58 c0       	rjmp	.+176    	; 0x11e <__bad_interrupt>
  6e:	00 00       	nop
  70:	56 c0       	rjmp	.+172    	; 0x11e <__bad_interrupt>
  72:	00 00       	nop
  74:	54 c0       	rjmp	.+168    	; 0x11e <__bad_interrupt>
  76:	00 00       	nop
  78:	52 c0       	rjmp	.+164    	; 0x11e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	50 c0       	rjmp	.+160    	; 0x11e <__bad_interrupt>
  7e:	00 00       	nop
  80:	4e c0       	rjmp	.+156    	; 0x11e <__bad_interrupt>
  82:	00 00       	nop
  84:	4c c0       	rjmp	.+152    	; 0x11e <__bad_interrupt>
  86:	00 00       	nop
  88:	4a c0       	rjmp	.+148    	; 0x11e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	48 c0       	rjmp	.+144    	; 0x11e <__bad_interrupt>
  8e:	00 00       	nop
  90:	46 c0       	rjmp	.+140    	; 0x11e <__bad_interrupt>
  92:	00 00       	nop
  94:	44 c0       	rjmp	.+136    	; 0x11e <__bad_interrupt>
  96:	00 00       	nop
  98:	42 c0       	rjmp	.+132    	; 0x11e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	40 c0       	rjmp	.+128    	; 0x11e <__bad_interrupt>
  9e:	00 00       	nop
  a0:	3e c0       	rjmp	.+124    	; 0x11e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3c c0       	rjmp	.+120    	; 0x11e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3a c0       	rjmp	.+116    	; 0x11e <__bad_interrupt>
  aa:	00 00       	nop
  ac:	38 c0       	rjmp	.+112    	; 0x11e <__bad_interrupt>
  ae:	00 00       	nop
  b0:	36 c0       	rjmp	.+108    	; 0x11e <__bad_interrupt>
  b2:	00 00       	nop
  b4:	34 c0       	rjmp	.+104    	; 0x11e <__bad_interrupt>
  b6:	00 00       	nop
  b8:	32 c0       	rjmp	.+100    	; 0x11e <__bad_interrupt>
  ba:	00 00       	nop
  bc:	30 c0       	rjmp	.+96     	; 0x11e <__bad_interrupt>
  be:	00 00       	nop
  c0:	2e c0       	rjmp	.+92     	; 0x11e <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2c c0       	rjmp	.+88     	; 0x11e <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2a c0       	rjmp	.+84     	; 0x11e <__bad_interrupt>
  ca:	00 00       	nop
  cc:	28 c0       	rjmp	.+80     	; 0x11e <__bad_interrupt>
  ce:	00 00       	nop
  d0:	26 c0       	rjmp	.+76     	; 0x11e <__bad_interrupt>
  d2:	00 00       	nop
  d4:	24 c0       	rjmp	.+72     	; 0x11e <__bad_interrupt>
  d6:	00 00       	nop
  d8:	22 c0       	rjmp	.+68     	; 0x11e <__bad_interrupt>
  da:	00 00       	nop
  dc:	20 c0       	rjmp	.+64     	; 0x11e <__bad_interrupt>
  de:	00 00       	nop
  e0:	1e c0       	rjmp	.+60     	; 0x11e <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e6 e5       	ldi	r30, 0x56	; 86
  f8:	f7 e0       	ldi	r31, 0x07	; 7
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	0b bf       	out	0x3b, r16	; 59
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
 100:	07 90       	elpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	a6 31       	cpi	r26, 0x16	; 22
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
 10a:	22 e0       	ldi	r18, 0x02	; 2
 10c:	a6 e1       	ldi	r26, 0x16	; 22
 10e:	b2 e0       	ldi	r27, 0x02	; 2
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	a0 32       	cpi	r26, 0x20	; 32
 116:	b2 07       	cpc	r27, r18
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	e1 d0       	rcall	.+450    	; 0x2de <main>
 11c:	1a c3       	rjmp	.+1588   	; 0x752 <_exit>

0000011e <__bad_interrupt>:
 11e:	70 cf       	rjmp	.-288    	; 0x0 <__vectors>

00000120 <delay_100_ms>:


.global delay_100_ms
 
 delay_100_ms:
    ldi  r18, 9
 120:	29 e0       	ldi	r18, 0x09	; 9
    ldi  r19, 30
 122:	3e e1       	ldi	r19, 0x1E	; 30
    ldi  r20, 226
 124:	42 ee       	ldi	r20, 0xE2	; 226

00000126 <L2>:
L2: dec  r20
 126:	4a 95       	dec	r20
    brne L2
 128:	f1 f7       	brne	.-4      	; 0x126 <L2>
    dec  r19
 12a:	3a 95       	dec	r19
    brne L2
 12c:	e1 f7       	brne	.-8      	; 0x126 <L2>
    dec  r18
 12e:	2a 95       	dec	r18
    brne L2
 130:	d1 f7       	brne	.-12     	; 0x126 <L2>
	nop
 132:	00 00       	nop
	nop
 134:	00 00       	nop
	ret
 136:	08 95       	ret

00000138 <delay_1_s>:

.global delay_1_s

	delay_1_s:
    ldi  r18, 82
 138:	22 e5       	ldi	r18, 0x52	; 82
    ldi  r19, 43
 13a:	3b e2       	ldi	r19, 0x2B	; 43
    ldi  r20, 254
 13c:	4e ef       	ldi	r20, 0xFE	; 254

0000013e <L3>:
L3: dec  r20
 13e:	4a 95       	dec	r20
    brne L3
 140:	f1 f7       	brne	.-4      	; 0x13e <L3>
    dec  r19
 142:	3a 95       	dec	r19
    brne L3
 144:	e1 f7       	brne	.-8      	; 0x13e <L3>
    dec  r18
 146:	2a 95       	dec	r18
    brne L3
 148:	d1 f7       	brne	.-12     	; 0x13e <L3>
	nop
 14a:	00 00       	nop
	nop
 14c:	00 00       	nop
 14e:	08 95       	ret

00000150 <set_led>:

void set_led(uint8_t num_led)
{
	static uint8_t list_ddra[]={0x00,0x03,0x03,0x06,0x06,0x05,0x05,0x0C,0x0C};
	static uint8_t list_porta[]={0x00,0x02,0x01,0x04,0x02,0x01,0x04,0x08,0x04};
	DDRA=list_ddra[num_led];
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	fc 01       	movw	r30, r24
 154:	e3 5f       	subi	r30, 0xF3	; 243
 156:	fd 4f       	sbci	r31, 0xFD	; 253
 158:	20 81       	ld	r18, Z
 15a:	21 b9       	out	0x01, r18	; 1
	PORTA=list_porta[num_led];
 15c:	fc 01       	movw	r30, r24
 15e:	ec 5f       	subi	r30, 0xFC	; 252
 160:	fd 4f       	sbci	r31, 0xFD	; 253
 162:	80 81       	ld	r24, Z
 164:	82 b9       	out	0x02, r24	; 2
 166:	08 95       	ret

00000168 <matrix_keyboard>:
			
    }
}

void matrix_keyboard(button* input_key)
{
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	8c 01       	movw	r16, r24
	
	DDRB=0XFF;
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	84 b9       	out	0x04, r24	; 4
	DDRC=0X00;
 176:	17 b8       	out	0x07, r1	; 7
	PORTC=0XFF;	
 178:	88 b9       	out	0x08, r24	; 8
	PORTB=0xFB;
 17a:	8b ef       	ldi	r24, 0xFB	; 251
 17c:	85 b9       	out	0x05, r24	; 5
 17e:	c3 e0       	ldi	r28, 0x03	; 3
			set_led(i);
			delay_100_ms();
			delay_100_ms();
			delay_100_ms();
			input_key->press_button=i;
			input_key->flag_press=1;
 180:	d1 e0       	ldi	r29, 0x01	; 1
	DDRC=0X00;
	PORTC=0XFF;	
	PORTB=0xFB;
	for(int i=3; i>0; i--)
	{
		if(PINC==0XFE)
 182:	86 b1       	in	r24, 0x06	; 6
 184:	8e 3f       	cpi	r24, 0xFE	; 254
 186:	41 f4       	brne	.+16     	; 0x198 <matrix_keyboard+0x30>
		{
			set_led(i);
 188:	8c 2f       	mov	r24, r28
 18a:	e2 df       	rcall	.-60     	; 0x150 <set_led>
			delay_100_ms();
 18c:	c9 df       	rcall	.-110    	; 0x120 <delay_100_ms>
			delay_100_ms();
 18e:	c8 df       	rcall	.-112    	; 0x120 <delay_100_ms>
 190:	c7 df       	rcall	.-114    	; 0x120 <delay_100_ms>
			delay_100_ms();
 192:	f8 01       	movw	r30, r16
 194:	c0 83       	st	Z, r28
			input_key->press_button=i;
 196:	d1 83       	std	Z+1, r29	; 0x01
 198:	85 b1       	in	r24, 0x05	; 5
			input_key->flag_press=1;
 19a:	86 95       	lsr	r24
		}
		PORTB=PORTB>>1;
 19c:	85 b9       	out	0x05, r24	; 5
 19e:	c1 50       	subi	r28, 0x01	; 1
 1a0:	81 f7       	brne	.-32     	; 0x182 <matrix_keyboard+0x1a>
 1a2:	8b ef       	ldi	r24, 0xFB	; 251
	
	DDRB=0XFF;
	DDRC=0X00;
	PORTC=0XFF;	
	PORTB=0xFB;
	for(int i=3; i>0; i--)
 1a4:	85 b9       	out	0x05, r24	; 5
			input_key->flag_press=1;
		}
		PORTB=PORTB>>1;
	}
	
	PORTB=0xFB;
 1a6:	c6 e0       	ldi	r28, 0x06	; 6
 1a8:	d1 e0       	ldi	r29, 0x01	; 1
 1aa:	86 b1       	in	r24, 0x06	; 6
			set_led(i);
			delay_100_ms();
			delay_100_ms();
			delay_100_ms();
			input_key->press_button=i;
			input_key->flag_press=1;
 1ac:	8d 3f       	cpi	r24, 0xFD	; 253
	}
	
	PORTB=0xFB;
	for(int i=6; i>3; i--)
	{
		if(PINC==0XFD)
 1ae:	41 f4       	brne	.+16     	; 0x1c0 <matrix_keyboard+0x58>
		{
			set_led(i);
 1b0:	8c 2f       	mov	r24, r28
 1b2:	ce df       	rcall	.-100    	; 0x150 <set_led>
			delay_100_ms();
 1b4:	b5 df       	rcall	.-150    	; 0x120 <delay_100_ms>
 1b6:	b4 df       	rcall	.-152    	; 0x120 <delay_100_ms>
			delay_100_ms();
 1b8:	b3 df       	rcall	.-154    	; 0x120 <delay_100_ms>
 1ba:	f8 01       	movw	r30, r16
			delay_100_ms();
 1bc:	c0 83       	st	Z, r28
 1be:	d1 83       	std	Z+1, r29	; 0x01
			input_key->press_button=i;
 1c0:	85 b1       	in	r24, 0x05	; 5
 1c2:	86 95       	lsr	r24
			input_key->flag_press=1;
 1c4:	85 b9       	out	0x05, r24	; 5
		}
		PORTB=PORTB>>1;
 1c6:	c1 50       	subi	r28, 0x01	; 1
 1c8:	c3 30       	cpi	r28, 0x03	; 3
 1ca:	79 f7       	brne	.-34     	; 0x1aa <matrix_keyboard+0x42>
 1cc:	8b ef       	ldi	r24, 0xFB	; 251
		}
		PORTB=PORTB>>1;
	}
	
	PORTB=0xFB;
	for(int i=6; i>3; i--)
 1ce:	85 b9       	out	0x05, r24	; 5
 1d0:	c9 e0       	ldi	r28, 0x09	; 9
			input_key->flag_press=1;
		}
		PORTB=PORTB>>1;
	}
	
	PORTB=0xFB;
 1d2:	d1 e0       	ldi	r29, 0x01	; 1
	for(int i=9; i>6; i--)
	{
		if(PINC==0XFB)
 1d4:	86 b1       	in	r24, 0x06	; 6
 1d6:	8b 3f       	cpi	r24, 0xFB	; 251
 1d8:	41 f4       	brne	.+16     	; 0x1ea <matrix_keyboard+0x82>
		{
			set_led(i);
 1da:	8c 2f       	mov	r24, r28
 1dc:	b9 df       	rcall	.-142    	; 0x150 <set_led>
 1de:	a0 df       	rcall	.-192    	; 0x120 <delay_100_ms>
			delay_100_ms();
 1e0:	9f df       	rcall	.-194    	; 0x120 <delay_100_ms>
 1e2:	9e df       	rcall	.-196    	; 0x120 <delay_100_ms>
			delay_100_ms();
 1e4:	f8 01       	movw	r30, r16
 1e6:	c0 83       	st	Z, r28
			delay_100_ms();
 1e8:	d1 83       	std	Z+1, r29	; 0x01
 1ea:	85 b1       	in	r24, 0x05	; 5
			input_key->press_button=i;
 1ec:	86 95       	lsr	r24
 1ee:	85 b9       	out	0x05, r24	; 5
			input_key->flag_press=1;
 1f0:	c1 50       	subi	r28, 0x01	; 1
		}
		PORTB=PORTB>>1;
 1f2:	c6 30       	cpi	r28, 0x06	; 6
 1f4:	79 f7       	brne	.-34     	; 0x1d4 <matrix_keyboard+0x6c>
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
		}
		PORTB=PORTB>>1;
	}
	
	PORTB=0xFB;
	for(int i=9; i>6; i--)
 1fa:	1f 91       	pop	r17
 1fc:	0f 91       	pop	r16
			input_key->press_button=i;
			input_key->flag_press=1;
		}
		PORTB=PORTB>>1;
	}
}
 1fe:	08 95       	ret

00000200 <winner>:
 200:	cf 92       	push	r12
 202:	df 92       	push	r13
 204:	ef 92       	push	r14
 206:	ff 92       	push	r15

void winner()
{
 208:	0f 93       	push	r16
 20a:	1f 93       	push	r17
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	68 94       	set
 212:	cc 24       	eor	r12, r12
 214:	c3 f8       	bld	r12, 3
 216:	d1 2c       	mov	r13, r1
 218:	12 c0       	rjmp	.+36     	; 0x23e <winner+0x3e>
	for(int z=8; z>0; z--){
		for(int j=0; j<8890; j++)
		{
			for(int i=8; i>0; i--)
			{
				if(i!=z)
 21a:	0c 17       	cp	r16, r28
 21c:	1d 07       	cpc	r17, r29
 21e:	11 f0       	breq	.+4      	; 0x224 <winner+0x24>
			{
				set_led(i);
 220:	8c 2f       	mov	r24, r28
 222:	96 df       	rcall	.-212    	; 0x150 <set_led>
void winner()
{
	for(int z=8; z>0; z--){
		for(int j=0; j<8890; j++)
		{
			for(int i=8; i>0; i--)
 224:	21 97       	sbiw	r28, 0x01	; 1
 226:	c9 f7       	brne	.-14     	; 0x21a <winner+0x1a>
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	e8 1a       	sub	r14, r24
 22c:	f1 08       	sbc	r15, r1
}

void winner()
{
	for(int z=8; z>0; z--){
		for(int j=0; j<8890; j++)
 22e:	19 f0       	breq	.+6      	; 0x236 <winner+0x36>
		PORTB=PORTB>>1;
	}
}

void winner()
{
 230:	c8 e0       	ldi	r28, 0x08	; 8
 232:	d0 e0       	ldi	r29, 0x00	; 0
 234:	f2 cf       	rjmp	.-28     	; 0x21a <winner+0x1a>
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	c8 1a       	sub	r12, r24
 23a:	d1 08       	sbc	r13, r1
	for(int z=8; z>0; z--){
 23c:	41 f0       	breq	.+16     	; 0x24e <winner+0x4e>
 23e:	86 01       	movw	r16, r12
		PORTB=PORTB>>1;
	}
}

void winner()
{
 240:	0f 2e       	mov	r0, r31
 242:	fa eb       	ldi	r31, 0xBA	; 186
 244:	ef 2e       	mov	r14, r31
 246:	f2 e2       	ldi	r31, 0x22	; 34
 248:	ff 2e       	mov	r15, r31
 24a:	f0 2d       	mov	r31, r0
 24c:	f1 cf       	rjmp	.-30     	; 0x230 <winner+0x30>
				set_led(i);
				}	
			}
		}
	}
}
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	ff 90       	pop	r15
 258:	ef 90       	pop	r14
 25a:	df 90       	pop	r13
 25c:	cf 90       	pop	r12
 25e:	08 95       	ret

00000260 <looser>:

void looser()
{
 260:	cf 92       	push	r12
 262:	df 92       	push	r13
 264:	ef 92       	push	r14
 266:	ff 92       	push	r15
	
		for(float j=0; j<15000; j++)
 268:	c1 2c       	mov	r12, r1
 26a:	d1 2c       	mov	r13, r1
 26c:	76 01       	movw	r14, r12
		{
			for(int i=8; i>4; i--)
			{
					set_led(i);
 26e:	88 e0       	ldi	r24, 0x08	; 8
 270:	6f df       	rcall	.-290    	; 0x150 <set_led>
 272:	87 e0       	ldi	r24, 0x07	; 7
 274:	6d df       	rcall	.-294    	; 0x150 <set_led>
 276:	86 e0       	ldi	r24, 0x06	; 6
 278:	6b df       	rcall	.-298    	; 0x150 <set_led>
 27a:	85 e0       	ldi	r24, 0x05	; 5
 27c:	69 df       	rcall	.-302    	; 0x150 <set_led>
}

void looser()
{
	
		for(float j=0; j<15000; j++)
 27e:	20 e0       	ldi	r18, 0x00	; 0
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	40 e8       	ldi	r20, 0x80	; 128
 284:	5f e3       	ldi	r21, 0x3F	; 63
 286:	c7 01       	movw	r24, r14
 288:	b6 01       	movw	r22, r12
 28a:	d4 d0       	rcall	.+424    	; 0x434 <__addsf3>
 28c:	6b 01       	movw	r12, r22
 28e:	7c 01       	movw	r14, r24
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	30 e6       	ldi	r19, 0x60	; 96
 294:	4a e6       	ldi	r20, 0x6A	; 106
 296:	56 e4       	ldi	r21, 0x46	; 70
 298:	31 d1       	rcall	.+610    	; 0x4fc <__cmpsf2>
 29a:	88 23       	and	r24, r24
 29c:	44 f3       	brlt	.-48     	; 0x26e <looser+0xe>
 29e:	c1 2c       	mov	r12, r1
 2a0:	d1 2c       	mov	r13, r1
		
	for(float j2=0; j2<15000; j2++)
		{
			for(int i2=4; i2>0; i2--)
			{
					set_led(i2);
 2a2:	76 01       	movw	r14, r12
 2a4:	84 e0       	ldi	r24, 0x04	; 4
 2a6:	54 df       	rcall	.-344    	; 0x150 <set_led>
 2a8:	83 e0       	ldi	r24, 0x03	; 3
 2aa:	52 df       	rcall	.-348    	; 0x150 <set_led>
 2ac:	82 e0       	ldi	r24, 0x02	; 2
 2ae:	50 df       	rcall	.-352    	; 0x150 <set_led>
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	4e df       	rcall	.-356    	; 0x150 <set_led>
 2b4:	20 e0       	ldi	r18, 0x00	; 0
			{
					set_led(i);
			}
		}
		
	for(float j2=0; j2<15000; j2++)
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	40 e8       	ldi	r20, 0x80	; 128
 2ba:	5f e3       	ldi	r21, 0x3F	; 63
 2bc:	c7 01       	movw	r24, r14
 2be:	b6 01       	movw	r22, r12
 2c0:	b9 d0       	rcall	.+370    	; 0x434 <__addsf3>
 2c2:	6b 01       	movw	r12, r22
 2c4:	7c 01       	movw	r14, r24
 2c6:	20 e0       	ldi	r18, 0x00	; 0
 2c8:	30 e6       	ldi	r19, 0x60	; 96
 2ca:	4a e6       	ldi	r20, 0x6A	; 106
 2cc:	56 e4       	ldi	r21, 0x46	; 70
 2ce:	16 d1       	rcall	.+556    	; 0x4fc <__cmpsf2>
 2d0:	88 23       	and	r24, r24
 2d2:	44 f3       	brlt	.-48     	; 0x2a4 <looser+0x44>
 2d4:	ff 90       	pop	r15
 2d6:	ef 90       	pop	r14
			{
					set_led(i2);
			}
		}
	
}
 2d8:	df 90       	pop	r13
 2da:	cf 90       	pop	r12
 2dc:	08 95       	ret

000002de <main>:
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
int count=0;



int main(void)
{
 2e2:	00 d0       	rcall	.+0      	; 0x2e4 <main+0x6>
 2e4:	1f 92       	push	r1
 2e6:	cd b7       	in	r28, 0x3d	; 61
 2e8:	de b7       	in	r29, 0x3e	; 62

	button input_key={0,0,0};
 2ea:	19 82       	std	Y+1, r1	; 0x01
 2ec:	1a 82       	std	Y+2, r1	; 0x02
 2ee:	1b 82       	std	Y+3, r1	; 0x03
 2f0:	0f 2e       	mov	r0, r31
 2f2:	f8 e1       	ldi	r31, 0x18	; 24
 2f4:	4f 2e       	mov	r4, r31
 2f6:	f2 e0       	ldi	r31, 0x02	; 2
 2f8:	5f 2e       	mov	r5, r31
 2fa:	f0 2d       	mov	r31, r0
 2fc:	0f 2e       	mov	r0, r31
 2fe:	f0 e2       	ldi	r31, 0x20	; 32
 300:	8f 2e       	mov	r8, r31
 302:	f2 e0       	ldi	r31, 0x02	; 2
 304:	9f 2e       	mov	r9, r31
 306:	f0 2d       	mov	r31, r0
			{
				
				
					while(input_key.flag_press==0)
					{
						matrix_keyboard(&input_key);
 308:	ce 01       	movw	r24, r28
 30a:	01 96       	adiw	r24, 0x01	; 1
 30c:	5c 01       	movw	r10, r24
 30e:	68 2e       	mov	r6, r24
 310:	7b 2c       	mov	r7, r11
int count=0;



int main(void)
{
 312:	08 e1       	ldi	r16, 0x18	; 24
 314:	12 e0       	ldi	r17, 0x02	; 2
    {
		repeat:
		
		for (int i=0; i<8; i++)
		{
			srand (PINA+PINB+PINC);
 316:	30 b1       	in	r19, 0x00	; 0
 318:	83 b1       	in	r24, 0x03	; 3
 31a:	26 b1       	in	r18, 0x06	; 6
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	83 0f       	add	r24, r19
 320:	91 1d       	adc	r25, r1
 322:	82 0f       	add	r24, r18
 324:	91 1d       	adc	r25, r1
 326:	ad d1       	rcall	.+858    	; 0x682 <srand>
			memory_simmon[i]=((rand() % (8-1+1))+1);
 328:	a9 d1       	rcall	.+850    	; 0x67c <rand>
 32a:	87 70       	andi	r24, 0x07	; 7
 32c:	90 78       	andi	r25, 0x80	; 128
 32e:	99 23       	and	r25, r25
 330:	24 f4       	brge	.+8      	; 0x33a <main+0x5c>
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	88 6f       	ori	r24, 0xF8	; 248
 336:	9f 6f       	ori	r25, 0xFF	; 255
 338:	01 96       	adiw	r24, 0x01	; 1
 33a:	8f 5f       	subi	r24, 0xFF	; 255
 33c:	f8 01       	movw	r30, r16
 33e:	81 93       	st	Z+, r24
 340:	8f 01       	movw	r16, r30
			set_led(memory_simmon[i]);
 342:	06 df       	rcall	.-500    	; 0x150 <set_led>
 344:	80 16       	cp	r8, r16
	button input_key={0,0,0};
    while (1) 
    {
		repeat:
		
		for (int i=0; i<8; i++)
 346:	91 06       	cpc	r9, r17
 348:	31 f7       	brne	.-52     	; 0x316 <main+0x38>
 34a:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <__data_end>
			set_led(memory_simmon[i]);
		}	
		
		for (int j=0; j<8; j++)
		{
			if (8==count)
 34e:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <__data_end+0x1>
 352:	08 97       	sbiw	r24, 0x08	; 8
 354:	61 f0       	breq	.+24     	; 0x36e <main+0x90>
 356:	e1 2c       	mov	r14, r1
 358:	f1 2c       	mov	r15, r1
 35a:	06 c0       	rjmp	.+12     	; 0x368 <main+0x8a>
 35c:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <__data_end>
 360:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <__data_end+0x1>
 364:	08 97       	sbiw	r24, 0x08	; 8
 366:	19 f0       	breq	.+6      	; 0x36e <main+0x90>
 368:	ff 20       	and	r15, r15
					}
					winner();
				}
			}
			
			for (int k=0; k<=j; k++)
 36a:	84 f4       	brge	.+32     	; 0x38c <main+0xae>
 36c:	4d c0       	rjmp	.+154    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		for (int j=0; j<8; j++)
		{
			if (8==count)
			{
				while(1){
					matrix_keyboard(&input_key);
 36e:	c5 01       	movw	r24, r10
 370:	fb de       	rcall	.-522    	; 0x168 <matrix_keyboard>
 372:	8a 81       	ldd	r24, Y+2	; 0x02
					if (input_key.flag_press!=0)
 374:	88 23       	and	r24, r24
 376:	41 f0       	breq	.+16     	; 0x388 <main+0xaa>
					{
						set_led(0);
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	ea de       	rcall	.-556    	; 0x150 <set_led>
 37c:	1a 82       	std	Y+2, r1	; 0x02
						input_key.flag_press=0;
 37e:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <__data_end+0x1>
						count=0;
 382:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <__data_end>
						goto repeat;
 386:	c5 cf       	rjmp	.-118    	; 0x312 <main+0x34>
					}
					winner();
 388:	3b df       	rcall	.-394    	; 0x200 <winner>
 38a:	f1 cf       	rjmp	.-30     	; 0x36e <main+0x90>
				}
 38c:	82 01       	movw	r16, r4
			}
			
			for (int k=0; k<=j; k++)
 38e:	c1 2c       	mov	r12, r1
			{
				set_led(memory_simmon[k]);
 390:	d1 2c       	mov	r13, r1
 392:	f8 01       	movw	r30, r16
 394:	81 91       	ld	r24, Z+
				delay_1_s();
 396:	8f 01       	movw	r16, r30
 398:	db de       	rcall	.-586    	; 0x150 <set_led>
				set_led(0);
 39a:	ce de       	rcall	.-612    	; 0x138 <delay_1_s>
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	d8 de       	rcall	.-592    	; 0x150 <set_led>
				delay_1_s();
 3a0:	cb de       	rcall	.-618    	; 0x138 <delay_1_s>
 3a2:	ff ef       	ldi	r31, 0xFF	; 255
					}
					winner();
				}
			}
			
			for (int k=0; k<=j; k++)
 3a4:	cf 1a       	sub	r12, r31
 3a6:	df 0a       	sbc	r13, r31
 3a8:	ec 14       	cp	r14, r12
 3aa:	fd 04       	cpc	r15, r13
 3ac:	94 f7       	brge	.-28     	; 0x392 <main+0xb4>
 3ae:	c7 01       	movw	r24, r14
 3b0:	87 5e       	subi	r24, 0xE7	; 231
 3b2:	9d 4f       	sbci	r25, 0xFD	; 253
 3b4:	6c 01       	movw	r12, r24
			{
				
				
					while(input_key.flag_press==0)
					{
						matrix_keyboard(&input_key);
 3b6:	82 01       	movw	r16, r4
 3b8:	23 c0       	rjmp	.+70     	; 0x400 <__LOCK_REGION_LENGTH__>
 3ba:	86 2d       	mov	r24, r6
						delay_100_ms();
 3bc:	97 2d       	mov	r25, r7
 3be:	d4 de       	rcall	.-600    	; 0x168 <matrix_keyboard>
						delay_100_ms();
 3c0:	af de       	rcall	.-674    	; 0x120 <delay_100_ms>
 3c2:	ae de       	rcall	.-676    	; 0x120 <delay_100_ms>
			
			for(int n=0; n<=j; n++)
			{
				
				
					while(input_key.flag_press==0)
 3c4:	8a 81       	ldd	r24, Y+2	; 0x02
 3c6:	88 23       	and	r24, r24
					{
						matrix_keyboard(&input_key);
						delay_100_ms();
						delay_100_ms();
					}
					input_key.flag_press=0;
 3c8:	c1 f3       	breq	.-16     	; 0x3ba <main+0xdc>
					set_led(0);
 3ca:	1a 82       	std	Y+2, r1	; 0x02
 3cc:	80 e0       	ldi	r24, 0x00	; 0
					
					
					
					if(memory_simmon[n]!=input_key.press_button)
 3ce:	c0 de       	rcall	.-640    	; 0x150 <set_led>
 3d0:	f8 01       	movw	r30, r16
 3d2:	91 91       	ld	r25, Z+
 3d4:	8f 01       	movw	r16, r30
 3d6:	89 81       	ldd	r24, Y+1	; 0x01
					{
						while(1){
							matrix_keyboard(&input_key);
 3d8:	98 17       	cp	r25, r24
 3da:	79 f0       	breq	.+30     	; 0x3fa <main+0x11c>
 3dc:	c5 01       	movw	r24, r10
						if (input_key.flag_press!=0)
 3de:	c4 de       	rcall	.-632    	; 0x168 <matrix_keyboard>
 3e0:	8a 81       	ldd	r24, Y+2	; 0x02
 3e2:	88 23       	and	r24, r24
						{
							set_led(0);
 3e4:	41 f0       	breq	.+16     	; 0x3f6 <main+0x118>
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	b3 de       	rcall	.-666    	; 0x150 <set_led>
							input_key.flag_press=0;
 3ea:	1a 82       	std	Y+2, r1	; 0x02
							count=0;
 3ec:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <__data_end+0x1>
 3f0:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <__data_end>
							goto repeat;
 3f4:	8e cf       	rjmp	.-228    	; 0x312 <main+0x34>
						}
						looser();
 3f6:	34 df       	rcall	.-408    	; 0x260 <looser>
 3f8:	f1 cf       	rjmp	.-30     	; 0x3dc <main+0xfe>
				delay_1_s();
				set_led(0);
				delay_1_s();
			}
			
			for(int n=0; n<=j; n++)
 3fa:	ec 15       	cp	r30, r12
			{
				
				
					while(input_key.flag_press==0)
 3fc:	fd 05       	cpc	r31, r13
 3fe:	21 f0       	breq	.+8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 400:	8a 81       	ldd	r24, Y+2	; 0x02
 402:	88 23       	and	r24, r24
						}
						looser();
						}
					}
			}
			count++;
 404:	d1 f2       	breq	.-76     	; 0x3ba <main+0xdc>
 406:	e1 cf       	rjmp	.-62     	; 0x3ca <main+0xec>
 408:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <__data_end>
 40c:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <__data_end+0x1>
 410:	01 96       	adiw	r24, 0x01	; 1
 412:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <__data_end+0x1>
			delay_100_ms();
 416:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <__data_end>
			delay_100_ms();
 41a:	82 de       	rcall	.-764    	; 0x120 <delay_100_ms>
 41c:	81 de       	rcall	.-766    	; 0x120 <delay_100_ms>
			delay_100_ms();
 41e:	80 de       	rcall	.-768    	; 0x120 <delay_100_ms>
 420:	ff ef       	ldi	r31, 0xFF	; 255
			srand (PINA+PINB+PINC);
			memory_simmon[i]=((rand() % (8-1+1))+1);
			set_led(memory_simmon[i]);
		}	
		
		for (int j=0; j<8; j++)
 422:	ef 1a       	sub	r14, r31
 424:	ff 0a       	sbc	r15, r31
 426:	88 e0       	ldi	r24, 0x08	; 8
 428:	e8 16       	cp	r14, r24
 42a:	f1 04       	cpc	r15, r1
 42c:	09 f0       	breq	.+2      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42e:	96 cf       	rjmp	.-212    	; 0x35c <main+0x7e>
 430:	70 cf       	rjmp	.-288    	; 0x312 <main+0x34>

00000432 <__subsf3>:
 432:	50 58       	subi	r21, 0x80	; 128

00000434 <__addsf3>:
 434:	bb 27       	eor	r27, r27
 436:	aa 27       	eor	r26, r26
 438:	0e d0       	rcall	.+28     	; 0x456 <__addsf3x>
 43a:	9f c0       	rjmp	.+318    	; 0x57a <__fp_round>
 43c:	90 d0       	rcall	.+288    	; 0x55e <__fp_pscA>
 43e:	30 f0       	brcs	.+12     	; 0x44c <__addsf3+0x18>
 440:	95 d0       	rcall	.+298    	; 0x56c <__fp_pscB>
 442:	20 f0       	brcs	.+8      	; 0x44c <__addsf3+0x18>
 444:	31 f4       	brne	.+12     	; 0x452 <__addsf3+0x1e>
 446:	9f 3f       	cpi	r25, 0xFF	; 255
 448:	11 f4       	brne	.+4      	; 0x44e <__addsf3+0x1a>
 44a:	1e f4       	brtc	.+6      	; 0x452 <__addsf3+0x1e>
 44c:	85 c0       	rjmp	.+266    	; 0x558 <__fp_nan>
 44e:	0e f4       	brtc	.+2      	; 0x452 <__addsf3+0x1e>
 450:	e0 95       	com	r30
 452:	e7 fb       	bst	r30, 7
 454:	7b c0       	rjmp	.+246    	; 0x54c <__fp_inf>

00000456 <__addsf3x>:
 456:	e9 2f       	mov	r30, r25
 458:	a1 d0       	rcall	.+322    	; 0x59c <__fp_split3>
 45a:	80 f3       	brcs	.-32     	; 0x43c <__addsf3+0x8>
 45c:	ba 17       	cp	r27, r26
 45e:	62 07       	cpc	r22, r18
 460:	73 07       	cpc	r23, r19
 462:	84 07       	cpc	r24, r20
 464:	95 07       	cpc	r25, r21
 466:	18 f0       	brcs	.+6      	; 0x46e <__addsf3x+0x18>
 468:	71 f4       	brne	.+28     	; 0x486 <__addsf3x+0x30>
 46a:	9e f5       	brtc	.+102    	; 0x4d2 <__addsf3x+0x7c>
 46c:	b9 c0       	rjmp	.+370    	; 0x5e0 <__fp_zero>
 46e:	0e f4       	brtc	.+2      	; 0x472 <__addsf3x+0x1c>
 470:	e0 95       	com	r30
 472:	0b 2e       	mov	r0, r27
 474:	ba 2f       	mov	r27, r26
 476:	a0 2d       	mov	r26, r0
 478:	0b 01       	movw	r0, r22
 47a:	b9 01       	movw	r22, r18
 47c:	90 01       	movw	r18, r0
 47e:	0c 01       	movw	r0, r24
 480:	ca 01       	movw	r24, r20
 482:	a0 01       	movw	r20, r0
 484:	11 24       	eor	r1, r1
 486:	ff 27       	eor	r31, r31
 488:	59 1b       	sub	r21, r25
 48a:	99 f0       	breq	.+38     	; 0x4b2 <__addsf3x+0x5c>
 48c:	59 3f       	cpi	r21, 0xF9	; 249
 48e:	50 f4       	brcc	.+20     	; 0x4a4 <__addsf3x+0x4e>
 490:	50 3e       	cpi	r21, 0xE0	; 224
 492:	68 f1       	brcs	.+90     	; 0x4ee <__addsf3x+0x98>
 494:	1a 16       	cp	r1, r26
 496:	f0 40       	sbci	r31, 0x00	; 0
 498:	a2 2f       	mov	r26, r18
 49a:	23 2f       	mov	r18, r19
 49c:	34 2f       	mov	r19, r20
 49e:	44 27       	eor	r20, r20
 4a0:	58 5f       	subi	r21, 0xF8	; 248
 4a2:	f3 cf       	rjmp	.-26     	; 0x48a <__addsf3x+0x34>
 4a4:	46 95       	lsr	r20
 4a6:	37 95       	ror	r19
 4a8:	27 95       	ror	r18
 4aa:	a7 95       	ror	r26
 4ac:	f0 40       	sbci	r31, 0x00	; 0
 4ae:	53 95       	inc	r21
 4b0:	c9 f7       	brne	.-14     	; 0x4a4 <__addsf3x+0x4e>
 4b2:	7e f4       	brtc	.+30     	; 0x4d2 <__addsf3x+0x7c>
 4b4:	1f 16       	cp	r1, r31
 4b6:	ba 0b       	sbc	r27, r26
 4b8:	62 0b       	sbc	r22, r18
 4ba:	73 0b       	sbc	r23, r19
 4bc:	84 0b       	sbc	r24, r20
 4be:	ba f0       	brmi	.+46     	; 0x4ee <__addsf3x+0x98>
 4c0:	91 50       	subi	r25, 0x01	; 1
 4c2:	a1 f0       	breq	.+40     	; 0x4ec <__addsf3x+0x96>
 4c4:	ff 0f       	add	r31, r31
 4c6:	bb 1f       	adc	r27, r27
 4c8:	66 1f       	adc	r22, r22
 4ca:	77 1f       	adc	r23, r23
 4cc:	88 1f       	adc	r24, r24
 4ce:	c2 f7       	brpl	.-16     	; 0x4c0 <__addsf3x+0x6a>
 4d0:	0e c0       	rjmp	.+28     	; 0x4ee <__addsf3x+0x98>
 4d2:	ba 0f       	add	r27, r26
 4d4:	62 1f       	adc	r22, r18
 4d6:	73 1f       	adc	r23, r19
 4d8:	84 1f       	adc	r24, r20
 4da:	48 f4       	brcc	.+18     	; 0x4ee <__addsf3x+0x98>
 4dc:	87 95       	ror	r24
 4de:	77 95       	ror	r23
 4e0:	67 95       	ror	r22
 4e2:	b7 95       	ror	r27
 4e4:	f7 95       	ror	r31
 4e6:	9e 3f       	cpi	r25, 0xFE	; 254
 4e8:	08 f0       	brcs	.+2      	; 0x4ec <__addsf3x+0x96>
 4ea:	b3 cf       	rjmp	.-154    	; 0x452 <__addsf3+0x1e>
 4ec:	93 95       	inc	r25
 4ee:	88 0f       	add	r24, r24
 4f0:	08 f0       	brcs	.+2      	; 0x4f4 <__addsf3x+0x9e>
 4f2:	99 27       	eor	r25, r25
 4f4:	ee 0f       	add	r30, r30
 4f6:	97 95       	ror	r25
 4f8:	87 95       	ror	r24
 4fa:	08 95       	ret

000004fc <__cmpsf2>:
 4fc:	03 d0       	rcall	.+6      	; 0x504 <__fp_cmp>
 4fe:	08 f4       	brcc	.+2      	; 0x502 <__cmpsf2+0x6>
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	08 95       	ret

00000504 <__fp_cmp>:
 504:	99 0f       	add	r25, r25
 506:	00 08       	sbc	r0, r0
 508:	55 0f       	add	r21, r21
 50a:	aa 0b       	sbc	r26, r26
 50c:	e0 e8       	ldi	r30, 0x80	; 128
 50e:	fe ef       	ldi	r31, 0xFE	; 254
 510:	16 16       	cp	r1, r22
 512:	17 06       	cpc	r1, r23
 514:	e8 07       	cpc	r30, r24
 516:	f9 07       	cpc	r31, r25
 518:	c0 f0       	brcs	.+48     	; 0x54a <__fp_cmp+0x46>
 51a:	12 16       	cp	r1, r18
 51c:	13 06       	cpc	r1, r19
 51e:	e4 07       	cpc	r30, r20
 520:	f5 07       	cpc	r31, r21
 522:	98 f0       	brcs	.+38     	; 0x54a <__fp_cmp+0x46>
 524:	62 1b       	sub	r22, r18
 526:	73 0b       	sbc	r23, r19
 528:	84 0b       	sbc	r24, r20
 52a:	95 0b       	sbc	r25, r21
 52c:	39 f4       	brne	.+14     	; 0x53c <__fp_cmp+0x38>
 52e:	0a 26       	eor	r0, r26
 530:	61 f0       	breq	.+24     	; 0x54a <__fp_cmp+0x46>
 532:	23 2b       	or	r18, r19
 534:	24 2b       	or	r18, r20
 536:	25 2b       	or	r18, r21
 538:	21 f4       	brne	.+8      	; 0x542 <__fp_cmp+0x3e>
 53a:	08 95       	ret
 53c:	0a 26       	eor	r0, r26
 53e:	09 f4       	brne	.+2      	; 0x542 <__fp_cmp+0x3e>
 540:	a1 40       	sbci	r26, 0x01	; 1
 542:	a6 95       	lsr	r26
 544:	8f ef       	ldi	r24, 0xFF	; 255
 546:	81 1d       	adc	r24, r1
 548:	81 1d       	adc	r24, r1
 54a:	08 95       	ret

0000054c <__fp_inf>:
 54c:	97 f9       	bld	r25, 7
 54e:	9f 67       	ori	r25, 0x7F	; 127
 550:	80 e8       	ldi	r24, 0x80	; 128
 552:	70 e0       	ldi	r23, 0x00	; 0
 554:	60 e0       	ldi	r22, 0x00	; 0
 556:	08 95       	ret

00000558 <__fp_nan>:
 558:	9f ef       	ldi	r25, 0xFF	; 255
 55a:	80 ec       	ldi	r24, 0xC0	; 192
 55c:	08 95       	ret

0000055e <__fp_pscA>:
 55e:	00 24       	eor	r0, r0
 560:	0a 94       	dec	r0
 562:	16 16       	cp	r1, r22
 564:	17 06       	cpc	r1, r23
 566:	18 06       	cpc	r1, r24
 568:	09 06       	cpc	r0, r25
 56a:	08 95       	ret

0000056c <__fp_pscB>:
 56c:	00 24       	eor	r0, r0
 56e:	0a 94       	dec	r0
 570:	12 16       	cp	r1, r18
 572:	13 06       	cpc	r1, r19
 574:	14 06       	cpc	r1, r20
 576:	05 06       	cpc	r0, r21
 578:	08 95       	ret

0000057a <__fp_round>:
 57a:	09 2e       	mov	r0, r25
 57c:	03 94       	inc	r0
 57e:	00 0c       	add	r0, r0
 580:	11 f4       	brne	.+4      	; 0x586 <__fp_round+0xc>
 582:	88 23       	and	r24, r24
 584:	52 f0       	brmi	.+20     	; 0x59a <__fp_round+0x20>
 586:	bb 0f       	add	r27, r27
 588:	40 f4       	brcc	.+16     	; 0x59a <__fp_round+0x20>
 58a:	bf 2b       	or	r27, r31
 58c:	11 f4       	brne	.+4      	; 0x592 <__fp_round+0x18>
 58e:	60 ff       	sbrs	r22, 0
 590:	04 c0       	rjmp	.+8      	; 0x59a <__fp_round+0x20>
 592:	6f 5f       	subi	r22, 0xFF	; 255
 594:	7f 4f       	sbci	r23, 0xFF	; 255
 596:	8f 4f       	sbci	r24, 0xFF	; 255
 598:	9f 4f       	sbci	r25, 0xFF	; 255
 59a:	08 95       	ret

0000059c <__fp_split3>:
 59c:	57 fd       	sbrc	r21, 7
 59e:	90 58       	subi	r25, 0x80	; 128
 5a0:	44 0f       	add	r20, r20
 5a2:	55 1f       	adc	r21, r21
 5a4:	59 f0       	breq	.+22     	; 0x5bc <__fp_splitA+0x10>
 5a6:	5f 3f       	cpi	r21, 0xFF	; 255
 5a8:	71 f0       	breq	.+28     	; 0x5c6 <__fp_splitA+0x1a>
 5aa:	47 95       	ror	r20

000005ac <__fp_splitA>:
 5ac:	88 0f       	add	r24, r24
 5ae:	97 fb       	bst	r25, 7
 5b0:	99 1f       	adc	r25, r25
 5b2:	61 f0       	breq	.+24     	; 0x5cc <__fp_splitA+0x20>
 5b4:	9f 3f       	cpi	r25, 0xFF	; 255
 5b6:	79 f0       	breq	.+30     	; 0x5d6 <__fp_splitA+0x2a>
 5b8:	87 95       	ror	r24
 5ba:	08 95       	ret
 5bc:	12 16       	cp	r1, r18
 5be:	13 06       	cpc	r1, r19
 5c0:	14 06       	cpc	r1, r20
 5c2:	55 1f       	adc	r21, r21
 5c4:	f2 cf       	rjmp	.-28     	; 0x5aa <__fp_split3+0xe>
 5c6:	46 95       	lsr	r20
 5c8:	f1 df       	rcall	.-30     	; 0x5ac <__fp_splitA>
 5ca:	08 c0       	rjmp	.+16     	; 0x5dc <__fp_splitA+0x30>
 5cc:	16 16       	cp	r1, r22
 5ce:	17 06       	cpc	r1, r23
 5d0:	18 06       	cpc	r1, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	f1 cf       	rjmp	.-30     	; 0x5b8 <__fp_splitA+0xc>
 5d6:	86 95       	lsr	r24
 5d8:	71 05       	cpc	r23, r1
 5da:	61 05       	cpc	r22, r1
 5dc:	08 94       	sec
 5de:	08 95       	ret

000005e0 <__fp_zero>:
 5e0:	e8 94       	clt

000005e2 <__fp_szero>:
 5e2:	bb 27       	eor	r27, r27
 5e4:	66 27       	eor	r22, r22
 5e6:	77 27       	eor	r23, r23
 5e8:	cb 01       	movw	r24, r22
 5ea:	97 f9       	bld	r25, 7
 5ec:	08 95       	ret

000005ee <do_rand>:
 5ee:	8f 92       	push	r8
 5f0:	9f 92       	push	r9
 5f2:	af 92       	push	r10
 5f4:	bf 92       	push	r11
 5f6:	cf 92       	push	r12
 5f8:	df 92       	push	r13
 5fa:	ef 92       	push	r14
 5fc:	ff 92       	push	r15
 5fe:	cf 93       	push	r28
 600:	df 93       	push	r29
 602:	ec 01       	movw	r28, r24
 604:	68 81       	ld	r22, Y
 606:	79 81       	ldd	r23, Y+1	; 0x01
 608:	8a 81       	ldd	r24, Y+2	; 0x02
 60a:	9b 81       	ldd	r25, Y+3	; 0x03
 60c:	61 15       	cp	r22, r1
 60e:	71 05       	cpc	r23, r1
 610:	81 05       	cpc	r24, r1
 612:	91 05       	cpc	r25, r1
 614:	21 f4       	brne	.+8      	; 0x61e <do_rand+0x30>
 616:	64 e2       	ldi	r22, 0x24	; 36
 618:	79 ed       	ldi	r23, 0xD9	; 217
 61a:	8b e5       	ldi	r24, 0x5B	; 91
 61c:	97 e0       	ldi	r25, 0x07	; 7
 61e:	2d e1       	ldi	r18, 0x1D	; 29
 620:	33 ef       	ldi	r19, 0xF3	; 243
 622:	41 e0       	ldi	r20, 0x01	; 1
 624:	50 e0       	ldi	r21, 0x00	; 0
 626:	38 d0       	rcall	.+112    	; 0x698 <__divmodsi4>
 628:	49 01       	movw	r8, r18
 62a:	5a 01       	movw	r10, r20
 62c:	9b 01       	movw	r18, r22
 62e:	ac 01       	movw	r20, r24
 630:	a7 ea       	ldi	r26, 0xA7	; 167
 632:	b1 e4       	ldi	r27, 0x41	; 65
 634:	4d d0       	rcall	.+154    	; 0x6d0 <__muluhisi3>
 636:	6b 01       	movw	r12, r22
 638:	7c 01       	movw	r14, r24
 63a:	ac ee       	ldi	r26, 0xEC	; 236
 63c:	b4 ef       	ldi	r27, 0xF4	; 244
 63e:	a5 01       	movw	r20, r10
 640:	94 01       	movw	r18, r8
 642:	52 d0       	rcall	.+164    	; 0x6e8 <__mulohisi3>
 644:	dc 01       	movw	r26, r24
 646:	cb 01       	movw	r24, r22
 648:	8c 0d       	add	r24, r12
 64a:	9d 1d       	adc	r25, r13
 64c:	ae 1d       	adc	r26, r14
 64e:	bf 1d       	adc	r27, r15
 650:	b7 ff       	sbrs	r27, 7
 652:	03 c0       	rjmp	.+6      	; 0x65a <do_rand+0x6c>
 654:	01 97       	sbiw	r24, 0x01	; 1
 656:	a1 09       	sbc	r26, r1
 658:	b0 48       	sbci	r27, 0x80	; 128
 65a:	88 83       	st	Y, r24
 65c:	99 83       	std	Y+1, r25	; 0x01
 65e:	aa 83       	std	Y+2, r26	; 0x02
 660:	bb 83       	std	Y+3, r27	; 0x03
 662:	9f 77       	andi	r25, 0x7F	; 127
 664:	df 91       	pop	r29
 666:	cf 91       	pop	r28
 668:	ff 90       	pop	r15
 66a:	ef 90       	pop	r14
 66c:	df 90       	pop	r13
 66e:	cf 90       	pop	r12
 670:	bf 90       	pop	r11
 672:	af 90       	pop	r10
 674:	9f 90       	pop	r9
 676:	8f 90       	pop	r8
 678:	08 95       	ret

0000067a <rand_r>:
 67a:	b9 cf       	rjmp	.-142    	; 0x5ee <do_rand>

0000067c <rand>:
 67c:	80 e0       	ldi	r24, 0x00	; 0
 67e:	92 e0       	ldi	r25, 0x02	; 2
 680:	b6 cf       	rjmp	.-148    	; 0x5ee <do_rand>

00000682 <srand>:
 682:	a0 e0       	ldi	r26, 0x00	; 0
 684:	b0 e0       	ldi	r27, 0x00	; 0
 686:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
 68a:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
 68e:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__data_start+0x2>
 692:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__data_start+0x3>
 696:	08 95       	ret

00000698 <__divmodsi4>:
 698:	05 2e       	mov	r0, r21
 69a:	97 fb       	bst	r25, 7
 69c:	16 f4       	brtc	.+4      	; 0x6a2 <__divmodsi4+0xa>
 69e:	00 94       	com	r0
 6a0:	0f d0       	rcall	.+30     	; 0x6c0 <__negsi2>
 6a2:	57 fd       	sbrc	r21, 7
 6a4:	05 d0       	rcall	.+10     	; 0x6b0 <__divmodsi4_neg2>
 6a6:	24 d0       	rcall	.+72     	; 0x6f0 <__udivmodsi4>
 6a8:	07 fc       	sbrc	r0, 7
 6aa:	02 d0       	rcall	.+4      	; 0x6b0 <__divmodsi4_neg2>
 6ac:	46 f4       	brtc	.+16     	; 0x6be <__divmodsi4_exit>
 6ae:	08 c0       	rjmp	.+16     	; 0x6c0 <__negsi2>

000006b0 <__divmodsi4_neg2>:
 6b0:	50 95       	com	r21
 6b2:	40 95       	com	r20
 6b4:	30 95       	com	r19
 6b6:	21 95       	neg	r18
 6b8:	3f 4f       	sbci	r19, 0xFF	; 255
 6ba:	4f 4f       	sbci	r20, 0xFF	; 255
 6bc:	5f 4f       	sbci	r21, 0xFF	; 255

000006be <__divmodsi4_exit>:
 6be:	08 95       	ret

000006c0 <__negsi2>:
 6c0:	90 95       	com	r25
 6c2:	80 95       	com	r24
 6c4:	70 95       	com	r23
 6c6:	61 95       	neg	r22
 6c8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ca:	8f 4f       	sbci	r24, 0xFF	; 255
 6cc:	9f 4f       	sbci	r25, 0xFF	; 255
 6ce:	08 95       	ret

000006d0 <__muluhisi3>:
 6d0:	31 d0       	rcall	.+98     	; 0x734 <__umulhisi3>
 6d2:	a5 9f       	mul	r26, r21
 6d4:	90 0d       	add	r25, r0
 6d6:	b4 9f       	mul	r27, r20
 6d8:	90 0d       	add	r25, r0
 6da:	a4 9f       	mul	r26, r20
 6dc:	80 0d       	add	r24, r0
 6de:	91 1d       	adc	r25, r1
 6e0:	11 24       	eor	r1, r1
 6e2:	08 95       	ret

000006e4 <__mulshisi3>:
 6e4:	b7 ff       	sbrs	r27, 7
 6e6:	f4 cf       	rjmp	.-24     	; 0x6d0 <__muluhisi3>

000006e8 <__mulohisi3>:
 6e8:	f3 df       	rcall	.-26     	; 0x6d0 <__muluhisi3>
 6ea:	82 1b       	sub	r24, r18
 6ec:	93 0b       	sbc	r25, r19
 6ee:	08 95       	ret

000006f0 <__udivmodsi4>:
 6f0:	a1 e2       	ldi	r26, 0x21	; 33
 6f2:	1a 2e       	mov	r1, r26
 6f4:	aa 1b       	sub	r26, r26
 6f6:	bb 1b       	sub	r27, r27
 6f8:	fd 01       	movw	r30, r26
 6fa:	0d c0       	rjmp	.+26     	; 0x716 <__udivmodsi4_ep>

000006fc <__udivmodsi4_loop>:
 6fc:	aa 1f       	adc	r26, r26
 6fe:	bb 1f       	adc	r27, r27
 700:	ee 1f       	adc	r30, r30
 702:	ff 1f       	adc	r31, r31
 704:	a2 17       	cp	r26, r18
 706:	b3 07       	cpc	r27, r19
 708:	e4 07       	cpc	r30, r20
 70a:	f5 07       	cpc	r31, r21
 70c:	20 f0       	brcs	.+8      	; 0x716 <__udivmodsi4_ep>
 70e:	a2 1b       	sub	r26, r18
 710:	b3 0b       	sbc	r27, r19
 712:	e4 0b       	sbc	r30, r20
 714:	f5 0b       	sbc	r31, r21

00000716 <__udivmodsi4_ep>:
 716:	66 1f       	adc	r22, r22
 718:	77 1f       	adc	r23, r23
 71a:	88 1f       	adc	r24, r24
 71c:	99 1f       	adc	r25, r25
 71e:	1a 94       	dec	r1
 720:	69 f7       	brne	.-38     	; 0x6fc <__udivmodsi4_loop>
 722:	60 95       	com	r22
 724:	70 95       	com	r23
 726:	80 95       	com	r24
 728:	90 95       	com	r25
 72a:	9b 01       	movw	r18, r22
 72c:	ac 01       	movw	r20, r24
 72e:	bd 01       	movw	r22, r26
 730:	cf 01       	movw	r24, r30
 732:	08 95       	ret

00000734 <__umulhisi3>:
 734:	a2 9f       	mul	r26, r18
 736:	b0 01       	movw	r22, r0
 738:	b3 9f       	mul	r27, r19
 73a:	c0 01       	movw	r24, r0
 73c:	a3 9f       	mul	r26, r19
 73e:	70 0d       	add	r23, r0
 740:	81 1d       	adc	r24, r1
 742:	11 24       	eor	r1, r1
 744:	91 1d       	adc	r25, r1
 746:	b2 9f       	mul	r27, r18
 748:	70 0d       	add	r23, r0
 74a:	81 1d       	adc	r24, r1
 74c:	11 24       	eor	r1, r1
 74e:	91 1d       	adc	r25, r1
 750:	08 95       	ret

00000752 <_exit>:
 752:	f8 94       	cli

00000754 <__stop_program>:
 754:	ff cf       	rjmp	.-2      	; 0x754 <__stop_program>
