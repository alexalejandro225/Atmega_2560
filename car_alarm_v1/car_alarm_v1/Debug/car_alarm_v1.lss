
car_alarm_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  00000676  0000070a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000676  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000018c  0080020c  0080020c  00000716  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000716  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000748  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001658  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e6b  00000000  00000000  00001ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000924  00000000  00000000  00002d13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002fc  00000000  00000000  00003638  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000077d  00000000  00000000  00003934  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000de9  00000000  00000000  000040b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004e9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	e2 c1       	rjmp	.+964    	; 0x42a <__vector_25>
  66:	00 00       	nop
  68:	05 c2       	rjmp	.+1034   	; 0x474 <__vector_26>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	22 c2       	rjmp	.+1092   	; 0x4d6 <__vector_36>
  92:	00 00       	nop
  94:	45 c2       	rjmp	.+1162   	; 0x520 <__vector_37>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	5a c2       	rjmp	.+1204   	; 0x582 <__vector_51>
  ce:	00 00       	nop
  d0:	7d c2       	rjmp	.+1274   	; 0x5cc <__vector_52>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e7       	ldi	r30, 0x76	; 118
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	ac e0       	ldi	r26, 0x0C	; 12
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 39       	cpi	r26, 0x98	; 152
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	a8 c2       	rjmp	.+1360   	; 0x672 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
#include <util/delay.h>
#include "usart.h"


int main(void)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	c0 54       	subi	r28, 0x40	; 64
 12e:	d1 09       	sbc	r29, r1
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	f8 94       	cli
 134:	de bf       	out	0x3e, r29	; 62
 136:	0f be       	out	0x3f, r0	; 63
 138:	cd bf       	out	0x3d, r28	; 61
	UART_ini(0,9600,7,0,0,1);
 13a:	ee 24       	eor	r14, r14
 13c:	e3 94       	inc	r14
 13e:	00 e0       	ldi	r16, 0x00	; 0
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	47 e0       	ldi	r20, 0x07	; 7
 144:	60 e8       	ldi	r22, 0x80	; 128
 146:	75 e2       	ldi	r23, 0x25	; 37
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	38 d0       	rcall	.+112    	; 0x1bc <UART_ini>
	UART_ini(2,9600,7,0,0,1);
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	47 e0       	ldi	r20, 0x07	; 7
 150:	60 e8       	ldi	r22, 0x80	; 128
 152:	75 e2       	ldi	r23, 0x25	; 37
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	32 d0       	rcall	.+100    	; 0x1bc <UART_ini>
	
    /* Replace with your application code */
	
    while (1) 
    {	
		UART_puts(2,"\r\n");
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	72 e0       	ldi	r23, 0x02	; 2
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	ca d0       	rcall	.+404    	; 0x2f4 <UART_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	2f ef       	ldi	r18, 0xFF	; 255
 162:	83 ed       	ldi	r24, 0xD3	; 211
 164:	90 e3       	ldi	r25, 0x30	; 48
 166:	21 50       	subi	r18, 0x01	; 1
 168:	80 40       	sbci	r24, 0x00	; 0
 16a:	90 40       	sbci	r25, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <main+0x42>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0x4c>
 170:	00 00       	nop
		_delay_ms(1000);
		UART_puts(2,"\r\n");
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	72 e0       	ldi	r23, 0x02	; 2
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	bd d0       	rcall	.+378    	; 0x2f4 <UART_puts>
 17a:	2f ef       	ldi	r18, 0xFF	; 255
 17c:	83 ed       	ldi	r24, 0xD3	; 211
 17e:	90 e3       	ldi	r25, 0x30	; 48
 180:	21 50       	subi	r18, 0x01	; 1
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	90 40       	sbci	r25, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <main+0x5c>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0x66>
		_delay_ms(1000);
		UART_puts(2,"AT+CSQ\r");
 18a:	00 00       	nop
 18c:	63 e0       	ldi	r22, 0x03	; 3
 18e:	72 e0       	ldi	r23, 0x02	; 2
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	b0 d0       	rcall	.+352    	; 0x2f4 <UART_puts>
 194:	2f ef       	ldi	r18, 0xFF	; 255
 196:	83 ed       	ldi	r24, 0xD3	; 211
 198:	90 e3       	ldi	r25, 0x30	; 48
 19a:	21 50       	subi	r18, 0x01	; 1
 19c:	80 40       	sbci	r24, 0x00	; 0
 19e:	90 40       	sbci	r25, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <main+0x76>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <main+0x80>
		_delay_ms(1000);
		UART_gets(2,entrada_uart);
 1a4:	00 00       	nop
 1a6:	be 01       	movw	r22, r28
 1a8:	6f 5f       	subi	r22, 0xFF	; 255
 1aa:	7f 4f       	sbci	r23, 0xFF	; 255
 1ac:	82 e0       	ldi	r24, 0x02	; 2
		UART_puts(0,entrada_uart);	
 1ae:	f8 d0       	rcall	.+496    	; 0x3a0 <UART_gets>
 1b0:	be 01       	movw	r22, r28
 1b2:	6f 5f       	subi	r22, 0xFF	; 255
 1b4:	7f 4f       	sbci	r23, 0xFF	; 255
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	9d d0       	rcall	.+314    	; 0x2f4 <UART_puts>
 1ba:	ce cf       	rjmp	.-100    	; 0x158 <main+0x34>

000001bc <UART_ini>:
	strcat(screen_x_y,aux_row);
	strcat(screen_x_y,";");
	strcat(screen_x_y,aux_col);
	strcat(screen_x_y,"H");
	UART_puts(com,screen_x_y);
}
 1bc:	ef 92       	push	r14
 1be:	0f 93       	push	r16
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	c8 2f       	mov	r28, r24
 1c6:	d0 e0       	ldi	r29, 0x00	; 0
 1c8:	68 96       	adiw	r28, 0x18	; 24
 1ca:	cc 0f       	add	r28, r28
 1cc:	dd 1f       	adc	r29, r29
 1ce:	cc 0f       	add	r28, r28
 1d0:	dd 1f       	adc	r29, r29
 1d2:	cc 0f       	add	r28, r28
 1d4:	dd 1f       	adc	r29, r29
 1d6:	01 11       	cpse	r16, r1
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <UART_ini+0x24>
 1da:	88 81       	ld	r24, Y
 1dc:	88 83       	st	Y, r24
 1de:	03 c0       	rjmp	.+6      	; 0x1e6 <UART_ini+0x2a>
 1e0:	88 81       	ld	r24, Y
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	88 83       	st	Y, r24
 1e6:	89 81       	ldd	r24, Y+1	; 0x01
 1e8:	88 69       	ori	r24, 0x98	; 152
 1ea:	89 83       	std	Y+1, r24	; 0x01
 1ec:	45 30       	cpi	r20, 0x05	; 5
 1ee:	19 f4       	brne	.+6      	; 0x1f6 <UART_ini+0x3a>
 1f0:	8a 81       	ldd	r24, Y+2	; 0x02
 1f2:	8a 83       	std	Y+2, r24	; 0x02
 1f4:	0b c0       	rjmp	.+22     	; 0x20c <UART_ini+0x50>
 1f6:	46 30       	cpi	r20, 0x06	; 6
 1f8:	21 f4       	brne	.+8      	; 0x202 <UART_ini+0x46>
 1fa:	8a 81       	ldd	r24, Y+2	; 0x02
 1fc:	82 60       	ori	r24, 0x02	; 2
 1fe:	8a 83       	std	Y+2, r24	; 0x02
 200:	05 c0       	rjmp	.+10     	; 0x20c <UART_ini+0x50>
 202:	47 30       	cpi	r20, 0x07	; 7
 204:	19 f4       	brne	.+6      	; 0x20c <UART_ini+0x50>
 206:	8a 81       	ldd	r24, Y+2	; 0x02
 208:	84 60       	ori	r24, 0x04	; 4
 20a:	8a 83       	std	Y+2, r24	; 0x02
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	e8 12       	cpse	r14, r24
 210:	03 c0       	rjmp	.+6      	; 0x218 <UART_ini+0x5c>
 212:	8a 81       	ldd	r24, Y+2	; 0x02
 214:	8a 83       	std	Y+2, r24	; 0x02
 216:	06 c0       	rjmp	.+12     	; 0x224 <UART_ini+0x68>
 218:	82 e0       	ldi	r24, 0x02	; 2
 21a:	e8 12       	cpse	r14, r24
 21c:	03 c0       	rjmp	.+6      	; 0x224 <UART_ini+0x68>
 21e:	8a 81       	ldd	r24, Y+2	; 0x02
 220:	88 60       	ori	r24, 0x08	; 8
 222:	8a 83       	std	Y+2, r24	; 0x02
 224:	21 11       	cpse	r18, r1
 226:	03 c0       	rjmp	.+6      	; 0x22e <UART_ini+0x72>
 228:	8a 81       	ldd	r24, Y+2	; 0x02
 22a:	8a 83       	std	Y+2, r24	; 0x02
 22c:	0b c0       	rjmp	.+22     	; 0x244 <UART_ini+0x88>
 22e:	21 30       	cpi	r18, 0x01	; 1
 230:	21 f4       	brne	.+8      	; 0x23a <UART_ini+0x7e>
 232:	8a 81       	ldd	r24, Y+2	; 0x02
 234:	80 63       	ori	r24, 0x30	; 48
 236:	8a 83       	std	Y+2, r24	; 0x02
 238:	05 c0       	rjmp	.+10     	; 0x244 <UART_ini+0x88>
 23a:	22 30       	cpi	r18, 0x02	; 2
 23c:	19 f4       	brne	.+6      	; 0x244 <UART_ini+0x88>
 23e:	8a 81       	ldd	r24, Y+2	; 0x02
 240:	80 62       	ori	r24, 0x20	; 32
 242:	8a 83       	std	Y+2, r24	; 0x02
 244:	8a 81       	ldd	r24, Y+2	; 0x02
 246:	8a 83       	std	Y+2, r24	; 0x02
 248:	01 11       	cpse	r16, r1
 24a:	0b c0       	rjmp	.+22     	; 0x262 <UART_ini+0xa6>
 24c:	9b 01       	movw	r18, r22
 24e:	40 e0       	ldi	r20, 0x00	; 0
 250:	50 e0       	ldi	r21, 0x00	; 0
 252:	60 e4       	ldi	r22, 0x40	; 64
 254:	72 e4       	ldi	r23, 0x42	; 66
 256:	8f e0       	ldi	r24, 0x0F	; 15
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	e9 d1       	rcall	.+978    	; 0x62e <__udivmodsi4>
 25c:	21 50       	subi	r18, 0x01	; 1
 25e:	2c 83       	std	Y+4, r18	; 0x04
 260:	0a c0       	rjmp	.+20     	; 0x276 <UART_ini+0xba>
 262:	9b 01       	movw	r18, r22
 264:	40 e0       	ldi	r20, 0x00	; 0
 266:	50 e0       	ldi	r21, 0x00	; 0
 268:	60 e8       	ldi	r22, 0x80	; 128
 26a:	74 e8       	ldi	r23, 0x84	; 132
 26c:	8e e1       	ldi	r24, 0x1E	; 30
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	de d1       	rcall	.+956    	; 0x62e <__udivmodsi4>
 272:	21 50       	subi	r18, 0x01	; 1
 274:	2c 83       	std	Y+4, r18	; 0x04
 276:	78 94       	sei
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	0f 91       	pop	r16
 27e:	ef 90       	pop	r14
 280:	08 95       	ret

00000282 <UART_putchar>:
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	a9 f0       	breq	.+42     	; 0x2b0 <UART_putchar+0x2e>
 286:	18 f0       	brcs	.+6      	; 0x28e <UART_putchar+0xc>
 288:	82 30       	cpi	r24, 0x02	; 2
 28a:	19 f1       	breq	.+70     	; 0x2d2 <UART_putchar+0x50>
 28c:	08 95       	ret
 28e:	a0 ed       	ldi	r26, 0xD0	; 208
 290:	b2 e0       	ldi	r27, 0x02	; 2
 292:	ec 91       	ld	r30, X
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	e0 57       	subi	r30, 0x70	; 112
 298:	fd 4f       	sbci	r31, 0xFD	; 253
 29a:	60 83       	st	Z, r22
 29c:	8c 91       	ld	r24, X
 29e:	8e 5f       	subi	r24, 0xFE	; 254
 2a0:	8f 73       	andi	r24, 0x3F	; 63
 2a2:	8c 93       	st	X, r24
 2a4:	e1 ec       	ldi	r30, 0xC1	; 193
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	80 62       	ori	r24, 0x20	; 32
 2ac:	80 83       	st	Z, r24
 2ae:	08 95       	ret
 2b0:	a2 e1       	ldi	r26, 0x12	; 18
 2b2:	b3 e0       	ldi	r27, 0x03	; 3
 2b4:	ec 91       	ld	r30, X
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	ee 52       	subi	r30, 0x2E	; 46
 2ba:	fd 4f       	sbci	r31, 0xFD	; 253
 2bc:	60 83       	st	Z, r22
 2be:	8c 91       	ld	r24, X
 2c0:	8e 5f       	subi	r24, 0xFE	; 254
 2c2:	8f 73       	andi	r24, 0x3F	; 63
 2c4:	8c 93       	st	X, r24
 2c6:	e9 ec       	ldi	r30, 0xC9	; 201
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	80 62       	ori	r24, 0x20	; 32
 2ce:	80 83       	st	Z, r24
 2d0:	08 95       	ret
 2d2:	ac e4       	ldi	r26, 0x4C	; 76
 2d4:	b2 e0       	ldi	r27, 0x02	; 2
 2d6:	ec 91       	ld	r30, X
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	e4 5f       	subi	r30, 0xF4	; 244
 2dc:	fd 4f       	sbci	r31, 0xFD	; 253
 2de:	60 83       	st	Z, r22
 2e0:	8c 91       	ld	r24, X
 2e2:	8e 5f       	subi	r24, 0xFE	; 254
 2e4:	8f 73       	andi	r24, 0x3F	; 63
 2e6:	8c 93       	st	X, r24
 2e8:	e1 ed       	ldi	r30, 0xD1	; 209
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	80 62       	ori	r24, 0x20	; 32
 2f0:	80 83       	st	Z, r24
 2f2:	08 95       	ret

000002f4 <UART_puts>:
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	eb 01       	movw	r28, r22
 2fc:	68 81       	ld	r22, Y
 2fe:	66 23       	and	r22, r22
 300:	39 f0       	breq	.+14     	; 0x310 <UART_puts+0x1c>
 302:	18 2f       	mov	r17, r24
 304:	21 96       	adiw	r28, 0x01	; 1
 306:	81 2f       	mov	r24, r17
 308:	bc df       	rcall	.-136    	; 0x282 <UART_putchar>
 30a:	69 91       	ld	r22, Y+
 30c:	61 11       	cpse	r22, r1
 30e:	fb cf       	rjmp	.-10     	; 0x306 <UART_puts+0x12>
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	1f 91       	pop	r17
 316:	08 95       	ret

00000318 <UART_getchar>:
 318:	81 30       	cpi	r24, 0x01	; 1
 31a:	c1 f0       	breq	.+48     	; 0x34c <UART_getchar+0x34>
 31c:	18 f0       	brcs	.+6      	; 0x324 <UART_getchar+0xc>
 31e:	82 30       	cpi	r24, 0x02	; 2
 320:	49 f1       	breq	.+82     	; 0x374 <UART_getchar+0x5c>
 322:	3c c0       	rjmp	.+120    	; 0x39c <UART_getchar+0x84>
 324:	a4 e5       	ldi	r26, 0x54	; 84
 326:	b3 e0       	ldi	r27, 0x03	; 3
 328:	e5 e5       	ldi	r30, 0x55	; 85
 32a:	f3 e0       	ldi	r31, 0x03	; 3
 32c:	9c 91       	ld	r25, X
 32e:	80 81       	ld	r24, Z
 330:	98 17       	cp	r25, r24
 332:	e1 f3       	breq	.-8      	; 0x32c <UART_getchar+0x14>
 334:	a5 e5       	ldi	r26, 0x55	; 85
 336:	b3 e0       	ldi	r27, 0x03	; 3
 338:	ec 91       	ld	r30, X
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	ec 5e       	subi	r30, 0xEC	; 236
 33e:	fc 4f       	sbci	r31, 0xFC	; 252
 340:	80 81       	ld	r24, Z
 342:	9c 91       	ld	r25, X
 344:	9e 5f       	subi	r25, 0xFE	; 254
 346:	9f 73       	andi	r25, 0x3F	; 63
 348:	9c 93       	st	X, r25
 34a:	08 95       	ret
 34c:	ae e8       	ldi	r26, 0x8E	; 142
 34e:	b2 e0       	ldi	r27, 0x02	; 2
 350:	ef e8       	ldi	r30, 0x8F	; 143
 352:	f2 e0       	ldi	r31, 0x02	; 2
 354:	9c 91       	ld	r25, X
 356:	80 81       	ld	r24, Z
 358:	98 17       	cp	r25, r24
 35a:	e1 f3       	breq	.-8      	; 0x354 <UART_getchar+0x3c>
 35c:	af e8       	ldi	r26, 0x8F	; 143
 35e:	b2 e0       	ldi	r27, 0x02	; 2
 360:	ec 91       	ld	r30, X
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	e2 5b       	subi	r30, 0xB2	; 178
 366:	fd 4f       	sbci	r31, 0xFD	; 253
 368:	80 81       	ld	r24, Z
 36a:	9c 91       	ld	r25, X
 36c:	9e 5f       	subi	r25, 0xFE	; 254
 36e:	9f 73       	andi	r25, 0x3F	; 63
 370:	9c 93       	st	X, r25
 372:	08 95       	ret
 374:	a6 e9       	ldi	r26, 0x96	; 150
 376:	b3 e0       	ldi	r27, 0x03	; 3
 378:	e7 e9       	ldi	r30, 0x97	; 151
 37a:	f3 e0       	ldi	r31, 0x03	; 3
 37c:	9c 91       	ld	r25, X
 37e:	80 81       	ld	r24, Z
 380:	98 17       	cp	r25, r24
 382:	e1 f3       	breq	.-8      	; 0x37c <UART_getchar+0x64>
 384:	a7 e9       	ldi	r26, 0x97	; 151
 386:	b3 e0       	ldi	r27, 0x03	; 3
 388:	ec 91       	ld	r30, X
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	ea 5a       	subi	r30, 0xAA	; 170
 38e:	fc 4f       	sbci	r31, 0xFC	; 252
 390:	80 81       	ld	r24, Z
 392:	9c 91       	ld	r25, X
 394:	9e 5f       	subi	r25, 0xFE	; 254
 396:	9f 73       	andi	r25, 0x3F	; 63
 398:	9c 93       	st	X, r25
 39a:	08 95       	ret
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	08 95       	ret

000003a0 <UART_gets>:
 3a0:	ff 92       	push	r15
 3a2:	0f 93       	push	r16
 3a4:	1f 93       	push	r17
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
 3aa:	f8 2e       	mov	r15, r24
 3ac:	eb 01       	movw	r28, r22
 3ae:	81 11       	cpse	r24, r1
 3b0:	1e c0       	rjmp	.+60     	; 0x3ee <UART_gets+0x4e>
 3b2:	00 e0       	ldi	r16, 0x00	; 0
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	b0 df       	rcall	.-160    	; 0x318 <UART_getchar>
 3b8:	18 2f       	mov	r17, r24
 3ba:	88 30       	cpi	r24, 0x08	; 8
 3bc:	69 f5       	brne	.+90     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 3be:	00 23       	and	r16, r16
 3c0:	c9 f3       	breq	.-14     	; 0x3b4 <UART_gets+0x14>
 3c2:	01 50       	subi	r16, 0x01	; 1
 3c4:	21 97       	sbiw	r28, 0x01	; 1
 3c6:	68 e0       	ldi	r22, 0x08	; 8
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	5b df       	rcall	.-330    	; 0x282 <UART_putchar>
 3cc:	60 e2       	ldi	r22, 0x20	; 32
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	58 df       	rcall	.-336    	; 0x282 <UART_putchar>
 3d2:	68 e0       	ldi	r22, 0x08	; 8
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	55 df       	rcall	.-342    	; 0x282 <UART_putchar>
 3d8:	ed cf       	rjmp	.-38     	; 0x3b4 <UART_gets+0x14>
 3da:	61 2f       	mov	r22, r17
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	51 df       	rcall	.-350    	; 0x282 <UART_putchar>
 3e0:	18 83       	st	Y, r17
 3e2:	0f 5f       	subi	r16, 0xFF	; 255
 3e4:	21 96       	adiw	r28, 0x01	; 1
 3e6:	1d 30       	cpi	r17, 0x0D	; 13
 3e8:	29 f7       	brne	.-54     	; 0x3b4 <UART_gets+0x14>
 3ea:	18 82       	st	Y, r1
 3ec:	18 c0       	rjmp	.+48     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3ee:	00 e0       	ldi	r16, 0x00	; 0
 3f0:	10 e0       	ldi	r17, 0x00	; 0
 3f2:	8f 2d       	mov	r24, r15
 3f4:	91 df       	rcall	.-222    	; 0x318 <UART_getchar>
 3f6:	8d 30       	cpi	r24, 0x0D	; 13
 3f8:	11 f4       	brne	.+4      	; 0x3fe <UART_gets+0x5e>
 3fa:	0f 5f       	subi	r16, 0xFF	; 255
 3fc:	03 c0       	rjmp	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3fe:	8a 30       	cpi	r24, 0x0A	; 10
 400:	09 f4       	brne	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 402:	1f 5f       	subi	r17, 0xFF	; 255
 404:	21 96       	adiw	r28, 0x01	; 1
 406:	fe 01       	movw	r30, r28
 408:	31 97       	sbiw	r30, 0x01	; 1
 40a:	80 83       	st	Z, r24
 40c:	12 30       	cpi	r17, 0x02	; 2
 40e:	10 f4       	brcc	.+4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 410:	02 30       	cpi	r16, 0x02	; 2
 412:	78 f3       	brcs	.-34     	; 0x3f2 <UART_gets+0x52>
 414:	18 82       	st	Y, r1
 416:	03 c0       	rjmp	.+6      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 418:	00 34       	cpi	r16, 0x40	; 64
 41a:	28 f7       	brcc	.-54     	; 0x3e6 <UART_gets+0x46>
 41c:	de cf       	rjmp	.-68     	; 0x3da <UART_gets+0x3a>
 41e:	df 91       	pop	r29
 420:	cf 91       	pop	r28
 422:	1f 91       	pop	r17
 424:	0f 91       	pop	r16
 426:	ff 90       	pop	r15
 428:	08 95       	ret

0000042a <__vector_25>:



ISR(USART0_RX_vect)
{
 42a:	1f 92       	push	r1
 42c:	0f 92       	push	r0
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	0f 92       	push	r0
 432:	11 24       	eor	r1, r1
 434:	0b b6       	in	r0, 0x3b	; 59
 436:	0f 92       	push	r0
 438:	8f 93       	push	r24
 43a:	af 93       	push	r26
 43c:	bf 93       	push	r27
 43e:	ef 93       	push	r30
 440:	ff 93       	push	r31
	RX_0.UDR_MEM[RX_0.UDR_HEAD] = UDR0;
 442:	a4 e5       	ldi	r26, 0x54	; 84
 444:	b3 e0       	ldi	r27, 0x03	; 3
 446:	ec 91       	ld	r30, X
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 44e:	ec 5e       	subi	r30, 0xEC	; 236
 450:	fc 4f       	sbci	r31, 0xFC	; 252
 452:	80 83       	st	Z, r24
	RX_0.UDR_HEAD = MOD(RX_0.UDR_HEAD+1);
 454:	8c 91       	ld	r24, X
 456:	8e 5f       	subi	r24, 0xFE	; 254
 458:	8f 73       	andi	r24, 0x3F	; 63
 45a:	8c 93       	st	X, r24
}
 45c:	ff 91       	pop	r31
 45e:	ef 91       	pop	r30
 460:	bf 91       	pop	r27
 462:	af 91       	pop	r26
 464:	8f 91       	pop	r24
 466:	0f 90       	pop	r0
 468:	0b be       	out	0x3b, r0	; 59
 46a:	0f 90       	pop	r0
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	0f 90       	pop	r0
 470:	1f 90       	pop	r1
 472:	18 95       	reti

00000474 <__vector_26>:

ISR(USART0_UDRE_vect)
{
 474:	1f 92       	push	r1
 476:	0f 92       	push	r0
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	0f 92       	push	r0
 47c:	11 24       	eor	r1, r1
 47e:	0b b6       	in	r0, 0x3b	; 59
 480:	0f 92       	push	r0
 482:	8f 93       	push	r24
 484:	9f 93       	push	r25
 486:	af 93       	push	r26
 488:	bf 93       	push	r27
 48a:	ef 93       	push	r30
 48c:	ff 93       	push	r31
	UDR0 = TX_0.UDR_MEM[TX_0.UDR_TAIL];
 48e:	a1 ed       	ldi	r26, 0xD1	; 209
 490:	b2 e0       	ldi	r27, 0x02	; 2
 492:	ec 91       	ld	r30, X
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	e0 57       	subi	r30, 0x70	; 112
 498:	fd 4f       	sbci	r31, 0xFD	; 253
 49a:	80 81       	ld	r24, Z
 49c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	TX_0.UDR_TAIL = MOD(TX_0.UDR_TAIL+1);
 4a0:	8c 91       	ld	r24, X
 4a2:	8e 5f       	subi	r24, 0xFE	; 254
 4a4:	8f 73       	andi	r24, 0x3F	; 63
 4a6:	8c 93       	st	X, r24
	if(TX_0.UDR_TAIL == TX_0.UDR_HEAD)
 4a8:	9c 91       	ld	r25, X
 4aa:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <TX_0+0x40>
 4ae:	98 13       	cpse	r25, r24
 4b0:	05 c0       	rjmp	.+10     	; 0x4bc <__vector_26+0x48>
	{
		UCSR0B &= ~(1<<UDRIE0);
 4b2:	e1 ec       	ldi	r30, 0xC1	; 193
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	80 81       	ld	r24, Z
 4b8:	8f 7d       	andi	r24, 0xDF	; 223
 4ba:	80 83       	st	Z, r24
	}
}
 4bc:	ff 91       	pop	r31
 4be:	ef 91       	pop	r30
 4c0:	bf 91       	pop	r27
 4c2:	af 91       	pop	r26
 4c4:	9f 91       	pop	r25
 4c6:	8f 91       	pop	r24
 4c8:	0f 90       	pop	r0
 4ca:	0b be       	out	0x3b, r0	; 59
 4cc:	0f 90       	pop	r0
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	0f 90       	pop	r0
 4d2:	1f 90       	pop	r1
 4d4:	18 95       	reti

000004d6 <__vector_36>:

ISR(USART1_RX_vect)
{
 4d6:	1f 92       	push	r1
 4d8:	0f 92       	push	r0
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	0f 92       	push	r0
 4de:	11 24       	eor	r1, r1
 4e0:	0b b6       	in	r0, 0x3b	; 59
 4e2:	0f 92       	push	r0
 4e4:	8f 93       	push	r24
 4e6:	af 93       	push	r26
 4e8:	bf 93       	push	r27
 4ea:	ef 93       	push	r30
 4ec:	ff 93       	push	r31
	RX_1.UDR_MEM[RX_1.UDR_HEAD] = UDR1;
 4ee:	ae e8       	ldi	r26, 0x8E	; 142
 4f0:	b2 e0       	ldi	r27, 0x02	; 2
 4f2:	ec 91       	ld	r30, X
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 4fa:	e2 5b       	subi	r30, 0xB2	; 178
 4fc:	fd 4f       	sbci	r31, 0xFD	; 253
 4fe:	80 83       	st	Z, r24
	RX_1.UDR_HEAD = MOD(RX_1.UDR_HEAD+1);
 500:	8c 91       	ld	r24, X
 502:	8e 5f       	subi	r24, 0xFE	; 254
 504:	8f 73       	andi	r24, 0x3F	; 63
 506:	8c 93       	st	X, r24
}
 508:	ff 91       	pop	r31
 50a:	ef 91       	pop	r30
 50c:	bf 91       	pop	r27
 50e:	af 91       	pop	r26
 510:	8f 91       	pop	r24
 512:	0f 90       	pop	r0
 514:	0b be       	out	0x3b, r0	; 59
 516:	0f 90       	pop	r0
 518:	0f be       	out	0x3f, r0	; 63
 51a:	0f 90       	pop	r0
 51c:	1f 90       	pop	r1
 51e:	18 95       	reti

00000520 <__vector_37>:

ISR(USART1_UDRE_vect)
{
 520:	1f 92       	push	r1
 522:	0f 92       	push	r0
 524:	0f b6       	in	r0, 0x3f	; 63
 526:	0f 92       	push	r0
 528:	11 24       	eor	r1, r1
 52a:	0b b6       	in	r0, 0x3b	; 59
 52c:	0f 92       	push	r0
 52e:	8f 93       	push	r24
 530:	9f 93       	push	r25
 532:	af 93       	push	r26
 534:	bf 93       	push	r27
 536:	ef 93       	push	r30
 538:	ff 93       	push	r31
	UDR1 = TX_1.UDR_MEM[TX_1.UDR_TAIL];
 53a:	a3 e1       	ldi	r26, 0x13	; 19
 53c:	b3 e0       	ldi	r27, 0x03	; 3
 53e:	ec 91       	ld	r30, X
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	ee 52       	subi	r30, 0x2E	; 46
 544:	fd 4f       	sbci	r31, 0xFD	; 253
 546:	80 81       	ld	r24, Z
 548:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
	TX_1.UDR_TAIL = MOD(TX_1.UDR_TAIL+1);
 54c:	8c 91       	ld	r24, X
 54e:	8e 5f       	subi	r24, 0xFE	; 254
 550:	8f 73       	andi	r24, 0x3F	; 63
 552:	8c 93       	st	X, r24
	if(TX_1.UDR_TAIL == TX_1.UDR_HEAD)
 554:	9c 91       	ld	r25, X
 556:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <TX_1+0x40>
 55a:	98 13       	cpse	r25, r24
 55c:	05 c0       	rjmp	.+10     	; 0x568 <__vector_37+0x48>
	{
		UCSR1B &= ~(1<<UDRIE1);
 55e:	e9 ec       	ldi	r30, 0xC9	; 201
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	80 81       	ld	r24, Z
 564:	8f 7d       	andi	r24, 0xDF	; 223
 566:	80 83       	st	Z, r24
	}
}
 568:	ff 91       	pop	r31
 56a:	ef 91       	pop	r30
 56c:	bf 91       	pop	r27
 56e:	af 91       	pop	r26
 570:	9f 91       	pop	r25
 572:	8f 91       	pop	r24
 574:	0f 90       	pop	r0
 576:	0b be       	out	0x3b, r0	; 59
 578:	0f 90       	pop	r0
 57a:	0f be       	out	0x3f, r0	; 63
 57c:	0f 90       	pop	r0
 57e:	1f 90       	pop	r1
 580:	18 95       	reti

00000582 <__vector_51>:

ISR(USART2_RX_vect)
{
 582:	1f 92       	push	r1
 584:	0f 92       	push	r0
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	0f 92       	push	r0
 58a:	11 24       	eor	r1, r1
 58c:	0b b6       	in	r0, 0x3b	; 59
 58e:	0f 92       	push	r0
 590:	8f 93       	push	r24
 592:	af 93       	push	r26
 594:	bf 93       	push	r27
 596:	ef 93       	push	r30
 598:	ff 93       	push	r31
	RX_2.UDR_MEM[RX_2.UDR_HEAD] = UDR2;
 59a:	a6 e9       	ldi	r26, 0x96	; 150
 59c:	b3 e0       	ldi	r27, 0x03	; 3
 59e:	ec 91       	ld	r30, X
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 5a6:	ea 5a       	subi	r30, 0xAA	; 170
 5a8:	fc 4f       	sbci	r31, 0xFC	; 252
 5aa:	80 83       	st	Z, r24
	RX_2.UDR_HEAD = MOD(RX_2.UDR_HEAD+1);
 5ac:	8c 91       	ld	r24, X
 5ae:	8e 5f       	subi	r24, 0xFE	; 254
 5b0:	8f 73       	andi	r24, 0x3F	; 63
 5b2:	8c 93       	st	X, r24
}
 5b4:	ff 91       	pop	r31
 5b6:	ef 91       	pop	r30
 5b8:	bf 91       	pop	r27
 5ba:	af 91       	pop	r26
 5bc:	8f 91       	pop	r24
 5be:	0f 90       	pop	r0
 5c0:	0b be       	out	0x3b, r0	; 59
 5c2:	0f 90       	pop	r0
 5c4:	0f be       	out	0x3f, r0	; 63
 5c6:	0f 90       	pop	r0
 5c8:	1f 90       	pop	r1
 5ca:	18 95       	reti

000005cc <__vector_52>:

ISR(USART2_UDRE_vect)
{
 5cc:	1f 92       	push	r1
 5ce:	0f 92       	push	r0
 5d0:	0f b6       	in	r0, 0x3f	; 63
 5d2:	0f 92       	push	r0
 5d4:	11 24       	eor	r1, r1
 5d6:	0b b6       	in	r0, 0x3b	; 59
 5d8:	0f 92       	push	r0
 5da:	8f 93       	push	r24
 5dc:	9f 93       	push	r25
 5de:	af 93       	push	r26
 5e0:	bf 93       	push	r27
 5e2:	ef 93       	push	r30
 5e4:	ff 93       	push	r31
	UDR2 = TX_2.UDR_MEM[TX_2.UDR_TAIL];
 5e6:	ad e4       	ldi	r26, 0x4D	; 77
 5e8:	b2 e0       	ldi	r27, 0x02	; 2
 5ea:	ec 91       	ld	r30, X
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	e4 5f       	subi	r30, 0xF4	; 244
 5f0:	fd 4f       	sbci	r31, 0xFD	; 253
 5f2:	80 81       	ld	r24, Z
 5f4:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
	TX_2.UDR_TAIL = MOD(TX_2.UDR_TAIL+1);
 5f8:	8c 91       	ld	r24, X
 5fa:	8e 5f       	subi	r24, 0xFE	; 254
 5fc:	8f 73       	andi	r24, 0x3F	; 63
 5fe:	8c 93       	st	X, r24
	if(TX_2.UDR_TAIL == TX_2.UDR_HEAD)
 600:	9c 91       	ld	r25, X
 602:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <__data_end+0x40>
 606:	98 13       	cpse	r25, r24
 608:	05 c0       	rjmp	.+10     	; 0x614 <__vector_52+0x48>
	{
		UCSR2B &= ~(1<<UDRIE2);
 60a:	e1 ed       	ldi	r30, 0xD1	; 209
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	80 81       	ld	r24, Z
 610:	8f 7d       	andi	r24, 0xDF	; 223
 612:	80 83       	st	Z, r24
	}
}
 614:	ff 91       	pop	r31
 616:	ef 91       	pop	r30
 618:	bf 91       	pop	r27
 61a:	af 91       	pop	r26
 61c:	9f 91       	pop	r25
 61e:	8f 91       	pop	r24
 620:	0f 90       	pop	r0
 622:	0b be       	out	0x3b, r0	; 59
 624:	0f 90       	pop	r0
 626:	0f be       	out	0x3f, r0	; 63
 628:	0f 90       	pop	r0
 62a:	1f 90       	pop	r1
 62c:	18 95       	reti

0000062e <__udivmodsi4>:
 62e:	a1 e2       	ldi	r26, 0x21	; 33
 630:	1a 2e       	mov	r1, r26
 632:	aa 1b       	sub	r26, r26
 634:	bb 1b       	sub	r27, r27
 636:	fd 01       	movw	r30, r26
 638:	0d c0       	rjmp	.+26     	; 0x654 <__udivmodsi4_ep>

0000063a <__udivmodsi4_loop>:
 63a:	aa 1f       	adc	r26, r26
 63c:	bb 1f       	adc	r27, r27
 63e:	ee 1f       	adc	r30, r30
 640:	ff 1f       	adc	r31, r31
 642:	a2 17       	cp	r26, r18
 644:	b3 07       	cpc	r27, r19
 646:	e4 07       	cpc	r30, r20
 648:	f5 07       	cpc	r31, r21
 64a:	20 f0       	brcs	.+8      	; 0x654 <__udivmodsi4_ep>
 64c:	a2 1b       	sub	r26, r18
 64e:	b3 0b       	sbc	r27, r19
 650:	e4 0b       	sbc	r30, r20
 652:	f5 0b       	sbc	r31, r21

00000654 <__udivmodsi4_ep>:
 654:	66 1f       	adc	r22, r22
 656:	77 1f       	adc	r23, r23
 658:	88 1f       	adc	r24, r24
 65a:	99 1f       	adc	r25, r25
 65c:	1a 94       	dec	r1
 65e:	69 f7       	brne	.-38     	; 0x63a <__udivmodsi4_loop>
 660:	60 95       	com	r22
 662:	70 95       	com	r23
 664:	80 95       	com	r24
 666:	90 95       	com	r25
 668:	9b 01       	movw	r18, r22
 66a:	ac 01       	movw	r20, r24
 66c:	bd 01       	movw	r22, r26
 66e:	cf 01       	movw	r24, r30
 670:	08 95       	ret

00000672 <_exit>:
 672:	f8 94       	cli

00000674 <__stop_program>:
 674:	ff cf       	rjmp	.-2      	; 0x674 <__stop_program>
