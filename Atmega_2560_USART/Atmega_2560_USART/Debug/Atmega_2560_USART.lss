
Atmega_2560_USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800200  00000920  000009b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000920  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000084  00800216  00800216  000009ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001046  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cba  00000000  00000000  00001b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000677  00000000  00000000  000027c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  00002e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c3  00000000  00000000  00003078  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ae  00000000  00000000  0000373b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003be9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	68 c3       	rjmp	.+1744   	; 0x736 <__vector_25>
  66:	00 00       	nop
  68:	9d c3       	rjmp	.+1850   	; 0x7a4 <__vector_26>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e2       	ldi	r30, 0x20	; 32
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 31       	cpi	r26, 0x16	; 22
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e1       	ldi	r26, 0x16	; 22
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 39       	cpi	r26, 0x9A	; 154
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	88 d3       	rcall	.+1808   	; 0x830 <main>
 120:	fd c3       	rjmp	.+2042   	; 0x91c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <UART_ini>:
	TCNT0=0;
	
	while(!(PINE&(1<<PE0)));
	TCCR0B = 0x00;
	UBRR0 = TCNT0-1;
}
 124:	ef 92       	push	r14
 126:	0f 93       	push	r16
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
 130:	29 97       	sbiw	r28, 0x09	; 9
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	f8 94       	cli
 136:	de bf       	out	0x3e, r29	; 62
 138:	0f be       	out	0x3f, r0	; 63
 13a:	cd bf       	out	0x3d, r28	; 61
 13c:	8b 83       	std	Y+3, r24	; 0x03
 13e:	7d 83       	std	Y+5, r23	; 0x05
 140:	6c 83       	std	Y+4, r22	; 0x04
 142:	4e 83       	std	Y+6, r20	; 0x06
 144:	2f 83       	std	Y+7, r18	; 0x07
 146:	08 87       	std	Y+8, r16	; 0x08
 148:	e9 86       	std	Y+9, r14	; 0x09
 14a:	8b 81       	ldd	r24, Y+3	; 0x03
 14c:	88 2f       	mov	r24, r24
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	48 96       	adiw	r24, 0x18	; 24
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	9a 83       	std	Y+2, r25	; 0x02
 160:	89 83       	std	Y+1, r24	; 0x01
 162:	88 85       	ldd	r24, Y+8	; 0x08
 164:	88 23       	and	r24, r24
 166:	49 f4       	brne	.+18     	; 0x17a <UART_ini+0x56>
 168:	89 81       	ldd	r24, Y+1	; 0x01
 16a:	9a 81       	ldd	r25, Y+2	; 0x02
 16c:	fc 01       	movw	r30, r24
 16e:	20 81       	ld	r18, Z
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	9a 81       	ldd	r25, Y+2	; 0x02
 174:	fc 01       	movw	r30, r24
 176:	20 83       	st	Z, r18
 178:	0a c0       	rjmp	.+20     	; 0x18e <UART_ini+0x6a>
 17a:	89 81       	ldd	r24, Y+1	; 0x01
 17c:	9a 81       	ldd	r25, Y+2	; 0x02
 17e:	fc 01       	movw	r30, r24
 180:	80 81       	ld	r24, Z
 182:	28 2f       	mov	r18, r24
 184:	22 60       	ori	r18, 0x02	; 2
 186:	89 81       	ldd	r24, Y+1	; 0x01
 188:	9a 81       	ldd	r25, Y+2	; 0x02
 18a:	fc 01       	movw	r30, r24
 18c:	20 83       	st	Z, r18
 18e:	89 81       	ldd	r24, Y+1	; 0x01
 190:	9a 81       	ldd	r25, Y+2	; 0x02
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	9a 83       	std	Y+2, r25	; 0x02
 196:	89 83       	std	Y+1, r24	; 0x01
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	9a 81       	ldd	r25, Y+2	; 0x02
 19c:	fc 01       	movw	r30, r24
 19e:	80 81       	ld	r24, Z
 1a0:	28 2f       	mov	r18, r24
 1a2:	28 69       	ori	r18, 0x98	; 152
 1a4:	89 81       	ldd	r24, Y+1	; 0x01
 1a6:	9a 81       	ldd	r25, Y+2	; 0x02
 1a8:	fc 01       	movw	r30, r24
 1aa:	20 83       	st	Z, r18
 1ac:	89 81       	ldd	r24, Y+1	; 0x01
 1ae:	9a 81       	ldd	r25, Y+2	; 0x02
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	9a 83       	std	Y+2, r25	; 0x02
 1b4:	89 83       	std	Y+1, r24	; 0x01
 1b6:	8e 81       	ldd	r24, Y+6	; 0x06
 1b8:	85 30       	cpi	r24, 0x05	; 5
 1ba:	49 f4       	brne	.+18     	; 0x1ce <UART_ini+0xaa>
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	9a 81       	ldd	r25, Y+2	; 0x02
 1c0:	fc 01       	movw	r30, r24
 1c2:	20 81       	ld	r18, Z
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	9a 81       	ldd	r25, Y+2	; 0x02
 1c8:	fc 01       	movw	r30, r24
 1ca:	20 83       	st	Z, r18
 1cc:	1b c0       	rjmp	.+54     	; 0x204 <UART_ini+0xe0>
 1ce:	8e 81       	ldd	r24, Y+6	; 0x06
 1d0:	86 30       	cpi	r24, 0x06	; 6
 1d2:	59 f4       	brne	.+22     	; 0x1ea <UART_ini+0xc6>
 1d4:	89 81       	ldd	r24, Y+1	; 0x01
 1d6:	9a 81       	ldd	r25, Y+2	; 0x02
 1d8:	fc 01       	movw	r30, r24
 1da:	80 81       	ld	r24, Z
 1dc:	28 2f       	mov	r18, r24
 1de:	22 60       	ori	r18, 0x02	; 2
 1e0:	89 81       	ldd	r24, Y+1	; 0x01
 1e2:	9a 81       	ldd	r25, Y+2	; 0x02
 1e4:	fc 01       	movw	r30, r24
 1e6:	20 83       	st	Z, r18
 1e8:	0d c0       	rjmp	.+26     	; 0x204 <UART_ini+0xe0>
 1ea:	8e 81       	ldd	r24, Y+6	; 0x06
 1ec:	87 30       	cpi	r24, 0x07	; 7
 1ee:	51 f4       	brne	.+20     	; 0x204 <UART_ini+0xe0>
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	9a 81       	ldd	r25, Y+2	; 0x02
 1f4:	fc 01       	movw	r30, r24
 1f6:	80 81       	ld	r24, Z
 1f8:	28 2f       	mov	r18, r24
 1fa:	24 60       	ori	r18, 0x04	; 4
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	9a 81       	ldd	r25, Y+2	; 0x02
 200:	fc 01       	movw	r30, r24
 202:	20 83       	st	Z, r18
 204:	89 85       	ldd	r24, Y+9	; 0x09
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	49 f4       	brne	.+18     	; 0x21c <UART_ini+0xf8>
 20a:	89 81       	ldd	r24, Y+1	; 0x01
 20c:	9a 81       	ldd	r25, Y+2	; 0x02
 20e:	fc 01       	movw	r30, r24
 210:	20 81       	ld	r18, Z
 212:	89 81       	ldd	r24, Y+1	; 0x01
 214:	9a 81       	ldd	r25, Y+2	; 0x02
 216:	fc 01       	movw	r30, r24
 218:	20 83       	st	Z, r18
 21a:	0d c0       	rjmp	.+26     	; 0x236 <UART_ini+0x112>
 21c:	89 85       	ldd	r24, Y+9	; 0x09
 21e:	82 30       	cpi	r24, 0x02	; 2
 220:	51 f4       	brne	.+20     	; 0x236 <UART_ini+0x112>
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	9a 81       	ldd	r25, Y+2	; 0x02
 226:	fc 01       	movw	r30, r24
 228:	80 81       	ld	r24, Z
 22a:	28 2f       	mov	r18, r24
 22c:	28 60       	ori	r18, 0x08	; 8
 22e:	89 81       	ldd	r24, Y+1	; 0x01
 230:	9a 81       	ldd	r25, Y+2	; 0x02
 232:	fc 01       	movw	r30, r24
 234:	20 83       	st	Z, r18
 236:	8f 81       	ldd	r24, Y+7	; 0x07
 238:	88 23       	and	r24, r24
 23a:	49 f4       	brne	.+18     	; 0x24e <UART_ini+0x12a>
 23c:	89 81       	ldd	r24, Y+1	; 0x01
 23e:	9a 81       	ldd	r25, Y+2	; 0x02
 240:	fc 01       	movw	r30, r24
 242:	20 81       	ld	r18, Z
 244:	89 81       	ldd	r24, Y+1	; 0x01
 246:	9a 81       	ldd	r25, Y+2	; 0x02
 248:	fc 01       	movw	r30, r24
 24a:	20 83       	st	Z, r18
 24c:	1b c0       	rjmp	.+54     	; 0x284 <UART_ini+0x160>
 24e:	8f 81       	ldd	r24, Y+7	; 0x07
 250:	81 30       	cpi	r24, 0x01	; 1
 252:	59 f4       	brne	.+22     	; 0x26a <UART_ini+0x146>
 254:	89 81       	ldd	r24, Y+1	; 0x01
 256:	9a 81       	ldd	r25, Y+2	; 0x02
 258:	fc 01       	movw	r30, r24
 25a:	80 81       	ld	r24, Z
 25c:	28 2f       	mov	r18, r24
 25e:	20 63       	ori	r18, 0x30	; 48
 260:	89 81       	ldd	r24, Y+1	; 0x01
 262:	9a 81       	ldd	r25, Y+2	; 0x02
 264:	fc 01       	movw	r30, r24
 266:	20 83       	st	Z, r18
 268:	0d c0       	rjmp	.+26     	; 0x284 <UART_ini+0x160>
 26a:	8f 81       	ldd	r24, Y+7	; 0x07
 26c:	82 30       	cpi	r24, 0x02	; 2
 26e:	51 f4       	brne	.+20     	; 0x284 <UART_ini+0x160>
 270:	89 81       	ldd	r24, Y+1	; 0x01
 272:	9a 81       	ldd	r25, Y+2	; 0x02
 274:	fc 01       	movw	r30, r24
 276:	80 81       	ld	r24, Z
 278:	28 2f       	mov	r18, r24
 27a:	20 62       	ori	r18, 0x20	; 32
 27c:	89 81       	ldd	r24, Y+1	; 0x01
 27e:	9a 81       	ldd	r25, Y+2	; 0x02
 280:	fc 01       	movw	r30, r24
 282:	20 83       	st	Z, r18
 284:	89 81       	ldd	r24, Y+1	; 0x01
 286:	9a 81       	ldd	r25, Y+2	; 0x02
 288:	fc 01       	movw	r30, r24
 28a:	20 81       	ld	r18, Z
 28c:	89 81       	ldd	r24, Y+1	; 0x01
 28e:	9a 81       	ldd	r25, Y+2	; 0x02
 290:	fc 01       	movw	r30, r24
 292:	20 83       	st	Z, r18
 294:	89 81       	ldd	r24, Y+1	; 0x01
 296:	9a 81       	ldd	r25, Y+2	; 0x02
 298:	02 96       	adiw	r24, 0x02	; 2
 29a:	9a 83       	std	Y+2, r25	; 0x02
 29c:	89 83       	std	Y+1, r24	; 0x01
 29e:	88 85       	ldd	r24, Y+8	; 0x08
 2a0:	88 23       	and	r24, r24
 2a2:	a9 f4       	brne	.+42     	; 0x2ce <UART_ini+0x1aa>
 2a4:	8c 81       	ldd	r24, Y+4	; 0x04
 2a6:	9d 81       	ldd	r25, Y+5	; 0x05
 2a8:	9c 01       	movw	r18, r24
 2aa:	40 e0       	ldi	r20, 0x00	; 0
 2ac:	50 e0       	ldi	r21, 0x00	; 0
 2ae:	80 e4       	ldi	r24, 0x40	; 64
 2b0:	92 e4       	ldi	r25, 0x42	; 66
 2b2:	af e0       	ldi	r26, 0x0F	; 15
 2b4:	b0 e0       	ldi	r27, 0x00	; 0
 2b6:	bc 01       	movw	r22, r24
 2b8:	cd 01       	movw	r24, r26
 2ba:	ef d2       	rcall	.+1502   	; 0x89a <__udivmodsi4>
 2bc:	da 01       	movw	r26, r20
 2be:	c9 01       	movw	r24, r18
 2c0:	2f ef       	ldi	r18, 0xFF	; 255
 2c2:	28 0f       	add	r18, r24
 2c4:	89 81       	ldd	r24, Y+1	; 0x01
 2c6:	9a 81       	ldd	r25, Y+2	; 0x02
 2c8:	fc 01       	movw	r30, r24
 2ca:	20 83       	st	Z, r18
 2cc:	14 c0       	rjmp	.+40     	; 0x2f6 <UART_ini+0x1d2>
 2ce:	8c 81       	ldd	r24, Y+4	; 0x04
 2d0:	9d 81       	ldd	r25, Y+5	; 0x05
 2d2:	9c 01       	movw	r18, r24
 2d4:	40 e0       	ldi	r20, 0x00	; 0
 2d6:	50 e0       	ldi	r21, 0x00	; 0
 2d8:	80 e8       	ldi	r24, 0x80	; 128
 2da:	94 e8       	ldi	r25, 0x84	; 132
 2dc:	ae e1       	ldi	r26, 0x1E	; 30
 2de:	b0 e0       	ldi	r27, 0x00	; 0
 2e0:	bc 01       	movw	r22, r24
 2e2:	cd 01       	movw	r24, r26
 2e4:	da d2       	rcall	.+1460   	; 0x89a <__udivmodsi4>
 2e6:	da 01       	movw	r26, r20
 2e8:	c9 01       	movw	r24, r18
 2ea:	2f ef       	ldi	r18, 0xFF	; 255
 2ec:	28 0f       	add	r18, r24
 2ee:	89 81       	ldd	r24, Y+1	; 0x01
 2f0:	9a 81       	ldd	r25, Y+2	; 0x02
 2f2:	fc 01       	movw	r30, r24
 2f4:	20 83       	st	Z, r18
 2f6:	78 94       	sei
 2f8:	00 00       	nop
 2fa:	29 96       	adiw	r28, 0x09	; 9
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	f8 94       	cli
 300:	de bf       	out	0x3e, r29	; 62
 302:	0f be       	out	0x3f, r0	; 63
 304:	cd bf       	out	0x3d, r28	; 61
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	0f 91       	pop	r16
 30c:	ef 90       	pop	r14
 30e:	08 95       	ret

00000310 <UART_putchar>:

void UART_putchar(char dato)
{
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	1f 92       	push	r1
 316:	cd b7       	in	r28, 0x3d	; 61
 318:	de b7       	in	r29, 0x3e	; 62
 31a:	89 83       	std	Y+1, r24	; 0x01
	TX_0.UDR_MEM[TX_0.UDR_HEAD] = dato;
 31c:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <__data_end+0x40>
 320:	88 2f       	mov	r24, r24
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	8a 5e       	subi	r24, 0xEA	; 234
 326:	9d 4f       	sbci	r25, 0xFD	; 253
 328:	29 81       	ldd	r18, Y+1	; 0x01
 32a:	fc 01       	movw	r30, r24
 32c:	20 83       	st	Z, r18
	TX_0.UDR_HEAD = MOD(TX_0.UDR_HEAD+1);
 32e:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <__data_end+0x40>
 332:	8e 5f       	subi	r24, 0xFE	; 254
 334:	8f 73       	andi	r24, 0x3F	; 63
 336:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <__data_end+0x40>
	UCSR0B |= (1<<UDRIE0);
 33a:	81 ec       	ldi	r24, 0xC1	; 193
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	21 ec       	ldi	r18, 0xC1	; 193
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	f9 01       	movw	r30, r18
 344:	20 81       	ld	r18, Z
 346:	20 62       	ori	r18, 0x20	; 32
 348:	fc 01       	movw	r30, r24
 34a:	20 83       	st	Z, r18
}
 34c:	00 00       	nop
 34e:	0f 90       	pop	r0
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	08 95       	ret

00000356 <UART_puts>:

void UART_puts( char *str)
{
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	1f 92       	push	r1
 35c:	1f 92       	push	r1
 35e:	cd b7       	in	r28, 0x3d	; 61
 360:	de b7       	in	r29, 0x3e	; 62
 362:	9a 83       	std	Y+2, r25	; 0x02
 364:	89 83       	std	Y+1, r24	; 0x01
	while (*str)
 366:	0a c0       	rjmp	.+20     	; 0x37c <UART_puts+0x26>
	{
		UART_putchar(*str);
 368:	89 81       	ldd	r24, Y+1	; 0x01
 36a:	9a 81       	ldd	r25, Y+2	; 0x02
 36c:	fc 01       	movw	r30, r24
 36e:	80 81       	ld	r24, Z
 370:	cf df       	rcall	.-98     	; 0x310 <UART_putchar>
		str++;
 372:	89 81       	ldd	r24, Y+1	; 0x01
 374:	9a 81       	ldd	r25, Y+2	; 0x02
 376:	01 96       	adiw	r24, 0x01	; 1
 378:	9a 83       	std	Y+2, r25	; 0x02
 37a:	89 83       	std	Y+1, r24	; 0x01
	UCSR0B |= (1<<UDRIE0);
}

void UART_puts( char *str)
{
	while (*str)
 37c:	89 81       	ldd	r24, Y+1	; 0x01
 37e:	9a 81       	ldd	r25, Y+2	; 0x02
 380:	fc 01       	movw	r30, r24
 382:	80 81       	ld	r24, Z
 384:	88 23       	and	r24, r24
 386:	81 f7       	brne	.-32     	; 0x368 <UART_puts+0x12>
	{
		UART_putchar(*str);
		str++;
	}
}
 388:	00 00       	nop
 38a:	0f 90       	pop	r0
 38c:	0f 90       	pop	r0
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	08 95       	ret

00000394 <UART_getchar>:

uint8_t UART_getchar()
{
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
 398:	1f 92       	push	r1
 39a:	cd b7       	in	r28, 0x3d	; 61
 39c:	de b7       	in	r29, 0x3e	; 62
	uint8_t aux;
	
	while (1)
	{
		if (!IS_EMPTY(RX_0))
 39e:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <RX_0+0x40>
 3a2:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <RX_0+0x41>
 3a6:	98 17       	cp	r25, r24
 3a8:	d1 f3       	breq	.-12     	; 0x39e <UART_getchar+0xa>
		{
			aux = RX_0.UDR_MEM[RX_0.UDR_TAIL];
 3aa:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <RX_0+0x41>
 3ae:	88 2f       	mov	r24, r24
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	88 5a       	subi	r24, 0xA8	; 168
 3b4:	9d 4f       	sbci	r25, 0xFD	; 253
 3b6:	fc 01       	movw	r30, r24
 3b8:	80 81       	ld	r24, Z
 3ba:	89 83       	std	Y+1, r24	; 0x01
			
			RX_0.UDR_TAIL = MOD(RX_0.UDR_TAIL+1);
 3bc:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <RX_0+0x41>
 3c0:	8e 5f       	subi	r24, 0xFE	; 254
 3c2:	8f 73       	andi	r24, 0x3F	; 63
 3c4:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <RX_0+0x41>
			return  aux;
 3c8:	89 81       	ldd	r24, Y+1	; 0x01
		}
	}
}
 3ca:	0f 90       	pop	r0
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	08 95       	ret

000003d2 <UART_gets>:

void UART_gets(char *str)
{
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
 3d6:	00 d0       	rcall	.+0      	; 0x3d8 <UART_gets+0x6>
 3d8:	1f 92       	push	r1
 3da:	cd b7       	in	r28, 0x3d	; 61
 3dc:	de b7       	in	r29, 0x3e	; 62
 3de:	9c 83       	std	Y+4, r25	; 0x04
 3e0:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t aux;
	uint8_t i=0;
 3e2:	19 82       	std	Y+1, r1	; 0x01
	
	do
	{
		aux=UART_getchar();
 3e4:	d7 df       	rcall	.-82     	; 0x394 <UART_getchar>
 3e6:	8a 83       	std	Y+2, r24	; 0x02
		UART_putchar(aux);
 3e8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ea:	92 df       	rcall	.-220    	; 0x310 <UART_putchar>
		
		if(aux==8 && i>0 )
 3ec:	8a 81       	ldd	r24, Y+2	; 0x02
 3ee:	88 30       	cpi	r24, 0x08	; 8
 3f0:	79 f4       	brne	.+30     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3f2:	89 81       	ldd	r24, Y+1	; 0x01
 3f4:	88 23       	and	r24, r24
 3f6:	61 f0       	breq	.+24     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		{
			i--;
 3f8:	89 81       	ldd	r24, Y+1	; 0x01
 3fa:	81 50       	subi	r24, 0x01	; 1
 3fc:	89 83       	std	Y+1, r24	; 0x01
			str--;	
 3fe:	8b 81       	ldd	r24, Y+3	; 0x03
 400:	9c 81       	ldd	r25, Y+4	; 0x04
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	9c 83       	std	Y+4, r25	; 0x04
			UART_putchar(' ');
 406:	8b 83       	std	Y+3, r24	; 0x03
 408:	80 e2       	ldi	r24, 0x20	; 32
			UART_putchar(aux);
 40a:	82 df       	rcall	.-252    	; 0x310 <UART_putchar>
 40c:	8a 81       	ldd	r24, Y+2	; 0x02
 40e:	80 df       	rcall	.-256    	; 0x310 <UART_putchar>
			
		}
		if(aux!=8 && i<10)
 410:	8a 81       	ldd	r24, Y+2	; 0x02
 412:	88 30       	cpi	r24, 0x08	; 8
 414:	81 f0       	breq	.+32     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 416:	89 81       	ldd	r24, Y+1	; 0x01
 418:	8a 30       	cpi	r24, 0x0A	; 10
 41a:	68 f4       	brcc	.+26     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		{
			*(str++)=aux;
 41c:	8b 81       	ldd	r24, Y+3	; 0x03
 41e:	9c 81       	ldd	r25, Y+4	; 0x04
 420:	9c 01       	movw	r18, r24
 422:	2f 5f       	subi	r18, 0xFF	; 255
 424:	3f 4f       	sbci	r19, 0xFF	; 255
 426:	3c 83       	std	Y+4, r19	; 0x04
 428:	2b 83       	std	Y+3, r18	; 0x03
 42a:	2a 81       	ldd	r18, Y+2	; 0x02
 42c:	fc 01       	movw	r30, r24
 42e:	20 83       	st	Z, r18
			i++; 
 430:	89 81       	ldd	r24, Y+1	; 0x01
 432:	8f 5f       	subi	r24, 0xFF	; 255
 434:	89 83       	std	Y+1, r24	; 0x01
		}
		
	}while(aux!='\r');
 436:	8a 81       	ldd	r24, Y+2	; 0x02
 438:	8d 30       	cpi	r24, 0x0D	; 13
 43a:	a1 f6       	brne	.-88     	; 0x3e4 <UART_gets+0x12>
	*str=0;
 43c:	8b 81       	ldd	r24, Y+3	; 0x03
 43e:	9c 81       	ldd	r25, Y+4	; 0x04
 440:	fc 01       	movw	r30, r24
 442:	10 82       	st	Z, r1

}
 444:	00 00       	nop
 446:	0f 90       	pop	r0
 448:	0f 90       	pop	r0
 44a:	0f 90       	pop	r0
 44c:	0f 90       	pop	r0
 44e:	df 91       	pop	r29
 450:	cf 91       	pop	r28
 452:	08 95       	ret

00000454 <UART_Available>:
	
uint8_t UART_Available()
{
 454:	cf 93       	push	r28
 456:	df 93       	push	r29
 458:	cd b7       	in	r28, 0x3d	; 61
 45a:	de b7       	in	r29, 0x3e	; 62
	if (IS_EMPTY(RX_0))
 45c:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <RX_0+0x40>
 460:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <RX_0+0x41>
 464:	98 17       	cp	r25, r24
 466:	11 f4       	brne	.+4      	; 0x46c <UART_Available+0x18>
	{
		return 0;
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	01 c0       	rjmp	.+2      	; 0x46e <UART_Available+0x1a>
	}
	else
	{
		return 1;
 46c:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
 472:	08 95       	ret

00000474 <UART_clrscr>:

void UART_clrscr()
{
 474:	cf 93       	push	r28
 476:	df 93       	push	r29
 478:	cd b7       	in	r28, 0x3d	; 61
 47a:	de b7       	in	r29, 0x3e	; 62
	UART_puts("\e[2J");
 47c:	80 e1       	ldi	r24, 0x10	; 16
 47e:	92 e0       	ldi	r25, 0x02	; 2
 480:	6a df       	rcall	.-300    	; 0x356 <UART_puts>
}
 482:	00 00       	nop
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	08 95       	ret

0000048a <UART_setColor>:

void UART_setColor(char color)
{
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	cd b7       	in	r28, 0x3d	; 61
 490:	de b7       	in	r29, 0x3e	; 62
 492:	2e 97       	sbiw	r28, 0x0e	; 14
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	f8 94       	cli
 498:	de bf       	out	0x3e, r29	; 62
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	cd bf       	out	0x3d, r28	; 61
 49e:	8e 87       	std	Y+14, r24	; 0x0e
	char aux_color_screen[3];
	char set_screen[10];
	
	myItoa(color,10,aux_color_screen);
 4a0:	8e 85       	ldd	r24, Y+14	; 0x0e
 4a2:	88 2f       	mov	r24, r24
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	9e 01       	movw	r18, r28
 4a8:	2f 5f       	subi	r18, 0xFF	; 255
 4aa:	3f 4f       	sbci	r19, 0xFF	; 255
 4ac:	a9 01       	movw	r20, r18
 4ae:	6a e0       	ldi	r22, 0x0A	; 10
 4b0:	70 e0       	ldi	r23, 0x00	; 0
 4b2:	bc d0       	rcall	.+376    	; 0x62c <myItoa>
	strcat(set_screen,"\e[");
 4b4:	ce 01       	movw	r24, r28
 4b6:	04 96       	adiw	r24, 0x04	; 4
 4b8:	9c 01       	movw	r18, r24
 4ba:	f9 01       	movw	r30, r18
 4bc:	01 90       	ld	r0, Z+
 4be:	00 20       	and	r0, r0
 4c0:	e9 f7       	brne	.-6      	; 0x4bc <UART_setColor+0x32>
 4c2:	cf 01       	movw	r24, r30
 4c4:	01 97       	sbiw	r24, 0x01	; 1
 4c6:	82 1b       	sub	r24, r18
 4c8:	93 0b       	sbc	r25, r19
 4ca:	9e 01       	movw	r18, r28
 4cc:	2c 5f       	subi	r18, 0xFC	; 252
 4ce:	3f 4f       	sbci	r19, 0xFF	; 255
 4d0:	82 0f       	add	r24, r18
 4d2:	93 1f       	adc	r25, r19
 4d4:	2b e1       	ldi	r18, 0x1B	; 27
 4d6:	3b e5       	ldi	r19, 0x5B	; 91
 4d8:	fc 01       	movw	r30, r24
 4da:	31 83       	std	Z+1, r19	; 0x01
 4dc:	20 83       	st	Z, r18
 4de:	fc 01       	movw	r30, r24
 4e0:	12 82       	std	Z+2, r1	; 0x02
	strcat(set_screen,aux_color_screen);
 4e2:	ce 01       	movw	r24, r28
 4e4:	04 96       	adiw	r24, 0x04	; 4
 4e6:	9e 01       	movw	r18, r28
 4e8:	2f 5f       	subi	r18, 0xFF	; 255
 4ea:	3f 4f       	sbci	r19, 0xFF	; 255
 4ec:	b9 01       	movw	r22, r18
 4ee:	0b d2       	rcall	.+1046   	; 0x906 <strcat>
	strcat(set_screen,"m");
 4f0:	ce 01       	movw	r24, r28
 4f2:	04 96       	adiw	r24, 0x04	; 4
 4f4:	9c 01       	movw	r18, r24
 4f6:	f9 01       	movw	r30, r18
 4f8:	01 90       	ld	r0, Z+
 4fa:	00 20       	and	r0, r0
 4fc:	e9 f7       	brne	.-6      	; 0x4f8 <UART_setColor+0x6e>
 4fe:	cf 01       	movw	r24, r30
 500:	01 97       	sbiw	r24, 0x01	; 1
 502:	82 1b       	sub	r24, r18
 504:	93 0b       	sbc	r25, r19
 506:	9e 01       	movw	r18, r28
 508:	2c 5f       	subi	r18, 0xFC	; 252
 50a:	3f 4f       	sbci	r19, 0xFF	; 255
 50c:	82 0f       	add	r24, r18
 50e:	93 1f       	adc	r25, r19
 510:	2d e6       	ldi	r18, 0x6D	; 109
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	fc 01       	movw	r30, r24
 516:	31 83       	std	Z+1, r19	; 0x01
 518:	20 83       	st	Z, r18
	
	UART_puts(set_screen);
 51a:	ce 01       	movw	r24, r28
 51c:	04 96       	adiw	r24, 0x04	; 4
 51e:	1b df       	rcall	.-458    	; 0x356 <UART_puts>
}
 520:	00 00       	nop
 522:	2e 96       	adiw	r28, 0x0e	; 14
 524:	0f b6       	in	r0, 0x3f	; 63
 526:	f8 94       	cli
 528:	de bf       	out	0x3e, r29	; 62
 52a:	0f be       	out	0x3f, r0	; 63
 52c:	cd bf       	out	0x3d, r28	; 61
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	08 95       	ret

00000534 <UART_gotoxy>:

void UART_gotoxy(char x, char y)
{
 534:	cf 93       	push	r28
 536:	df 93       	push	r29
 538:	cd b7       	in	r28, 0x3d	; 61
 53a:	de b7       	in	r29, 0x3e	; 62
 53c:	69 97       	sbiw	r28, 0x19	; 25
 53e:	0f b6       	in	r0, 0x3f	; 63
 540:	f8 94       	cli
 542:	de bf       	out	0x3e, r29	; 62
 544:	0f be       	out	0x3f, r0	; 63
 546:	cd bf       	out	0x3d, r28	; 61
 548:	88 8f       	std	Y+24, r24	; 0x18
 54a:	69 8f       	std	Y+25, r22	; 0x19
	char aux_row[4];
	char aux_col[4];
	char screen_x_y[15];
	
	myItoa(x,10,aux_row);
 54c:	88 8d       	ldd	r24, Y+24	; 0x18
 54e:	88 2f       	mov	r24, r24
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	9e 01       	movw	r18, r28
 554:	2f 5f       	subi	r18, 0xFF	; 255
 556:	3f 4f       	sbci	r19, 0xFF	; 255
 558:	a9 01       	movw	r20, r18
 55a:	6a e0       	ldi	r22, 0x0A	; 10
 55c:	70 e0       	ldi	r23, 0x00	; 0
 55e:	66 d0       	rcall	.+204    	; 0x62c <myItoa>
	myItoa(y,10,aux_col);
 560:	89 8d       	ldd	r24, Y+25	; 0x19
 562:	88 2f       	mov	r24, r24
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	9e 01       	movw	r18, r28
 568:	2b 5f       	subi	r18, 0xFB	; 251
 56a:	3f 4f       	sbci	r19, 0xFF	; 255
 56c:	a9 01       	movw	r20, r18
 56e:	6a e0       	ldi	r22, 0x0A	; 10
 570:	70 e0       	ldi	r23, 0x00	; 0
 572:	5c d0       	rcall	.+184    	; 0x62c <myItoa>
	strcat(screen_x_y,"\e[");
 574:	ce 01       	movw	r24, r28
 576:	09 96       	adiw	r24, 0x09	; 9
 578:	9c 01       	movw	r18, r24
 57a:	f9 01       	movw	r30, r18
 57c:	01 90       	ld	r0, Z+
 57e:	00 20       	and	r0, r0
 580:	e9 f7       	brne	.-6      	; 0x57c <UART_gotoxy+0x48>
 582:	cf 01       	movw	r24, r30
 584:	01 97       	sbiw	r24, 0x01	; 1
 586:	82 1b       	sub	r24, r18
 588:	93 0b       	sbc	r25, r19
 58a:	9e 01       	movw	r18, r28
 58c:	27 5f       	subi	r18, 0xF7	; 247
 58e:	3f 4f       	sbci	r19, 0xFF	; 255
 590:	82 0f       	add	r24, r18
 592:	93 1f       	adc	r25, r19
 594:	2b e1       	ldi	r18, 0x1B	; 27
 596:	3b e5       	ldi	r19, 0x5B	; 91
 598:	fc 01       	movw	r30, r24
 59a:	31 83       	std	Z+1, r19	; 0x01
 59c:	20 83       	st	Z, r18
 59e:	fc 01       	movw	r30, r24
 5a0:	12 82       	std	Z+2, r1	; 0x02
	strcat(screen_x_y,aux_row);
 5a2:	ce 01       	movw	r24, r28
 5a4:	09 96       	adiw	r24, 0x09	; 9
 5a6:	9e 01       	movw	r18, r28
 5a8:	2f 5f       	subi	r18, 0xFF	; 255
 5aa:	3f 4f       	sbci	r19, 0xFF	; 255
 5ac:	b9 01       	movw	r22, r18
 5ae:	ab d1       	rcall	.+854    	; 0x906 <strcat>
	strcat(screen_x_y,";");
 5b0:	ce 01       	movw	r24, r28
 5b2:	09 96       	adiw	r24, 0x09	; 9
 5b4:	9c 01       	movw	r18, r24
 5b6:	f9 01       	movw	r30, r18
 5b8:	01 90       	ld	r0, Z+
 5ba:	00 20       	and	r0, r0
 5bc:	e9 f7       	brne	.-6      	; 0x5b8 <UART_gotoxy+0x84>
 5be:	cf 01       	movw	r24, r30
 5c0:	01 97       	sbiw	r24, 0x01	; 1
 5c2:	82 1b       	sub	r24, r18
 5c4:	93 0b       	sbc	r25, r19
 5c6:	9e 01       	movw	r18, r28
 5c8:	27 5f       	subi	r18, 0xF7	; 247
 5ca:	3f 4f       	sbci	r19, 0xFF	; 255
 5cc:	82 0f       	add	r24, r18
 5ce:	93 1f       	adc	r25, r19
 5d0:	2b e3       	ldi	r18, 0x3B	; 59
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	fc 01       	movw	r30, r24
 5d6:	31 83       	std	Z+1, r19	; 0x01
 5d8:	20 83       	st	Z, r18
	strcat(screen_x_y,aux_col);
 5da:	9e 01       	movw	r18, r28
 5dc:	2b 5f       	subi	r18, 0xFB	; 251
 5de:	3f 4f       	sbci	r19, 0xFF	; 255
 5e0:	ce 01       	movw	r24, r28
 5e2:	09 96       	adiw	r24, 0x09	; 9
 5e4:	b9 01       	movw	r22, r18
 5e6:	8f d1       	rcall	.+798    	; 0x906 <strcat>
	strcat(screen_x_y,"H");
 5e8:	ce 01       	movw	r24, r28
 5ea:	09 96       	adiw	r24, 0x09	; 9
 5ec:	9c 01       	movw	r18, r24
 5ee:	f9 01       	movw	r30, r18
 5f0:	01 90       	ld	r0, Z+
 5f2:	00 20       	and	r0, r0
 5f4:	e9 f7       	brne	.-6      	; 0x5f0 <UART_gotoxy+0xbc>
 5f6:	cf 01       	movw	r24, r30
 5f8:	01 97       	sbiw	r24, 0x01	; 1
 5fa:	82 1b       	sub	r24, r18
 5fc:	93 0b       	sbc	r25, r19
 5fe:	9e 01       	movw	r18, r28
 600:	27 5f       	subi	r18, 0xF7	; 247
 602:	3f 4f       	sbci	r19, 0xFF	; 255
 604:	82 0f       	add	r24, r18
 606:	93 1f       	adc	r25, r19
 608:	28 e4       	ldi	r18, 0x48	; 72
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	fc 01       	movw	r30, r24
 60e:	31 83       	std	Z+1, r19	; 0x01
	UART_puts(screen_x_y);
 610:	20 83       	st	Z, r18
 612:	ce 01       	movw	r24, r28
 614:	09 96       	adiw	r24, 0x09	; 9
 616:	9f de       	rcall	.-706    	; 0x356 <UART_puts>
}
 618:	00 00       	nop
 61a:	69 96       	adiw	r28, 0x19	; 25
 61c:	0f b6       	in	r0, 0x3f	; 63
 61e:	f8 94       	cli
 620:	de bf       	out	0x3e, r29	; 62
 622:	0f be       	out	0x3f, r0	; 63
 624:	cd bf       	out	0x3d, r28	; 61
 626:	df 91       	pop	r29
 628:	cf 91       	pop	r28
 62a:	08 95       	ret

0000062c <myItoa>:

void myItoa( int num,int base, char *salida)
{
 62c:	cf 93       	push	r28
 62e:	df 93       	push	r29
 630:	cd b7       	in	r28, 0x3d	; 61
 632:	de b7       	in	r29, 0x3e	; 62
 634:	6a 97       	sbiw	r28, 0x1a	; 26
 636:	0f b6       	in	r0, 0x3f	; 63
 638:	f8 94       	cli
 63a:	de bf       	out	0x3e, r29	; 62
 63c:	0f be       	out	0x3f, r0	; 63
 63e:	cd bf       	out	0x3d, r28	; 61
 640:	9e 8b       	std	Y+22, r25	; 0x16
 642:	8d 8b       	std	Y+21, r24	; 0x15
 644:	78 8f       	std	Y+24, r23	; 0x18
 646:	6f 8b       	std	Y+23, r22	; 0x17
 648:	5a 8f       	std	Y+26, r21	; 0x1a
 64a:	49 8f       	std	Y+25, r20	; 0x19
	int j,i;
	char aux_string[16];
	i=0,j=0;
 64c:	1c 82       	std	Y+4, r1	; 0x04
 64e:	1b 82       	std	Y+3, r1	; 0x03
 650:	1a 82       	std	Y+2, r1	; 0x02
 652:	19 82       	std	Y+1, r1	; 0x01

	if(num!=0){
 654:	8d 89       	ldd	r24, Y+21	; 0x15
 656:	9e 89       	ldd	r25, Y+22	; 0x16
 658:	89 2b       	or	r24, r25
 65a:	09 f4       	brne	.+2      	; 0x65e <myItoa+0x32>
 65c:	58 c0       	rjmp	.+176    	; 0x70e <myItoa+0xe2>
		while(num){
 65e:	21 c0       	rjmp	.+66     	; 0x6a2 <myItoa+0x76>
			*(aux_string+i)=symbol[num%base];
 660:	8b 81       	ldd	r24, Y+3	; 0x03
 662:	9c 81       	ldd	r25, Y+4	; 0x04
 664:	9e 01       	movw	r18, r28
 666:	2b 5f       	subi	r18, 0xFB	; 251
 668:	3f 4f       	sbci	r19, 0xFF	; 255
 66a:	28 0f       	add	r18, r24
 66c:	39 1f       	adc	r19, r25
 66e:	8d 89       	ldd	r24, Y+21	; 0x15
 670:	9e 89       	ldd	r25, Y+22	; 0x16
 672:	4f 89       	ldd	r20, Y+23	; 0x17
 674:	58 8d       	ldd	r21, Y+24	; 0x18
 676:	ba 01       	movw	r22, r20
 678:	fd d0       	rcall	.+506    	; 0x874 <__divmodhi4>
 67a:	80 50       	subi	r24, 0x00	; 0
 67c:	9e 4f       	sbci	r25, 0xFE	; 254
 67e:	fc 01       	movw	r30, r24
 680:	80 81       	ld	r24, Z
 682:	f9 01       	movw	r30, r18
 684:	80 83       	st	Z, r24
			num=num/base;
 686:	8d 89       	ldd	r24, Y+21	; 0x15
 688:	9e 89       	ldd	r25, Y+22	; 0x16
 68a:	2f 89       	ldd	r18, Y+23	; 0x17
 68c:	38 8d       	ldd	r19, Y+24	; 0x18
 68e:	b9 01       	movw	r22, r18
 690:	f1 d0       	rcall	.+482    	; 0x874 <__divmodhi4>
 692:	cb 01       	movw	r24, r22
 694:	9e 8b       	std	Y+22, r25	; 0x16
 696:	8d 8b       	std	Y+21, r24	; 0x15
			i++;
 698:	8b 81       	ldd	r24, Y+3	; 0x03
 69a:	9c 81       	ldd	r25, Y+4	; 0x04
 69c:	01 96       	adiw	r24, 0x01	; 1
 69e:	9c 83       	std	Y+4, r25	; 0x04
 6a0:	8b 83       	std	Y+3, r24	; 0x03
	int j,i;
	char aux_string[16];
	i=0,j=0;

	if(num!=0){
		while(num){
 6a2:	8d 89       	ldd	r24, Y+21	; 0x15
 6a4:	9e 89       	ldd	r25, Y+22	; 0x16
 6a6:	89 2b       	or	r24, r25
 6a8:	d9 f6       	brne	.-74     	; 0x660 <myItoa+0x34>
			*(aux_string+i)=symbol[num%base];
			num=num/base;
			i++;
		}
		*(aux_string+i)=0;
 6aa:	8b 81       	ldd	r24, Y+3	; 0x03
 6ac:	9c 81       	ldd	r25, Y+4	; 0x04
 6ae:	9e 01       	movw	r18, r28
 6b0:	2b 5f       	subi	r18, 0xFB	; 251
 6b2:	3f 4f       	sbci	r19, 0xFF	; 255
 6b4:	82 0f       	add	r24, r18
 6b6:	93 1f       	adc	r25, r19
 6b8:	fc 01       	movw	r30, r24
 6ba:	10 82       	st	Z, r1
		

		while(i)
 6bc:	1b c0       	rjmp	.+54     	; 0x6f4 <myItoa+0xc8>
		{
			i--;
 6be:	8b 81       	ldd	r24, Y+3	; 0x03
 6c0:	9c 81       	ldd	r25, Y+4	; 0x04
 6c2:	01 97       	sbiw	r24, 0x01	; 1
 6c4:	9c 83       	std	Y+4, r25	; 0x04
 6c6:	8b 83       	std	Y+3, r24	; 0x03
			(*(salida+j))=aux_string[i];
 6c8:	89 81       	ldd	r24, Y+1	; 0x01
 6ca:	9a 81       	ldd	r25, Y+2	; 0x02
 6cc:	29 8d       	ldd	r18, Y+25	; 0x19
 6ce:	3a 8d       	ldd	r19, Y+26	; 0x1a
 6d0:	82 0f       	add	r24, r18
 6d2:	93 1f       	adc	r25, r19
 6d4:	ae 01       	movw	r20, r28
 6d6:	4b 5f       	subi	r20, 0xFB	; 251
 6d8:	5f 4f       	sbci	r21, 0xFF	; 255
 6da:	2b 81       	ldd	r18, Y+3	; 0x03
 6dc:	3c 81       	ldd	r19, Y+4	; 0x04
 6de:	24 0f       	add	r18, r20
 6e0:	35 1f       	adc	r19, r21
 6e2:	f9 01       	movw	r30, r18
 6e4:	20 81       	ld	r18, Z
 6e6:	fc 01       	movw	r30, r24
 6e8:	20 83       	st	Z, r18
			j++;
 6ea:	89 81       	ldd	r24, Y+1	; 0x01
 6ec:	9a 81       	ldd	r25, Y+2	; 0x02
 6ee:	01 96       	adiw	r24, 0x01	; 1
 6f0:	9a 83       	std	Y+2, r25	; 0x02
 6f2:	89 83       	std	Y+1, r24	; 0x01
			i++;
		}
		*(aux_string+i)=0;
		

		while(i)
 6f4:	8b 81       	ldd	r24, Y+3	; 0x03
 6f6:	9c 81       	ldd	r25, Y+4	; 0x04
 6f8:	89 2b       	or	r24, r25
 6fa:	09 f7       	brne	.-62     	; 0x6be <myItoa+0x92>
			i--;
			(*(salida+j))=aux_string[i];
			j++;

		}
		(*(salida+j))=0;
 6fc:	89 81       	ldd	r24, Y+1	; 0x01
 6fe:	9a 81       	ldd	r25, Y+2	; 0x02
 700:	29 8d       	ldd	r18, Y+25	; 0x19
 702:	3a 8d       	ldd	r19, Y+26	; 0x1a
 704:	82 0f       	add	r24, r18
 706:	93 1f       	adc	r25, r19
 708:	fc 01       	movw	r30, r24
 70a:	10 82       	st	Z, r1
		salida[1]=0;
		
	}
	
	
}
 70c:	0a c0       	rjmp	.+20     	; 0x722 <myItoa+0xf6>
		(*(salida+j))=0;
	}
	else
	{
		
		salida[0]='0';
 70e:	89 8d       	ldd	r24, Y+25	; 0x19
 710:	9a 8d       	ldd	r25, Y+26	; 0x1a
 712:	20 e3       	ldi	r18, 0x30	; 48
 714:	fc 01       	movw	r30, r24
 716:	20 83       	st	Z, r18
		salida[1]=0;
 718:	89 8d       	ldd	r24, Y+25	; 0x19
 71a:	9a 8d       	ldd	r25, Y+26	; 0x1a
 71c:	01 96       	adiw	r24, 0x01	; 1
 71e:	fc 01       	movw	r30, r24
 720:	10 82       	st	Z, r1
		
	}
	
	
}
 722:	00 00       	nop
 724:	6a 96       	adiw	r28, 0x1a	; 26
 726:	0f b6       	in	r0, 0x3f	; 63
 728:	f8 94       	cli
 72a:	de bf       	out	0x3e, r29	; 62
 72c:	0f be       	out	0x3f, r0	; 63
 72e:	cd bf       	out	0x3d, r28	; 61
 730:	df 91       	pop	r29
 732:	cf 91       	pop	r28
 734:	08 95       	ret

00000736 <__vector_25>:

ISR(USART0_RX_vect)
{
 736:	1f 92       	push	r1
 738:	0f 92       	push	r0
 73a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 73e:	0f 92       	push	r0
 740:	11 24       	eor	r1, r1
 742:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 746:	0f 92       	push	r0
 748:	2f 93       	push	r18
 74a:	3f 93       	push	r19
 74c:	8f 93       	push	r24
 74e:	9f 93       	push	r25
 750:	ef 93       	push	r30
 752:	ff 93       	push	r31
 754:	cf 93       	push	r28
 756:	df 93       	push	r29
 758:	cd b7       	in	r28, 0x3d	; 61
 75a:	de b7       	in	r29, 0x3e	; 62
	RX_0.UDR_MEM[RX_0.UDR_HEAD] = UDR0;
 75c:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <RX_0+0x40>
 760:	88 2f       	mov	r24, r24
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	26 ec       	ldi	r18, 0xC6	; 198
 766:	30 e0       	ldi	r19, 0x00	; 0
 768:	f9 01       	movw	r30, r18
 76a:	20 81       	ld	r18, Z
 76c:	88 5a       	subi	r24, 0xA8	; 168
 76e:	9d 4f       	sbci	r25, 0xFD	; 253
 770:	fc 01       	movw	r30, r24
 772:	20 83       	st	Z, r18
	RX_0.UDR_HEAD = MOD(RX_0.UDR_HEAD+1);
 774:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <RX_0+0x40>
 778:	8e 5f       	subi	r24, 0xFE	; 254
 77a:	8f 73       	andi	r24, 0x3F	; 63
 77c:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <RX_0+0x40>
}
 780:	00 00       	nop
 782:	df 91       	pop	r29
 784:	cf 91       	pop	r28
 786:	ff 91       	pop	r31
 788:	ef 91       	pop	r30
 78a:	9f 91       	pop	r25
 78c:	8f 91       	pop	r24
 78e:	3f 91       	pop	r19
 790:	2f 91       	pop	r18
 792:	0f 90       	pop	r0
 794:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 798:	0f 90       	pop	r0
 79a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 79e:	0f 90       	pop	r0
 7a0:	1f 90       	pop	r1
 7a2:	18 95       	reti

000007a4 <__vector_26>:

ISR(USART0_UDRE_vect)
{
 7a4:	1f 92       	push	r1
 7a6:	0f 92       	push	r0
 7a8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 7ac:	0f 92       	push	r0
 7ae:	11 24       	eor	r1, r1
 7b0:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 7b4:	0f 92       	push	r0
 7b6:	2f 93       	push	r18
 7b8:	3f 93       	push	r19
 7ba:	8f 93       	push	r24
 7bc:	9f 93       	push	r25
 7be:	ef 93       	push	r30
 7c0:	ff 93       	push	r31
 7c2:	cf 93       	push	r28
 7c4:	df 93       	push	r29
 7c6:	cd b7       	in	r28, 0x3d	; 61
 7c8:	de b7       	in	r29, 0x3e	; 62
	UDR0 = TX_0.UDR_MEM[TX_0.UDR_TAIL];
 7ca:	86 ec       	ldi	r24, 0xC6	; 198
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <__data_end+0x41>
 7d2:	22 2f       	mov	r18, r18
 7d4:	30 e0       	ldi	r19, 0x00	; 0
 7d6:	2a 5e       	subi	r18, 0xEA	; 234
 7d8:	3d 4f       	sbci	r19, 0xFD	; 253
 7da:	f9 01       	movw	r30, r18
 7dc:	20 81       	ld	r18, Z
 7de:	fc 01       	movw	r30, r24
 7e0:	20 83       	st	Z, r18
	TX_0.UDR_TAIL = MOD(TX_0.UDR_TAIL+1);
 7e2:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <__data_end+0x41>
 7e6:	8e 5f       	subi	r24, 0xFE	; 254
 7e8:	8f 73       	andi	r24, 0x3F	; 63
 7ea:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <__data_end+0x41>
	if(TX_0.UDR_TAIL == TX_0.UDR_HEAD)
 7ee:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <__data_end+0x41>
 7f2:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <__data_end+0x40>
 7f6:	98 17       	cp	r25, r24
 7f8:	49 f4       	brne	.+18     	; 0x80c <__vector_26+0x68>
	{
		UCSR0B &= ~(1<<UDRIE0);
 7fa:	81 ec       	ldi	r24, 0xC1	; 193
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	21 ec       	ldi	r18, 0xC1	; 193
 800:	30 e0       	ldi	r19, 0x00	; 0
 802:	f9 01       	movw	r30, r18
 804:	20 81       	ld	r18, Z
 806:	2f 7d       	andi	r18, 0xDF	; 223
 808:	fc 01       	movw	r30, r24
 80a:	20 83       	st	Z, r18
	}
}
 80c:	00 00       	nop
 80e:	df 91       	pop	r29
 810:	cf 91       	pop	r28
 812:	ff 91       	pop	r31
 814:	ef 91       	pop	r30
 816:	9f 91       	pop	r25
 818:	8f 91       	pop	r24
 81a:	3f 91       	pop	r19
 81c:	2f 91       	pop	r18
 81e:	0f 90       	pop	r0
 820:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 824:	0f 90       	pop	r0
 826:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 82a:	0f 90       	pop	r0
 82c:	1f 90       	pop	r1
 82e:	18 95       	reti

00000830 <main>:

#include <avr/io.h>
#include "usart.h"

int main()
{
 830:	ef 92       	push	r14
 832:	0f 93       	push	r16
 834:	cf 93       	push	r28
 836:	df 93       	push	r29
 838:	cd b7       	in	r28, 0x3d	; 61
 83a:	de b7       	in	r29, 0x3e	; 62
 83c:	64 97       	sbiw	r28, 0x14	; 20
 83e:	0f b6       	in	r0, 0x3f	; 63
 840:	f8 94       	cli
 842:	de bf       	out	0x3e, r29	; 62
 844:	0f be       	out	0x3f, r0	; 63
 846:	cd bf       	out	0x3d, r28	; 61
	char test[20];
	UART_ini(0,9600,7,0,1,1);
 848:	ee 24       	eor	r14, r14
 84a:	e3 94       	inc	r14
 84c:	01 e0       	ldi	r16, 0x01	; 1
 84e:	20 e0       	ldi	r18, 0x00	; 0
 850:	47 e0       	ldi	r20, 0x07	; 7
 852:	60 e8       	ldi	r22, 0x80	; 128
 854:	75 e2       	ldi	r23, 0x25	; 37
 856:	80 e0       	ldi	r24, 0x00	; 0
 858:	65 dc       	rcall	.-1846   	; 0x124 <UART_ini>
	UART_gotoxy(10,10);
 85a:	6a e0       	ldi	r22, 0x0A	; 10
 85c:	8a e0       	ldi	r24, 0x0A	; 10
 85e:	6a de       	rcall	.-812    	; 0x534 <UART_gotoxy>
	UART_setColor(Cyan);
 860:	84 e2       	ldi	r24, 0x24	; 36
	UART_clrscr();
 862:	13 de       	rcall	.-986    	; 0x48a <UART_setColor>
 864:	07 de       	rcall	.-1010   	; 0x474 <UART_clrscr>
	while(1)
	{
		if(UART_Available())
 866:	f6 dd       	rcall	.-1044   	; 0x454 <UART_Available>
 868:	88 23       	and	r24, r24
 86a:	e9 f3       	breq	.-6      	; 0x866 <main+0x36>
		{
			UART_gets(test);
 86c:	ce 01       	movw	r24, r28
 86e:	01 96       	adiw	r24, 0x01	; 1
 870:	b0 dd       	rcall	.-1184   	; 0x3d2 <UART_gets>
 872:	f9 cf       	rjmp	.-14     	; 0x866 <main+0x36>

00000874 <__divmodhi4>:
		}
	}
 874:	97 fb       	bst	r25, 7
 876:	07 2e       	mov	r0, r23
 878:	16 f4       	brtc	.+4      	; 0x87e <__divmodhi4+0xa>
 87a:	00 94       	com	r0
 87c:	06 d0       	rcall	.+12     	; 0x88a <__divmodhi4_neg1>
 87e:	77 fd       	sbrc	r23, 7
 880:	08 d0       	rcall	.+16     	; 0x892 <__divmodhi4_neg2>
 882:	2d d0       	rcall	.+90     	; 0x8de <__udivmodhi4>
 884:	07 fc       	sbrc	r0, 7
 886:	05 d0       	rcall	.+10     	; 0x892 <__divmodhi4_neg2>
 888:	3e f4       	brtc	.+14     	; 0x898 <__divmodhi4_exit>

0000088a <__divmodhi4_neg1>:
 88a:	90 95       	com	r25
 88c:	81 95       	neg	r24
 88e:	9f 4f       	sbci	r25, 0xFF	; 255
 890:	08 95       	ret

00000892 <__divmodhi4_neg2>:
 892:	70 95       	com	r23
 894:	61 95       	neg	r22
 896:	7f 4f       	sbci	r23, 0xFF	; 255

00000898 <__divmodhi4_exit>:
 898:	08 95       	ret

0000089a <__udivmodsi4>:
 89a:	a1 e2       	ldi	r26, 0x21	; 33
 89c:	1a 2e       	mov	r1, r26
 89e:	aa 1b       	sub	r26, r26
 8a0:	bb 1b       	sub	r27, r27
 8a2:	fd 01       	movw	r30, r26
 8a4:	0d c0       	rjmp	.+26     	; 0x8c0 <__udivmodsi4_ep>

000008a6 <__udivmodsi4_loop>:
 8a6:	aa 1f       	adc	r26, r26
 8a8:	bb 1f       	adc	r27, r27
 8aa:	ee 1f       	adc	r30, r30
 8ac:	ff 1f       	adc	r31, r31
 8ae:	a2 17       	cp	r26, r18
 8b0:	b3 07       	cpc	r27, r19
 8b2:	e4 07       	cpc	r30, r20
 8b4:	f5 07       	cpc	r31, r21
 8b6:	20 f0       	brcs	.+8      	; 0x8c0 <__udivmodsi4_ep>
 8b8:	a2 1b       	sub	r26, r18
 8ba:	b3 0b       	sbc	r27, r19
 8bc:	e4 0b       	sbc	r30, r20
 8be:	f5 0b       	sbc	r31, r21

000008c0 <__udivmodsi4_ep>:
 8c0:	66 1f       	adc	r22, r22
 8c2:	77 1f       	adc	r23, r23
 8c4:	88 1f       	adc	r24, r24
 8c6:	99 1f       	adc	r25, r25
 8c8:	1a 94       	dec	r1
 8ca:	69 f7       	brne	.-38     	; 0x8a6 <__udivmodsi4_loop>
 8cc:	60 95       	com	r22
 8ce:	70 95       	com	r23
 8d0:	80 95       	com	r24
 8d2:	90 95       	com	r25
 8d4:	9b 01       	movw	r18, r22
 8d6:	ac 01       	movw	r20, r24
 8d8:	bd 01       	movw	r22, r26
 8da:	cf 01       	movw	r24, r30
 8dc:	08 95       	ret

000008de <__udivmodhi4>:
 8de:	aa 1b       	sub	r26, r26
 8e0:	bb 1b       	sub	r27, r27
 8e2:	51 e1       	ldi	r21, 0x11	; 17
 8e4:	07 c0       	rjmp	.+14     	; 0x8f4 <__udivmodhi4_ep>

000008e6 <__udivmodhi4_loop>:
 8e6:	aa 1f       	adc	r26, r26
 8e8:	bb 1f       	adc	r27, r27
 8ea:	a6 17       	cp	r26, r22
 8ec:	b7 07       	cpc	r27, r23
 8ee:	10 f0       	brcs	.+4      	; 0x8f4 <__udivmodhi4_ep>
 8f0:	a6 1b       	sub	r26, r22
 8f2:	b7 0b       	sbc	r27, r23

000008f4 <__udivmodhi4_ep>:
 8f4:	88 1f       	adc	r24, r24
 8f6:	99 1f       	adc	r25, r25
 8f8:	5a 95       	dec	r21
 8fa:	a9 f7       	brne	.-22     	; 0x8e6 <__udivmodhi4_loop>
 8fc:	80 95       	com	r24
 8fe:	90 95       	com	r25
 900:	bc 01       	movw	r22, r24
 902:	cd 01       	movw	r24, r26
 904:	08 95       	ret

00000906 <strcat>:
 906:	fb 01       	movw	r30, r22
 908:	dc 01       	movw	r26, r24
 90a:	0d 90       	ld	r0, X+
 90c:	00 20       	and	r0, r0
 90e:	e9 f7       	brne	.-6      	; 0x90a <strcat+0x4>
 910:	11 97       	sbiw	r26, 0x01	; 1
 912:	01 90       	ld	r0, Z+
 914:	0d 92       	st	X+, r0
 916:	00 20       	and	r0, r0
 918:	e1 f7       	brne	.-8      	; 0x912 <strcat+0xc>
 91a:	08 95       	ret

0000091c <_exit>:
 91c:	f8 94       	cli

0000091e <__stop_program>:
 91e:	ff cf       	rjmp	.-2      	; 0x91e <__stop_program>
