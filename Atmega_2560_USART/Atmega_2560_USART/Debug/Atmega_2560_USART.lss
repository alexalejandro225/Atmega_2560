
Atmega_2560_USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000003ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000378  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000018c  00800200  00800200  000003ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000041c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001381  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d62  00000000  00000000  0000188d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000790  00000000  00000000  000025ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d8  00000000  00000000  00002d80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000710  00000000  00000000  00003058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c7d  00000000  00000000  00003768  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000043e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	82 c0       	rjmp	.+260    	; 0x16a <__vector_25>
  66:	00 00       	nop
  68:	a5 c0       	rjmp	.+330    	; 0x1b4 <__vector_26>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	c2 c0       	rjmp	.+388    	; 0x216 <__vector_36>
  92:	00 00       	nop
  94:	e5 c0       	rjmp	.+458    	; 0x260 <__vector_37>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	fa c0       	rjmp	.+500    	; 0x2c2 <__vector_51>
  ce:	00 00       	nop
  d0:	1d c1       	rjmp	.+570    	; 0x30c <__vector_52>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e7       	ldi	r30, 0x78	; 120
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 38       	cpi	r26, 0x8C	; 140
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	27 d1       	rcall	.+590    	; 0x36e <main>
 120:	29 c1       	rjmp	.+594    	; 0x374 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <UART_Available>:
	strcat(screen_x_y,aux_row);
	strcat(screen_x_y,";");
	strcat(screen_x_y,aux_col);
	strcat(screen_x_y,"H");
	UART_puts(com,screen_x_y);
}
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	69 f0       	breq	.+26     	; 0x142 <UART_Available+0x1e>
 128:	18 f0       	brcs	.+6      	; 0x130 <UART_Available+0xc>
 12a:	82 30       	cpi	r24, 0x02	; 2
 12c:	99 f0       	breq	.+38     	; 0x154 <UART_Available+0x30>
 12e:	1b c0       	rjmp	.+54     	; 0x166 <UART_Available+0x42>
 130:	20 91 48 03 	lds	r18, 0x0348	; 0x800348 <RX_0+0x40>
 134:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <RX_0+0x41>
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	29 13       	cpse	r18, r25
 13c:	15 c0       	rjmp	.+42     	; 0x168 <UART_Available+0x44>
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	08 95       	ret
 142:	20 91 82 02 	lds	r18, 0x0282	; 0x800282 <RX_1+0x40>
 146:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <RX_1+0x41>
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	29 13       	cpse	r18, r25
 14e:	0c c0       	rjmp	.+24     	; 0x168 <UART_Available+0x44>
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	08 95       	ret
 154:	20 91 8a 03 	lds	r18, 0x038A	; 0x80038a <RX_2+0x40>
 158:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <RX_2+0x41>
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	29 13       	cpse	r18, r25
 160:	03 c0       	rjmp	.+6      	; 0x168 <UART_Available+0x44>
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	08 95       	ret
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	08 95       	ret

0000016a <__vector_25>:



ISR(USART0_RX_vect)
{
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	0b b6       	in	r0, 0x3b	; 59
 176:	0f 92       	push	r0
 178:	8f 93       	push	r24
 17a:	af 93       	push	r26
 17c:	bf 93       	push	r27
 17e:	ef 93       	push	r30
 180:	ff 93       	push	r31
	RX_0.UDR_MEM[RX_0.UDR_HEAD] = UDR0;
 182:	a8 e4       	ldi	r26, 0x48	; 72
 184:	b3 e0       	ldi	r27, 0x03	; 3
 186:	ec 91       	ld	r30, X
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 18e:	e8 5f       	subi	r30, 0xF8	; 248
 190:	fc 4f       	sbci	r31, 0xFC	; 252
 192:	80 83       	st	Z, r24
	RX_0.UDR_HEAD = MOD(RX_0.UDR_HEAD+1);
 194:	8c 91       	ld	r24, X
 196:	8e 5f       	subi	r24, 0xFE	; 254
 198:	8f 73       	andi	r24, 0x3F	; 63
 19a:	8c 93       	st	X, r24
}
 19c:	ff 91       	pop	r31
 19e:	ef 91       	pop	r30
 1a0:	bf 91       	pop	r27
 1a2:	af 91       	pop	r26
 1a4:	8f 91       	pop	r24
 1a6:	0f 90       	pop	r0
 1a8:	0b be       	out	0x3b, r0	; 59
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <__vector_26>:

ISR(USART0_UDRE_vect)
{
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	0b b6       	in	r0, 0x3b	; 59
 1c0:	0f 92       	push	r0
 1c2:	8f 93       	push	r24
 1c4:	9f 93       	push	r25
 1c6:	af 93       	push	r26
 1c8:	bf 93       	push	r27
 1ca:	ef 93       	push	r30
 1cc:	ff 93       	push	r31
	UDR0 = TX_0.UDR_MEM[TX_0.UDR_TAIL];
 1ce:	a5 ec       	ldi	r26, 0xC5	; 197
 1d0:	b2 e0       	ldi	r27, 0x02	; 2
 1d2:	ec 91       	ld	r30, X
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	ec 57       	subi	r30, 0x7C	; 124
 1d8:	fd 4f       	sbci	r31, 0xFD	; 253
 1da:	80 81       	ld	r24, Z
 1dc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	TX_0.UDR_TAIL = MOD(TX_0.UDR_TAIL+1);
 1e0:	8c 91       	ld	r24, X
 1e2:	8e 5f       	subi	r24, 0xFE	; 254
 1e4:	8f 73       	andi	r24, 0x3F	; 63
 1e6:	8c 93       	st	X, r24
	if(TX_0.UDR_TAIL == TX_0.UDR_HEAD)
 1e8:	9c 91       	ld	r25, X
 1ea:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <TX_0+0x40>
 1ee:	98 13       	cpse	r25, r24
 1f0:	05 c0       	rjmp	.+10     	; 0x1fc <__vector_26+0x48>
	{
		UCSR0B &= ~(1<<UDRIE0);
 1f2:	e1 ec       	ldi	r30, 0xC1	; 193
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	8f 7d       	andi	r24, 0xDF	; 223
 1fa:	80 83       	st	Z, r24
	}
}
 1fc:	ff 91       	pop	r31
 1fe:	ef 91       	pop	r30
 200:	bf 91       	pop	r27
 202:	af 91       	pop	r26
 204:	9f 91       	pop	r25
 206:	8f 91       	pop	r24
 208:	0f 90       	pop	r0
 20a:	0b be       	out	0x3b, r0	; 59
 20c:	0f 90       	pop	r0
 20e:	0f be       	out	0x3f, r0	; 63
 210:	0f 90       	pop	r0
 212:	1f 90       	pop	r1
 214:	18 95       	reti

00000216 <__vector_36>:

ISR(USART1_RX_vect)
{
 216:	1f 92       	push	r1
 218:	0f 92       	push	r0
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	0f 92       	push	r0
 21e:	11 24       	eor	r1, r1
 220:	0b b6       	in	r0, 0x3b	; 59
 222:	0f 92       	push	r0
 224:	8f 93       	push	r24
 226:	af 93       	push	r26
 228:	bf 93       	push	r27
 22a:	ef 93       	push	r30
 22c:	ff 93       	push	r31
	RX_1.UDR_MEM[RX_1.UDR_HEAD] = UDR1;
 22e:	a2 e8       	ldi	r26, 0x82	; 130
 230:	b2 e0       	ldi	r27, 0x02	; 2
 232:	ec 91       	ld	r30, X
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 23a:	ee 5b       	subi	r30, 0xBE	; 190
 23c:	fd 4f       	sbci	r31, 0xFD	; 253
 23e:	80 83       	st	Z, r24
	RX_1.UDR_HEAD = MOD(RX_1.UDR_HEAD+1);
 240:	8c 91       	ld	r24, X
 242:	8e 5f       	subi	r24, 0xFE	; 254
 244:	8f 73       	andi	r24, 0x3F	; 63
 246:	8c 93       	st	X, r24
}
 248:	ff 91       	pop	r31
 24a:	ef 91       	pop	r30
 24c:	bf 91       	pop	r27
 24e:	af 91       	pop	r26
 250:	8f 91       	pop	r24
 252:	0f 90       	pop	r0
 254:	0b be       	out	0x3b, r0	; 59
 256:	0f 90       	pop	r0
 258:	0f be       	out	0x3f, r0	; 63
 25a:	0f 90       	pop	r0
 25c:	1f 90       	pop	r1
 25e:	18 95       	reti

00000260 <__vector_37>:

ISR(USART1_UDRE_vect)
{
 260:	1f 92       	push	r1
 262:	0f 92       	push	r0
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	0f 92       	push	r0
 268:	11 24       	eor	r1, r1
 26a:	0b b6       	in	r0, 0x3b	; 59
 26c:	0f 92       	push	r0
 26e:	8f 93       	push	r24
 270:	9f 93       	push	r25
 272:	af 93       	push	r26
 274:	bf 93       	push	r27
 276:	ef 93       	push	r30
 278:	ff 93       	push	r31
	UDR1 = TX_1.UDR_MEM[TX_1.UDR_TAIL];
 27a:	a7 e0       	ldi	r26, 0x07	; 7
 27c:	b3 e0       	ldi	r27, 0x03	; 3
 27e:	ec 91       	ld	r30, X
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	ea 53       	subi	r30, 0x3A	; 58
 284:	fd 4f       	sbci	r31, 0xFD	; 253
 286:	80 81       	ld	r24, Z
 288:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
	TX_1.UDR_TAIL = MOD(TX_1.UDR_TAIL+1);
 28c:	8c 91       	ld	r24, X
 28e:	8e 5f       	subi	r24, 0xFE	; 254
 290:	8f 73       	andi	r24, 0x3F	; 63
 292:	8c 93       	st	X, r24
	if(TX_1.UDR_TAIL == TX_1.UDR_HEAD)
 294:	9c 91       	ld	r25, X
 296:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <TX_1+0x40>
 29a:	98 13       	cpse	r25, r24
 29c:	05 c0       	rjmp	.+10     	; 0x2a8 <__vector_37+0x48>
	{
		UCSR1B &= ~(1<<UDRIE1);
 29e:	e9 ec       	ldi	r30, 0xC9	; 201
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	8f 7d       	andi	r24, 0xDF	; 223
 2a6:	80 83       	st	Z, r24
	}
}
 2a8:	ff 91       	pop	r31
 2aa:	ef 91       	pop	r30
 2ac:	bf 91       	pop	r27
 2ae:	af 91       	pop	r26
 2b0:	9f 91       	pop	r25
 2b2:	8f 91       	pop	r24
 2b4:	0f 90       	pop	r0
 2b6:	0b be       	out	0x3b, r0	; 59
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <__vector_51>:

ISR(USART2_RX_vect)
{
 2c2:	1f 92       	push	r1
 2c4:	0f 92       	push	r0
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	0f 92       	push	r0
 2ca:	11 24       	eor	r1, r1
 2cc:	0b b6       	in	r0, 0x3b	; 59
 2ce:	0f 92       	push	r0
 2d0:	8f 93       	push	r24
 2d2:	af 93       	push	r26
 2d4:	bf 93       	push	r27
 2d6:	ef 93       	push	r30
 2d8:	ff 93       	push	r31
	RX_2.UDR_MEM[RX_2.UDR_HEAD] = UDR2;
 2da:	aa e8       	ldi	r26, 0x8A	; 138
 2dc:	b3 e0       	ldi	r27, 0x03	; 3
 2de:	ec 91       	ld	r30, X
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 2e6:	e6 5b       	subi	r30, 0xB6	; 182
 2e8:	fc 4f       	sbci	r31, 0xFC	; 252
 2ea:	80 83       	st	Z, r24
	RX_2.UDR_HEAD = MOD(RX_2.UDR_HEAD+1);
 2ec:	8c 91       	ld	r24, X
 2ee:	8e 5f       	subi	r24, 0xFE	; 254
 2f0:	8f 73       	andi	r24, 0x3F	; 63
 2f2:	8c 93       	st	X, r24
}
 2f4:	ff 91       	pop	r31
 2f6:	ef 91       	pop	r30
 2f8:	bf 91       	pop	r27
 2fa:	af 91       	pop	r26
 2fc:	8f 91       	pop	r24
 2fe:	0f 90       	pop	r0
 300:	0b be       	out	0x3b, r0	; 59
 302:	0f 90       	pop	r0
 304:	0f be       	out	0x3f, r0	; 63
 306:	0f 90       	pop	r0
 308:	1f 90       	pop	r1
 30a:	18 95       	reti

0000030c <__vector_52>:

ISR(USART2_UDRE_vect)
{
 30c:	1f 92       	push	r1
 30e:	0f 92       	push	r0
 310:	0f b6       	in	r0, 0x3f	; 63
 312:	0f 92       	push	r0
 314:	11 24       	eor	r1, r1
 316:	0b b6       	in	r0, 0x3b	; 59
 318:	0f 92       	push	r0
 31a:	8f 93       	push	r24
 31c:	9f 93       	push	r25
 31e:	af 93       	push	r26
 320:	bf 93       	push	r27
 322:	ef 93       	push	r30
 324:	ff 93       	push	r31
	UDR2 = TX_2.UDR_MEM[TX_2.UDR_TAIL];
 326:	a1 e4       	ldi	r26, 0x41	; 65
 328:	b2 e0       	ldi	r27, 0x02	; 2
 32a:	ec 91       	ld	r30, X
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	e0 50       	subi	r30, 0x00	; 0
 330:	fe 4f       	sbci	r31, 0xFE	; 254
 332:	80 81       	ld	r24, Z
 334:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
	TX_2.UDR_TAIL = MOD(TX_2.UDR_TAIL+1);
 338:	8c 91       	ld	r24, X
 33a:	8e 5f       	subi	r24, 0xFE	; 254
 33c:	8f 73       	andi	r24, 0x3F	; 63
 33e:	8c 93       	st	X, r24
	if(TX_2.UDR_TAIL == TX_2.UDR_HEAD)
 340:	9c 91       	ld	r25, X
 342:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__DATA_REGION_ORIGIN__+0x40>
 346:	98 13       	cpse	r25, r24
 348:	05 c0       	rjmp	.+10     	; 0x354 <__vector_52+0x48>
	{
		UCSR2B &= ~(1<<UDRIE2);
 34a:	e1 ed       	ldi	r30, 0xD1	; 209
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	8f 7d       	andi	r24, 0xDF	; 223
 352:	80 83       	st	Z, r24
	}
}
 354:	ff 91       	pop	r31
 356:	ef 91       	pop	r30
 358:	bf 91       	pop	r27
 35a:	af 91       	pop	r26
 35c:	9f 91       	pop	r25
 35e:	8f 91       	pop	r24
 360:	0f 90       	pop	r0
 362:	0b be       	out	0x3b, r0	; 59
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0
 36a:	1f 90       	pop	r1
 36c:	18 95       	reti

0000036e <main>:
int main()
{
	
	while(1)
	{
		if (UART_Available(0))
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	d9 de       	rcall	.-590    	; 0x124 <UART_Available>
 372:	fd cf       	rjmp	.-6      	; 0x36e <main>

00000374 <_exit>:
 374:	f8 94       	cli

00000376 <__stop_program>:
 376:	ff cf       	rjmp	.-2      	; 0x376 <__stop_program>
