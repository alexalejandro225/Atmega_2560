
Atmega_2560_USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000300  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000084  00800200  00800200  00000374  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ee6  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cd1  00000000  00000000  00001332  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ad  00000000  00000000  00002003  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  000024b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000636  00000000  00000000  000025e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003cf  00000000  00000000  00002c16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002fe5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	c6 c0       	rjmp	.+396    	; 0x1f2 <__vector_25>
  66:	00 00       	nop
  68:	eb c0       	rjmp	.+470    	; 0x240 <__vector_26>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a4 38       	cpi	r26, 0x84	; 132
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	cd d0       	rcall	.+410    	; 0x2a0 <main>
 106:	fa c0       	rjmp	.+500    	; 0x2fc <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <UART_ini>:
	}
	else
	{
		return 1;
	}
}
 10a:	ef 92       	push	r14
 10c:	0f 93       	push	r16
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	c8 2f       	mov	r28, r24
 114:	d0 e0       	ldi	r29, 0x00	; 0
 116:	68 96       	adiw	r28, 0x18	; 24
 118:	cc 0f       	add	r28, r28
 11a:	dd 1f       	adc	r29, r29
 11c:	cc 0f       	add	r28, r28
 11e:	dd 1f       	adc	r29, r29
 120:	cc 0f       	add	r28, r28
 122:	dd 1f       	adc	r29, r29
 124:	01 11       	cpse	r16, r1
 126:	03 c0       	rjmp	.+6      	; 0x12e <UART_ini+0x24>
 128:	88 81       	ld	r24, Y
 12a:	88 83       	st	Y, r24
 12c:	03 c0       	rjmp	.+6      	; 0x134 <UART_ini+0x2a>
 12e:	88 81       	ld	r24, Y
 130:	82 60       	ori	r24, 0x02	; 2
 132:	88 83       	st	Y, r24
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	88 61       	ori	r24, 0x18	; 24
 138:	89 83       	std	Y+1, r24	; 0x01
 13a:	45 30       	cpi	r20, 0x05	; 5
 13c:	19 f4       	brne	.+6      	; 0x144 <UART_ini+0x3a>
 13e:	8a 81       	ldd	r24, Y+2	; 0x02
 140:	8a 83       	std	Y+2, r24	; 0x02
 142:	0b c0       	rjmp	.+22     	; 0x15a <UART_ini+0x50>
 144:	46 30       	cpi	r20, 0x06	; 6
 146:	21 f4       	brne	.+8      	; 0x150 <UART_ini+0x46>
 148:	8a 81       	ldd	r24, Y+2	; 0x02
 14a:	82 60       	ori	r24, 0x02	; 2
 14c:	8a 83       	std	Y+2, r24	; 0x02
 14e:	05 c0       	rjmp	.+10     	; 0x15a <UART_ini+0x50>
 150:	47 30       	cpi	r20, 0x07	; 7
 152:	19 f4       	brne	.+6      	; 0x15a <UART_ini+0x50>
 154:	8a 81       	ldd	r24, Y+2	; 0x02
 156:	84 60       	ori	r24, 0x04	; 4
 158:	8a 83       	std	Y+2, r24	; 0x02
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	e8 12       	cpse	r14, r24
 15e:	03 c0       	rjmp	.+6      	; 0x166 <UART_ini+0x5c>
 160:	8a 81       	ldd	r24, Y+2	; 0x02
 162:	8a 83       	std	Y+2, r24	; 0x02
 164:	06 c0       	rjmp	.+12     	; 0x172 <UART_ini+0x68>
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	e8 12       	cpse	r14, r24
 16a:	03 c0       	rjmp	.+6      	; 0x172 <UART_ini+0x68>
 16c:	8a 81       	ldd	r24, Y+2	; 0x02
 16e:	88 60       	ori	r24, 0x08	; 8
 170:	8a 83       	std	Y+2, r24	; 0x02
 172:	21 11       	cpse	r18, r1
 174:	03 c0       	rjmp	.+6      	; 0x17c <UART_ini+0x72>
 176:	8a 81       	ldd	r24, Y+2	; 0x02
 178:	8a 83       	std	Y+2, r24	; 0x02
 17a:	0b c0       	rjmp	.+22     	; 0x192 <UART_ini+0x88>
 17c:	21 30       	cpi	r18, 0x01	; 1
 17e:	21 f4       	brne	.+8      	; 0x188 <UART_ini+0x7e>
 180:	8a 81       	ldd	r24, Y+2	; 0x02
 182:	80 63       	ori	r24, 0x30	; 48
 184:	8a 83       	std	Y+2, r24	; 0x02
 186:	05 c0       	rjmp	.+10     	; 0x192 <UART_ini+0x88>
 188:	22 30       	cpi	r18, 0x02	; 2
 18a:	19 f4       	brne	.+6      	; 0x192 <UART_ini+0x88>
 18c:	8a 81       	ldd	r24, Y+2	; 0x02
 18e:	80 62       	ori	r24, 0x20	; 32
 190:	8a 83       	std	Y+2, r24	; 0x02
 192:	8a 81       	ldd	r24, Y+2	; 0x02
 194:	8a 83       	std	Y+2, r24	; 0x02
 196:	01 11       	cpse	r16, r1
 198:	0b c0       	rjmp	.+22     	; 0x1b0 <UART_ini+0xa6>
 19a:	9b 01       	movw	r18, r22
 19c:	40 e0       	ldi	r20, 0x00	; 0
 19e:	50 e0       	ldi	r21, 0x00	; 0
 1a0:	60 e4       	ldi	r22, 0x40	; 64
 1a2:	72 e4       	ldi	r23, 0x42	; 66
 1a4:	8f e0       	ldi	r24, 0x0F	; 15
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	87 d0       	rcall	.+270    	; 0x2b8 <__udivmodsi4>
 1aa:	21 50       	subi	r18, 0x01	; 1
 1ac:	2c 83       	std	Y+4, r18	; 0x04
 1ae:	0a c0       	rjmp	.+20     	; 0x1c4 <UART_ini+0xba>
 1b0:	9b 01       	movw	r18, r22
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	50 e0       	ldi	r21, 0x00	; 0
 1b6:	60 e8       	ldi	r22, 0x80	; 128
 1b8:	74 e8       	ldi	r23, 0x84	; 132
 1ba:	8e e1       	ldi	r24, 0x1E	; 30
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	7c d0       	rcall	.+248    	; 0x2b8 <__udivmodsi4>
 1c0:	21 50       	subi	r18, 0x01	; 1
 1c2:	2c 83       	std	Y+4, r18	; 0x04
 1c4:	78 94       	sei
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	0f 91       	pop	r16
 1cc:	ef 90       	pop	r14
 1ce:	08 95       	ret

000001d0 <UART_putchar>:
 1d0:	a2 e8       	ldi	r26, 0x82	; 130
 1d2:	b2 e0       	ldi	r27, 0x02	; 2
 1d4:	9c 91       	ld	r25, X
 1d6:	e9 2f       	mov	r30, r25
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	ee 5b       	subi	r30, 0xBE	; 190
 1dc:	fd 4f       	sbci	r31, 0xFD	; 253
 1de:	80 83       	st	Z, r24
 1e0:	9e 5f       	subi	r25, 0xFE	; 254
 1e2:	9f 73       	andi	r25, 0x3F	; 63
 1e4:	9c 93       	st	X, r25
 1e6:	e1 ec       	ldi	r30, 0xC1	; 193
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	80 62       	ori	r24, 0x20	; 32
 1ee:	80 83       	st	Z, r24
 1f0:	08 95       	ret

000001f2 <__vector_25>:

ISR(USART0_RX_vect)
{
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	0b b6       	in	r0, 0x3b	; 59
 1fe:	0f 92       	push	r0
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
 204:	af 93       	push	r26
 206:	bf 93       	push	r27
 208:	ef 93       	push	r30
 20a:	ff 93       	push	r31
	RX_0.UDR_MEM[RX_0.UDR_HEAD] = UDR0;
 20c:	a0 e4       	ldi	r26, 0x40	; 64
 20e:	b2 e0       	ldi	r27, 0x02	; 2
 210:	8c 91       	ld	r24, X
 212:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 216:	e8 2f       	mov	r30, r24
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	e0 50       	subi	r30, 0x00	; 0
 21c:	fe 4f       	sbci	r31, 0xFE	; 254
 21e:	90 83       	st	Z, r25
	RX_0.UDR_HEAD = MOD(RX_0.UDR_HEAD+1);
 220:	8e 5f       	subi	r24, 0xFE	; 254
 222:	8f 73       	andi	r24, 0x3F	; 63
 224:	8c 93       	st	X, r24
}
 226:	ff 91       	pop	r31
 228:	ef 91       	pop	r30
 22a:	bf 91       	pop	r27
 22c:	af 91       	pop	r26
 22e:	9f 91       	pop	r25
 230:	8f 91       	pop	r24
 232:	0f 90       	pop	r0
 234:	0b be       	out	0x3b, r0	; 59
 236:	0f 90       	pop	r0
 238:	0f be       	out	0x3f, r0	; 63
 23a:	0f 90       	pop	r0
 23c:	1f 90       	pop	r1
 23e:	18 95       	reti

00000240 <__vector_26>:

ISR(USART0_UDRE_vect)
{
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1
 24a:	0b b6       	in	r0, 0x3b	; 59
 24c:	0f 92       	push	r0
 24e:	8f 93       	push	r24
 250:	9f 93       	push	r25
 252:	af 93       	push	r26
 254:	bf 93       	push	r27
 256:	ef 93       	push	r30
 258:	ff 93       	push	r31
	UDR0 = TX_0.UDR_MEM[TX_0.UDR_TAIL];
 25a:	a3 e8       	ldi	r26, 0x83	; 131
 25c:	b2 e0       	ldi	r27, 0x02	; 2
 25e:	8c 91       	ld	r24, X
 260:	e8 2f       	mov	r30, r24
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	ee 5b       	subi	r30, 0xBE	; 190
 266:	fd 4f       	sbci	r31, 0xFD	; 253
 268:	90 81       	ld	r25, Z
 26a:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	TX_0.UDR_TAIL = MOD(TX_0.UDR_TAIL+1);
 26e:	8e 5f       	subi	r24, 0xFE	; 254
 270:	8f 73       	andi	r24, 0x3F	; 63
 272:	8c 93       	st	X, r24
	if(TX_0.UDR_TAIL == TX_0.UDR_HEAD)
 274:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <TX_0+0x40>
 278:	89 13       	cpse	r24, r25
 27a:	05 c0       	rjmp	.+10     	; 0x286 <__vector_26+0x46>
	{
		UCSR0B &= ~(1<<UDRIE0);
 27c:	e1 ec       	ldi	r30, 0xC1	; 193
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	8f 7d       	andi	r24, 0xDF	; 223
 284:	80 83       	st	Z, r24
	}
}
 286:	ff 91       	pop	r31
 288:	ef 91       	pop	r30
 28a:	bf 91       	pop	r27
 28c:	af 91       	pop	r26
 28e:	9f 91       	pop	r25
 290:	8f 91       	pop	r24
 292:	0f 90       	pop	r0
 294:	0b be       	out	0x3b, r0	; 59
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <main>:
#include <avr/io.h>
#include "usart.h"

int main(void)
{
	UART_ini(0,9600,7,0,0,1);
 2a0:	ee 24       	eor	r14, r14
 2a2:	e3 94       	inc	r14
 2a4:	00 e0       	ldi	r16, 0x00	; 0
 2a6:	20 e0       	ldi	r18, 0x00	; 0
 2a8:	47 e0       	ldi	r20, 0x07	; 7
 2aa:	60 e8       	ldi	r22, 0x80	; 128
 2ac:	75 e2       	ldi	r23, 0x25	; 37
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	2c df       	rcall	.-424    	; 0x10a <UART_ini>
    /* Replace with your application code */
    while (1) 
    {
			UART_putchar('1');
 2b2:	81 e3       	ldi	r24, 0x31	; 49
 2b4:	8d df       	rcall	.-230    	; 0x1d0 <UART_putchar>
 2b6:	fd cf       	rjmp	.-6      	; 0x2b2 <main+0x12>

000002b8 <__udivmodsi4>:
 2b8:	a1 e2       	ldi	r26, 0x21	; 33
 2ba:	1a 2e       	mov	r1, r26
 2bc:	aa 1b       	sub	r26, r26
 2be:	bb 1b       	sub	r27, r27
 2c0:	fd 01       	movw	r30, r26
 2c2:	0d c0       	rjmp	.+26     	; 0x2de <__udivmodsi4_ep>

000002c4 <__udivmodsi4_loop>:
 2c4:	aa 1f       	adc	r26, r26
 2c6:	bb 1f       	adc	r27, r27
 2c8:	ee 1f       	adc	r30, r30
 2ca:	ff 1f       	adc	r31, r31
 2cc:	a2 17       	cp	r26, r18
 2ce:	b3 07       	cpc	r27, r19
 2d0:	e4 07       	cpc	r30, r20
 2d2:	f5 07       	cpc	r31, r21
 2d4:	20 f0       	brcs	.+8      	; 0x2de <__udivmodsi4_ep>
 2d6:	a2 1b       	sub	r26, r18
 2d8:	b3 0b       	sbc	r27, r19
 2da:	e4 0b       	sbc	r30, r20
 2dc:	f5 0b       	sbc	r31, r21

000002de <__udivmodsi4_ep>:
 2de:	66 1f       	adc	r22, r22
 2e0:	77 1f       	adc	r23, r23
 2e2:	88 1f       	adc	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	1a 94       	dec	r1
 2e8:	69 f7       	brne	.-38     	; 0x2c4 <__udivmodsi4_loop>
 2ea:	60 95       	com	r22
 2ec:	70 95       	com	r23
 2ee:	80 95       	com	r24
 2f0:	90 95       	com	r25
 2f2:	9b 01       	movw	r18, r22
 2f4:	ac 01       	movw	r20, r24
 2f6:	bd 01       	movw	r22, r26
 2f8:	cf 01       	movw	r24, r30
 2fa:	08 95       	ret

000002fc <_exit>:
 2fc:	f8 94       	cli

000002fe <__stop_program>:
 2fe:	ff cf       	rjmp	.-2      	; 0x2fe <__stop_program>
