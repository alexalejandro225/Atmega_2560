
Atmega_2560_USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800200  0000090c  000009a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000090c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000030c  00800236  00800236  000009d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016e4  00000000  00000000  00000b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000df2  00000000  00000000  000021f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ec  00000000  00000000  00002fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000300  00000000  00000000  000038d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000071d  00000000  00000000  00003bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cd1  00000000  00000000  000042f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004fc2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	0e c3       	rjmp	.+1564   	; 0x682 <__vector_25>
  66:	00 00       	nop
  68:	31 c3       	rjmp	.+1634   	; 0x6cc <__vector_26>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	4e c3       	rjmp	.+1692   	; 0x72e <__vector_36>
  92:	00 00       	nop
  94:	71 c3       	rjmp	.+1762   	; 0x778 <__vector_37>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	86 c3       	rjmp	.+1804   	; 0x7da <__vector_51>
  ce:	00 00       	nop
  d0:	a9 c3       	rjmp	.+1874   	; 0x824 <__vector_52>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e0       	ldi	r30, 0x0C	; 12
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 33       	cpi	r26, 0x36	; 54
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	25 e0       	ldi	r18, 0x05	; 5
 110:	a6 e3       	ldi	r26, 0x36	; 54
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 34       	cpi	r26, 0x42	; 66
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	f3 c3       	rjmp	.+2022   	; 0x908 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:

#include <avr/io.h>
#include "USART.h"

int main()
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	a8 97       	sbiw	r28, 0x28	; 40
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
	char cad[40];
	uint16_t num;
	UART_ini(0,9600,7,0,0,1);
 138:	ee 24       	eor	r14, r14
 13a:	e3 94       	inc	r14
 13c:	00 e0       	ldi	r16, 0x00	; 0
 13e:	20 e0       	ldi	r18, 0x00	; 0
 140:	47 e0       	ldi	r20, 0x07	; 7
 142:	60 e8       	ldi	r22, 0x80	; 128
 144:	75 e2       	ldi	r23, 0x25	; 37
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	c6 d0       	rcall	.+396    	; 0x2d6 <UART_ini>
	
	
	while(1) {
		UART_getchar(0);
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	72 d1       	rcall	.+740    	; 0x432 <UART_getchar>
		UART_clrscr(0);
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	e8 d1       	rcall	.+976    	; 0x522 <UART_clrscr>
 152:	42 e0       	ldi	r20, 0x02	; 2
		UART_gotoxy(0,2,2);
 154:	62 e0       	ldi	r22, 0x02	; 2
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	30 d2       	rcall	.+1120   	; 0x5ba <UART_gotoxy>
		UART_setColor(0,Yellow); //Definirlo en UART.h
 15a:	61 e2       	ldi	r22, 0x21	; 33
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	e6 d1       	rcall	.+972    	; 0x52c <UART_setColor>
		UART_puts(0,"INTRODUCE UN NUMERO");
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	72 e0       	ldi	r23, 0x02	; 2
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	53 d1       	rcall	.+678    	; 0x40e <UART_puts>
		UART_gotoxy(0,22,2);
 168:	42 e0       	ldi	r20, 0x02	; 2
 16a:	66 e1       	ldi	r22, 0x16	; 22
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	25 d2       	rcall	.+1098   	; 0x5ba <UART_gotoxy>
		UART_setColor(0,Green); //Definirlo en UART.h
 170:	60 e2       	ldi	r22, 0x20	; 32
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	db d1       	rcall	.+950    	; 0x52c <UART_setColor>
		UART_gets(0,cad);
 176:	be 01       	movw	r22, r28
 178:	6f 5f       	subi	r22, 0xFF	; 255
 17a:	7f 4f       	sbci	r23, 0xFF	; 255
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	9d d1       	rcall	.+826    	; 0x4ba <UART_gets>
		num = myAtoi(cad);
 180:	ce 01       	movw	r24, r28
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	2a d0       	rcall	.+84     	; 0x1da <myAtoi>
 186:	8c 01       	movw	r16, r24
		myItoa(num,16,cad);
 188:	ae 01       	movw	r20, r28
 18a:	4f 5f       	subi	r20, 0xFF	; 255
 18c:	5f 4f       	sbci	r21, 0xFF	; 255
 18e:	60 e1       	ldi	r22, 0x10	; 16
 190:	49 d0       	rcall	.+146    	; 0x224 <myItoa>
		UART_gotoxy(0,5,3);
 192:	43 e0       	ldi	r20, 0x03	; 3
 194:	65 e0       	ldi	r22, 0x05	; 5
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	10 d2       	rcall	.+1056   	; 0x5ba <UART_gotoxy>
		UART_setColor(0,Blue); //Definirlo en UART.h
 19a:	62 e2       	ldi	r22, 0x22	; 34
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	c6 d1       	rcall	.+908    	; 0x52c <UART_setColor>
 1a0:	64 e1       	ldi	r22, 0x14	; 20
		UART_puts(0,"HEX: ");
 1a2:	72 e0       	ldi	r23, 0x02	; 2
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	33 d1       	rcall	.+614    	; 0x40e <UART_puts>
 1a8:	be 01       	movw	r22, r28
		UART_puts(0,cad);
 1aa:	6f 5f       	subi	r22, 0xFF	; 255
 1ac:	7f 4f       	sbci	r23, 0xFF	; 255
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	2e d1       	rcall	.+604    	; 0x40e <UART_puts>
		myItoa(num,2,cad);
 1b2:	ae 01       	movw	r20, r28
 1b4:	4f 5f       	subi	r20, 0xFF	; 255
 1b6:	5f 4f       	sbci	r21, 0xFF	; 255
 1b8:	62 e0       	ldi	r22, 0x02	; 2
 1ba:	c8 01       	movw	r24, r16
 1bc:	33 d0       	rcall	.+102    	; 0x224 <myItoa>
		UART_gotoxy(0,5,4);
 1be:	44 e0       	ldi	r20, 0x04	; 4
 1c0:	65 e0       	ldi	r22, 0x05	; 5
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	fa d1       	rcall	.+1012   	; 0x5ba <UART_gotoxy>
 1c6:	6a e1       	ldi	r22, 0x1A	; 26
		UART_puts(0,"BIN: ");
 1c8:	72 e0       	ldi	r23, 0x02	; 2
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	20 d1       	rcall	.+576    	; 0x40e <UART_puts>
 1ce:	be 01       	movw	r22, r28
 1d0:	6f 5f       	subi	r22, 0xFF	; 255
		UART_puts(0,cad);
 1d2:	7f 4f       	sbci	r23, 0xFF	; 255
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	1b d1       	rcall	.+566    	; 0x40e <UART_puts>
 1d8:	b8 cf       	rjmp	.-144    	; 0x14a <main+0x26>

000001da <myAtoi>:
 1da:	fc 01       	movw	r30, r24
 1dc:	90 81       	ld	r25, Z
 1de:	8f ec       	ldi	r24, 0xCF	; 207
			return 1;
		}
		break;
	}
	return 1;
}
 1e0:	89 0f       	add	r24, r25
 1e2:	89 30       	cpi	r24, 0x09	; 9
 1e4:	e0 f4       	brcc	.+56     	; 0x21e <myAtoi+0x44>
 1e6:	31 96       	adiw	r30, 0x01	; 1
 1e8:	20 e0       	ldi	r18, 0x00	; 0
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	a9 01       	movw	r20, r18
 1ee:	44 0f       	add	r20, r20
 1f0:	55 1f       	adc	r21, r21
 1f2:	22 0f       	add	r18, r18
 1f4:	33 1f       	adc	r19, r19
 1f6:	22 0f       	add	r18, r18
 1f8:	33 1f       	adc	r19, r19
 1fa:	22 0f       	add	r18, r18
 1fc:	33 1f       	adc	r19, r19
 1fe:	24 0f       	add	r18, r20
 200:	35 1f       	adc	r19, r21
 202:	29 0f       	add	r18, r25
 204:	31 1d       	adc	r19, r1
 206:	97 fd       	sbrc	r25, 7
 208:	3a 95       	dec	r19
 20a:	20 53       	subi	r18, 0x30	; 48
 20c:	31 09       	sbc	r19, r1
 20e:	91 91       	ld	r25, Z+
 210:	80 ed       	ldi	r24, 0xD0	; 208
 212:	89 0f       	add	r24, r25
 214:	8a 30       	cpi	r24, 0x0A	; 10
 216:	50 f3       	brcs	.-44     	; 0x1ec <myAtoi+0x12>
 218:	82 2f       	mov	r24, r18
 21a:	93 2f       	mov	r25, r19
 21c:	08 95       	ret
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	08 95       	ret

00000224 <myItoa>:
 224:	cf 92       	push	r12
 226:	df 92       	push	r13
 228:	ef 92       	push	r14
 22a:	ff 92       	push	r15
 22c:	0f 93       	push	r16
 22e:	1f 93       	push	r17
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	cd b7       	in	r28, 0x3d	; 61
 236:	de b7       	in	r29, 0x3e	; 62
 238:	64 97       	sbiw	r28, 0x14	; 20
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	f8 94       	cli
 23e:	de bf       	out	0x3e, r29	; 62
 240:	0f be       	out	0x3f, r0	; 63
 242:	cd bf       	out	0x3d, r28	; 61
 244:	8a 01       	movw	r16, r20
 246:	00 97       	sbiw	r24, 0x00	; 0
 248:	99 f1       	breq	.+102    	; 0x2b0 <myItoa+0x8c>
 24a:	20 e0       	ldi	r18, 0x00	; 0
 24c:	c6 2e       	mov	r12, r22
 24e:	d1 2c       	mov	r13, r1
 250:	ee 24       	eor	r14, r14
 252:	e3 94       	inc	r14
 254:	f1 2c       	mov	r15, r1
 256:	ec 0e       	add	r14, r28
 258:	fd 1e       	adc	r15, r29
 25a:	e2 0e       	add	r14, r18
 25c:	f1 1c       	adc	r15, r1
 25e:	b6 01       	movw	r22, r12
 260:	12 d3       	rcall	.+1572   	; 0x886 <__udivmodhi4>
 262:	fc 01       	movw	r30, r24
 264:	eb 5d       	subi	r30, 0xDB	; 219
 266:	fd 4f       	sbci	r31, 0xFD	; 253
 268:	80 81       	ld	r24, Z
 26a:	f7 01       	movw	r30, r14
 26c:	80 83       	st	Z, r24
 26e:	86 2f       	mov	r24, r22
 270:	97 2f       	mov	r25, r23
 272:	2f 5f       	subi	r18, 0xFF	; 255
 274:	00 97       	sbiw	r24, 0x00	; 0
 276:	61 f7       	brne	.-40     	; 0x250 <myItoa+0x2c>
 278:	fe 01       	movw	r30, r28
 27a:	e2 0f       	add	r30, r18
 27c:	f1 1d       	adc	r31, r1
 27e:	11 82       	std	Z+1, r1	; 0x01
 280:	22 23       	and	r18, r18
 282:	89 f0       	breq	.+34     	; 0x2a6 <myItoa+0x82>
 284:	82 2f       	mov	r24, r18
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	81 50       	subi	r24, 0x01	; 1
 28a:	f8 01       	movw	r30, r16
 28c:	e9 0f       	add	r30, r25
 28e:	f1 1d       	adc	r31, r1
 290:	a1 e0       	ldi	r26, 0x01	; 1
 292:	b0 e0       	ldi	r27, 0x00	; 0
 294:	ac 0f       	add	r26, r28
 296:	bd 1f       	adc	r27, r29
 298:	a8 0f       	add	r26, r24
 29a:	b1 1d       	adc	r27, r1
 29c:	3c 91       	ld	r19, X
 29e:	30 83       	st	Z, r19
 2a0:	9f 5f       	subi	r25, 0xFF	; 255
 2a2:	81 11       	cpse	r24, r1
 2a4:	f1 cf       	rjmp	.-30     	; 0x288 <myItoa+0x64>
 2a6:	f8 01       	movw	r30, r16
 2a8:	e2 0f       	add	r30, r18
 2aa:	f1 1d       	adc	r31, r1
 2ac:	10 82       	st	Z, r1
 2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <myItoa+0x94>
 2b0:	80 e3       	ldi	r24, 0x30	; 48
 2b2:	fa 01       	movw	r30, r20
 2b4:	80 83       	st	Z, r24
 2b6:	11 82       	std	Z+1, r1	; 0x01
 2b8:	64 96       	adiw	r28, 0x14	; 20
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	f8 94       	cli
 2be:	de bf       	out	0x3e, r29	; 62
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	cd bf       	out	0x3d, r28	; 61
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	1f 91       	pop	r17
 2ca:	0f 91       	pop	r16
 2cc:	ff 90       	pop	r15
 2ce:	ef 90       	pop	r14
 2d0:	df 90       	pop	r13
 2d2:	cf 90       	pop	r12
 2d4:	08 95       	ret

000002d6 <UART_ini>:
 2d6:	ef 92       	push	r14
 2d8:	0f 93       	push	r16
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	c8 2f       	mov	r28, r24
 2e0:	d0 e0       	ldi	r29, 0x00	; 0
 2e2:	68 96       	adiw	r28, 0x18	; 24
 2e4:	cc 0f       	add	r28, r28
 2e6:	dd 1f       	adc	r29, r29
 2e8:	cc 0f       	add	r28, r28
 2ea:	dd 1f       	adc	r29, r29
 2ec:	cc 0f       	add	r28, r28
 2ee:	dd 1f       	adc	r29, r29
 2f0:	01 11       	cpse	r16, r1
 2f2:	03 c0       	rjmp	.+6      	; 0x2fa <UART_ini+0x24>
 2f4:	88 81       	ld	r24, Y
 2f6:	88 83       	st	Y, r24
 2f8:	03 c0       	rjmp	.+6      	; 0x300 <UART_ini+0x2a>
 2fa:	88 81       	ld	r24, Y
 2fc:	82 60       	ori	r24, 0x02	; 2
 2fe:	88 83       	st	Y, r24
 300:	89 81       	ldd	r24, Y+1	; 0x01
 302:	88 69       	ori	r24, 0x98	; 152
 304:	89 83       	std	Y+1, r24	; 0x01
 306:	45 30       	cpi	r20, 0x05	; 5
 308:	19 f4       	brne	.+6      	; 0x310 <UART_ini+0x3a>
 30a:	8a 81       	ldd	r24, Y+2	; 0x02
 30c:	8a 83       	std	Y+2, r24	; 0x02
 30e:	0b c0       	rjmp	.+22     	; 0x326 <UART_ini+0x50>
 310:	46 30       	cpi	r20, 0x06	; 6
 312:	21 f4       	brne	.+8      	; 0x31c <UART_ini+0x46>
 314:	8a 81       	ldd	r24, Y+2	; 0x02
 316:	82 60       	ori	r24, 0x02	; 2
 318:	8a 83       	std	Y+2, r24	; 0x02
 31a:	05 c0       	rjmp	.+10     	; 0x326 <UART_ini+0x50>
 31c:	47 30       	cpi	r20, 0x07	; 7
 31e:	19 f4       	brne	.+6      	; 0x326 <UART_ini+0x50>
 320:	8a 81       	ldd	r24, Y+2	; 0x02
 322:	84 60       	ori	r24, 0x04	; 4
 324:	8a 83       	std	Y+2, r24	; 0x02
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	e8 12       	cpse	r14, r24
 32a:	03 c0       	rjmp	.+6      	; 0x332 <UART_ini+0x5c>
 32c:	8a 81       	ldd	r24, Y+2	; 0x02
 32e:	8a 83       	std	Y+2, r24	; 0x02
 330:	06 c0       	rjmp	.+12     	; 0x33e <UART_ini+0x68>
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	e8 12       	cpse	r14, r24
 336:	03 c0       	rjmp	.+6      	; 0x33e <UART_ini+0x68>
 338:	8a 81       	ldd	r24, Y+2	; 0x02
 33a:	88 60       	ori	r24, 0x08	; 8
 33c:	8a 83       	std	Y+2, r24	; 0x02
 33e:	21 11       	cpse	r18, r1
 340:	03 c0       	rjmp	.+6      	; 0x348 <UART_ini+0x72>
 342:	8a 81       	ldd	r24, Y+2	; 0x02
 344:	8a 83       	std	Y+2, r24	; 0x02
 346:	0b c0       	rjmp	.+22     	; 0x35e <UART_ini+0x88>
 348:	21 30       	cpi	r18, 0x01	; 1
 34a:	21 f4       	brne	.+8      	; 0x354 <UART_ini+0x7e>
 34c:	8a 81       	ldd	r24, Y+2	; 0x02
 34e:	80 63       	ori	r24, 0x30	; 48
 350:	8a 83       	std	Y+2, r24	; 0x02
 352:	05 c0       	rjmp	.+10     	; 0x35e <UART_ini+0x88>
 354:	22 30       	cpi	r18, 0x02	; 2
 356:	19 f4       	brne	.+6      	; 0x35e <UART_ini+0x88>
 358:	8a 81       	ldd	r24, Y+2	; 0x02
 35a:	80 62       	ori	r24, 0x20	; 32
 35c:	8a 83       	std	Y+2, r24	; 0x02
 35e:	8a 81       	ldd	r24, Y+2	; 0x02
 360:	8a 83       	std	Y+2, r24	; 0x02
 362:	01 11       	cpse	r16, r1
 364:	0b c0       	rjmp	.+22     	; 0x37c <UART_ini+0xa6>
 366:	9b 01       	movw	r18, r22
 368:	40 e0       	ldi	r20, 0x00	; 0
 36a:	50 e0       	ldi	r21, 0x00	; 0
 36c:	60 e4       	ldi	r22, 0x40	; 64
 36e:	72 e4       	ldi	r23, 0x42	; 66
 370:	8f e0       	ldi	r24, 0x0F	; 15
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	9c d2       	rcall	.+1336   	; 0x8ae <__udivmodsi4>
 376:	21 50       	subi	r18, 0x01	; 1
 378:	2c 83       	std	Y+4, r18	; 0x04
 37a:	0a c0       	rjmp	.+20     	; 0x390 <UART_ini+0xba>
 37c:	9b 01       	movw	r18, r22
 37e:	40 e0       	ldi	r20, 0x00	; 0
 380:	50 e0       	ldi	r21, 0x00	; 0
 382:	60 e8       	ldi	r22, 0x80	; 128
 384:	74 e8       	ldi	r23, 0x84	; 132
 386:	8e e1       	ldi	r24, 0x1E	; 30
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	91 d2       	rcall	.+1314   	; 0x8ae <__udivmodsi4>
 38c:	21 50       	subi	r18, 0x01	; 1
 38e:	2c 83       	std	Y+4, r18	; 0x04
 390:	78 94       	sei
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	0f 91       	pop	r16
 398:	ef 90       	pop	r14
 39a:	08 95       	ret

0000039c <UART_putchar>:
 39c:	81 30       	cpi	r24, 0x01	; 1
 39e:	a9 f0       	breq	.+42     	; 0x3ca <UART_putchar+0x2e>
 3a0:	18 f0       	brcs	.+6      	; 0x3a8 <UART_putchar+0xc>
 3a2:	82 30       	cpi	r24, 0x02	; 2
 3a4:	19 f1       	breq	.+70     	; 0x3ec <UART_putchar+0x50>
 3a6:	08 95       	ret
 3a8:	aa eb       	ldi	r26, 0xBA	; 186
 3aa:	b3 e0       	ldi	r27, 0x03	; 3
 3ac:	ec 91       	ld	r30, X
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	e6 5c       	subi	r30, 0xC6	; 198
 3b2:	fc 4f       	sbci	r31, 0xFC	; 252
 3b4:	60 83       	st	Z, r22
 3b6:	8c 91       	ld	r24, X
 3b8:	8e 5f       	subi	r24, 0xFE	; 254
 3ba:	8f 77       	andi	r24, 0x7F	; 127
 3bc:	8c 93       	st	X, r24
 3be:	e1 ec       	ldi	r30, 0xC1	; 193
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	80 81       	ld	r24, Z
 3c4:	80 62       	ori	r24, 0x20	; 32
 3c6:	80 83       	st	Z, r24
 3c8:	08 95       	ret
 3ca:	ac e3       	ldi	r26, 0x3C	; 60
 3cc:	b4 e0       	ldi	r27, 0x04	; 4
 3ce:	ec 91       	ld	r30, X
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	e4 54       	subi	r30, 0x44	; 68
 3d4:	fc 4f       	sbci	r31, 0xFC	; 252
 3d6:	60 83       	st	Z, r22
 3d8:	8c 91       	ld	r24, X
 3da:	8e 5f       	subi	r24, 0xFE	; 254
 3dc:	8f 77       	andi	r24, 0x7F	; 127
 3de:	8c 93       	st	X, r24
 3e0:	e9 ec       	ldi	r30, 0xC9	; 201
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	80 62       	ori	r24, 0x20	; 32
 3e8:	80 83       	st	Z, r24
 3ea:	08 95       	ret
 3ec:	a6 eb       	ldi	r26, 0xB6	; 182
 3ee:	b2 e0       	ldi	r27, 0x02	; 2
 3f0:	ec 91       	ld	r30, X
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	ea 5c       	subi	r30, 0xCA	; 202
 3f6:	fd 4f       	sbci	r31, 0xFD	; 253
 3f8:	60 83       	st	Z, r22
 3fa:	8c 91       	ld	r24, X
 3fc:	8e 5f       	subi	r24, 0xFE	; 254
 3fe:	8f 77       	andi	r24, 0x7F	; 127
 400:	8c 93       	st	X, r24
 402:	e1 ed       	ldi	r30, 0xD1	; 209
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	80 62       	ori	r24, 0x20	; 32
 40a:	80 83       	st	Z, r24
 40c:	08 95       	ret

0000040e <UART_puts>:
 40e:	1f 93       	push	r17
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
 414:	eb 01       	movw	r28, r22
 416:	68 81       	ld	r22, Y
 418:	66 23       	and	r22, r22
 41a:	39 f0       	breq	.+14     	; 0x42a <UART_puts+0x1c>
 41c:	18 2f       	mov	r17, r24
 41e:	21 96       	adiw	r28, 0x01	; 1
 420:	81 2f       	mov	r24, r17
 422:	bc df       	rcall	.-136    	; 0x39c <UART_putchar>
 424:	69 91       	ld	r22, Y+
 426:	61 11       	cpse	r22, r1
 428:	fb cf       	rjmp	.-10     	; 0x420 <UART_puts+0x12>
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	1f 91       	pop	r17
 430:	08 95       	ret

00000432 <UART_getchar>:
 432:	81 30       	cpi	r24, 0x01	; 1
 434:	c1 f0       	breq	.+48     	; 0x466 <UART_getchar+0x34>
 436:	18 f0       	brcs	.+6      	; 0x43e <UART_getchar+0xc>
 438:	82 30       	cpi	r24, 0x02	; 2
 43a:	49 f1       	breq	.+82     	; 0x48e <UART_getchar+0x5c>
 43c:	3c c0       	rjmp	.+120    	; 0x4b6 <UART_getchar+0x84>
 43e:	ae eb       	ldi	r26, 0xBE	; 190
 440:	b4 e0       	ldi	r27, 0x04	; 4
 442:	ef eb       	ldi	r30, 0xBF	; 191
 444:	f4 e0       	ldi	r31, 0x04	; 4
 446:	9c 91       	ld	r25, X
 448:	80 81       	ld	r24, Z
 44a:	98 17       	cp	r25, r24
 44c:	e1 f3       	breq	.-8      	; 0x446 <UART_getchar+0x14>
 44e:	af eb       	ldi	r26, 0xBF	; 191
 450:	b4 e0       	ldi	r27, 0x04	; 4
 452:	ec 91       	ld	r30, X
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	e2 5c       	subi	r30, 0xC2	; 194
 458:	fb 4f       	sbci	r31, 0xFB	; 251
 45a:	80 81       	ld	r24, Z
 45c:	9c 91       	ld	r25, X
 45e:	9e 5f       	subi	r25, 0xFE	; 254
 460:	9f 77       	andi	r25, 0x7F	; 127
 462:	9c 93       	st	X, r25
 464:	08 95       	ret
 466:	a8 e3       	ldi	r26, 0x38	; 56
 468:	b3 e0       	ldi	r27, 0x03	; 3
 46a:	e9 e3       	ldi	r30, 0x39	; 57
 46c:	f3 e0       	ldi	r31, 0x03	; 3
 46e:	9c 91       	ld	r25, X
 470:	80 81       	ld	r24, Z
 472:	98 17       	cp	r25, r24
 474:	e1 f3       	breq	.-8      	; 0x46e <UART_getchar+0x3c>
 476:	a9 e3       	ldi	r26, 0x39	; 57
 478:	b3 e0       	ldi	r27, 0x03	; 3
 47a:	ec 91       	ld	r30, X
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	e8 54       	subi	r30, 0x48	; 72
 480:	fd 4f       	sbci	r31, 0xFD	; 253
 482:	80 81       	ld	r24, Z
 484:	9c 91       	ld	r25, X
 486:	9e 5f       	subi	r25, 0xFE	; 254
 488:	9f 77       	andi	r25, 0x7F	; 127
 48a:	9c 93       	st	X, r25
 48c:	08 95       	ret
 48e:	a0 e4       	ldi	r26, 0x40	; 64
 490:	b5 e0       	ldi	r27, 0x05	; 5
 492:	e1 e4       	ldi	r30, 0x41	; 65
 494:	f5 e0       	ldi	r31, 0x05	; 5
 496:	9c 91       	ld	r25, X
 498:	80 81       	ld	r24, Z
 49a:	98 17       	cp	r25, r24
 49c:	e1 f3       	breq	.-8      	; 0x496 <UART_getchar+0x64>
 49e:	a1 e4       	ldi	r26, 0x41	; 65
 4a0:	b5 e0       	ldi	r27, 0x05	; 5
 4a2:	ec 91       	ld	r30, X
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	e0 54       	subi	r30, 0x40	; 64
 4a8:	fb 4f       	sbci	r31, 0xFB	; 251
 4aa:	80 81       	ld	r24, Z
 4ac:	9c 91       	ld	r25, X
 4ae:	9e 5f       	subi	r25, 0xFE	; 254
 4b0:	9f 77       	andi	r25, 0x7F	; 127
 4b2:	9c 93       	st	X, r25
 4b4:	08 95       	ret
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	08 95       	ret

000004ba <UART_gets>:
 4ba:	ef 92       	push	r14
 4bc:	ff 92       	push	r15
 4be:	1f 93       	push	r17
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
 4c4:	18 2f       	mov	r17, r24
 4c6:	7b 01       	movw	r14, r22
 4c8:	d0 e0       	ldi	r29, 0x00	; 0
 4ca:	81 2f       	mov	r24, r17
 4cc:	b2 df       	rcall	.-156    	; 0x432 <UART_getchar>
 4ce:	c8 2f       	mov	r28, r24
 4d0:	88 30       	cpi	r24, 0x08	; 8
 4d2:	f1 f4       	brne	.+60     	; 0x510 <UART_gets+0x56>
 4d4:	dd 23       	and	r29, r29
 4d6:	c9 f3       	breq	.-14     	; 0x4ca <UART_gets+0x10>
 4d8:	d1 50       	subi	r29, 0x01	; 1
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	e8 1a       	sub	r14, r24
 4de:	f1 08       	sbc	r15, r1
 4e0:	68 e0       	ldi	r22, 0x08	; 8
 4e2:	81 2f       	mov	r24, r17
 4e4:	5b df       	rcall	.-330    	; 0x39c <UART_putchar>
 4e6:	60 e2       	ldi	r22, 0x20	; 32
 4e8:	81 2f       	mov	r24, r17
 4ea:	58 df       	rcall	.-336    	; 0x39c <UART_putchar>
 4ec:	68 e0       	ldi	r22, 0x08	; 8
 4ee:	81 2f       	mov	r24, r17
 4f0:	55 df       	rcall	.-342    	; 0x39c <UART_putchar>
 4f2:	eb cf       	rjmp	.-42     	; 0x4ca <UART_gets+0x10>
 4f4:	6c 2f       	mov	r22, r28
 4f6:	81 2f       	mov	r24, r17
 4f8:	51 df       	rcall	.-350    	; 0x39c <UART_putchar>
 4fa:	f7 01       	movw	r30, r14
 4fc:	c0 83       	st	Z, r28
 4fe:	df 5f       	subi	r29, 0xFF	; 255
 500:	c7 01       	movw	r24, r14
 502:	01 96       	adiw	r24, 0x01	; 1
 504:	7c 01       	movw	r14, r24
 506:	cd 30       	cpi	r28, 0x0D	; 13
 508:	01 f7       	brne	.-64     	; 0x4ca <UART_gets+0x10>
 50a:	f7 01       	movw	r30, r14
 50c:	10 82       	st	Z, r1
 50e:	03 c0       	rjmp	.+6      	; 0x516 <UART_gets+0x5c>
 510:	d4 31       	cpi	r29, 0x14	; 20
 512:	c8 f7       	brcc	.-14     	; 0x506 <UART_gets+0x4c>
 514:	ef cf       	rjmp	.-34     	; 0x4f4 <UART_gets+0x3a>
 516:	df 91       	pop	r29
 518:	cf 91       	pop	r28
 51a:	1f 91       	pop	r17
 51c:	ff 90       	pop	r15
 51e:	ef 90       	pop	r14
 520:	08 95       	ret

00000522 <UART_clrscr>:

void UART_clrscr(uint8_t com)
{
	UART_puts(0,"\e[2J");
 522:	60 e2       	ldi	r22, 0x20	; 32
 524:	72 e0       	ldi	r23, 0x02	; 2
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	72 cf       	rjmp	.-284    	; 0x40e <UART_puts>
 52a:	08 95       	ret

0000052c <UART_setColor>:
}

void UART_setColor(uint8_t com, uint8_t color)
{
 52c:	ff 92       	push	r15
 52e:	0f 93       	push	r16
 530:	1f 93       	push	r17
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
 536:	cd b7       	in	r28, 0x3d	; 61
 538:	de b7       	in	r29, 0x3e	; 62
 53a:	2d 97       	sbiw	r28, 0x0d	; 13
 53c:	0f b6       	in	r0, 0x3f	; 63
 53e:	f8 94       	cli
 540:	de bf       	out	0x3e, r29	; 62
 542:	0f be       	out	0x3f, r0	; 63
 544:	cd bf       	out	0x3d, r28	; 61
 546:	f8 2e       	mov	r15, r24
 548:	86 2f       	mov	r24, r22
	char aux_color_screen[3]={0};
 54a:	19 82       	std	Y+1, r1	; 0x01
 54c:	1a 82       	std	Y+2, r1	; 0x02
 54e:	1b 82       	std	Y+3, r1	; 0x03
	char set_screen[10]={0};
 550:	8e 01       	movw	r16, r28
 552:	0c 5f       	subi	r16, 0xFC	; 252
 554:	1f 4f       	sbci	r17, 0xFF	; 255
 556:	9a e0       	ldi	r25, 0x0A	; 10
 558:	f8 01       	movw	r30, r16
 55a:	11 92       	st	Z+, r1
 55c:	9a 95       	dec	r25
 55e:	e9 f7       	brne	.-6      	; 0x55a <UART_setColor+0x2e>
	
	myItoa(color,10,aux_color_screen);
 560:	ae 01       	movw	r20, r28
 562:	4f 5f       	subi	r20, 0xFF	; 255
 564:	5f 4f       	sbci	r21, 0xFF	; 255
 566:	6a e0       	ldi	r22, 0x0A	; 10
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	5c de       	rcall	.-840    	; 0x224 <myItoa>
	strcat(set_screen,"\e[");
 56c:	f8 01       	movw	r30, r16
 56e:	01 90       	ld	r0, Z+
 570:	00 20       	and	r0, r0
 572:	e9 f7       	brne	.-6      	; 0x56e <UART_setColor+0x42>
 574:	31 97       	sbiw	r30, 0x01	; 1
 576:	8b e1       	ldi	r24, 0x1B	; 27
 578:	9b e5       	ldi	r25, 0x5B	; 91
 57a:	91 83       	std	Z+1, r25	; 0x01
 57c:	80 83       	st	Z, r24
 57e:	12 82       	std	Z+2, r1	; 0x02
	strcat(set_screen,aux_color_screen);
 580:	be 01       	movw	r22, r28
 582:	6f 5f       	subi	r22, 0xFF	; 255
 584:	7f 4f       	sbci	r23, 0xFF	; 255
 586:	c8 01       	movw	r24, r16
 588:	b4 d1       	rcall	.+872    	; 0x8f2 <strcat>
	strcat(set_screen,"m");
 58a:	f8 01       	movw	r30, r16
 58c:	01 90       	ld	r0, Z+
 58e:	00 20       	and	r0, r0
 590:	e9 f7       	brne	.-6      	; 0x58c <UART_setColor+0x60>
 592:	31 97       	sbiw	r30, 0x01	; 1
 594:	8d e6       	ldi	r24, 0x6D	; 109
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	91 83       	std	Z+1, r25	; 0x01
 59a:	80 83       	st	Z, r24
	
	UART_puts(com,set_screen);
 59c:	b8 01       	movw	r22, r16
 59e:	8f 2d       	mov	r24, r15
 5a0:	36 df       	rcall	.-404    	; 0x40e <UART_puts>
}
 5a2:	2d 96       	adiw	r28, 0x0d	; 13
 5a4:	0f b6       	in	r0, 0x3f	; 63
 5a6:	f8 94       	cli
 5a8:	de bf       	out	0x3e, r29	; 62
 5aa:	0f be       	out	0x3f, r0	; 63
 5ac:	cd bf       	out	0x3d, r28	; 61
 5ae:	df 91       	pop	r29
 5b0:	cf 91       	pop	r28
 5b2:	1f 91       	pop	r17
 5b4:	0f 91       	pop	r16
 5b6:	ff 90       	pop	r15
 5b8:	08 95       	ret

000005ba <UART_gotoxy>:

void UART_gotoxy(uint8_t com, uint8_t x, uint8_t y)
{
 5ba:	ef 92       	push	r14
 5bc:	ff 92       	push	r15
 5be:	0f 93       	push	r16
 5c0:	1f 93       	push	r17
 5c2:	cf 93       	push	r28
 5c4:	df 93       	push	r29
 5c6:	cd b7       	in	r28, 0x3d	; 61
 5c8:	de b7       	in	r29, 0x3e	; 62
 5ca:	67 97       	sbiw	r28, 0x17	; 23
 5cc:	0f b6       	in	r0, 0x3f	; 63
 5ce:	f8 94       	cli
 5d0:	de bf       	out	0x3e, r29	; 62
 5d2:	0f be       	out	0x3f, r0	; 63
 5d4:	cd bf       	out	0x3d, r28	; 61
 5d6:	f8 2e       	mov	r15, r24
 5d8:	86 2f       	mov	r24, r22
 5da:	e4 2e       	mov	r14, r20
	char aux_row[4]={0};
 5dc:	19 82       	std	Y+1, r1	; 0x01
 5de:	1a 82       	std	Y+2, r1	; 0x02
 5e0:	1b 82       	std	Y+3, r1	; 0x03
 5e2:	1c 82       	std	Y+4, r1	; 0x04
	char aux_col[4]={0};
 5e4:	1d 82       	std	Y+5, r1	; 0x05
 5e6:	1e 82       	std	Y+6, r1	; 0x06
 5e8:	1f 82       	std	Y+7, r1	; 0x07
 5ea:	18 86       	std	Y+8, r1	; 0x08
	char screen_x_y[15]={0};
 5ec:	8e 01       	movw	r16, r28
 5ee:	07 5f       	subi	r16, 0xF7	; 247
 5f0:	1f 4f       	sbci	r17, 0xFF	; 255
 5f2:	9f e0       	ldi	r25, 0x0F	; 15
 5f4:	f8 01       	movw	r30, r16
 5f6:	11 92       	st	Z+, r1
 5f8:	9a 95       	dec	r25
 5fa:	e9 f7       	brne	.-6      	; 0x5f6 <UART_gotoxy+0x3c>
	
	myItoa(x,10,aux_col);
 5fc:	ae 01       	movw	r20, r28
 5fe:	4b 5f       	subi	r20, 0xFB	; 251
 600:	5f 4f       	sbci	r21, 0xFF	; 255
 602:	6a e0       	ldi	r22, 0x0A	; 10
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	0e de       	rcall	.-996    	; 0x224 <myItoa>
	myItoa(y,10,aux_row);
 608:	ae 01       	movw	r20, r28
 60a:	4f 5f       	subi	r20, 0xFF	; 255
 60c:	5f 4f       	sbci	r21, 0xFF	; 255
 60e:	6a e0       	ldi	r22, 0x0A	; 10
 610:	8e 2d       	mov	r24, r14
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	07 de       	rcall	.-1010   	; 0x224 <myItoa>
	strcat(screen_x_y,"\e[");
 616:	f8 01       	movw	r30, r16
 618:	01 90       	ld	r0, Z+
 61a:	00 20       	and	r0, r0
 61c:	e9 f7       	brne	.-6      	; 0x618 <UART_gotoxy+0x5e>
 61e:	31 97       	sbiw	r30, 0x01	; 1
 620:	8b e1       	ldi	r24, 0x1B	; 27
 622:	9b e5       	ldi	r25, 0x5B	; 91
 624:	91 83       	std	Z+1, r25	; 0x01
 626:	80 83       	st	Z, r24
 628:	12 82       	std	Z+2, r1	; 0x02
	strcat(screen_x_y,aux_row);
 62a:	be 01       	movw	r22, r28
 62c:	6f 5f       	subi	r22, 0xFF	; 255
 62e:	7f 4f       	sbci	r23, 0xFF	; 255
 630:	c8 01       	movw	r24, r16
 632:	5f d1       	rcall	.+702    	; 0x8f2 <strcat>
	strcat(screen_x_y,";");
 634:	f8 01       	movw	r30, r16
 636:	01 90       	ld	r0, Z+
 638:	00 20       	and	r0, r0
 63a:	e9 f7       	brne	.-6      	; 0x636 <UART_gotoxy+0x7c>
 63c:	31 97       	sbiw	r30, 0x01	; 1
 63e:	8b e3       	ldi	r24, 0x3B	; 59
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	91 83       	std	Z+1, r25	; 0x01
 644:	80 83       	st	Z, r24
	strcat(screen_x_y,aux_col);
 646:	be 01       	movw	r22, r28
 648:	6b 5f       	subi	r22, 0xFB	; 251
 64a:	7f 4f       	sbci	r23, 0xFF	; 255
 64c:	c8 01       	movw	r24, r16
 64e:	51 d1       	rcall	.+674    	; 0x8f2 <strcat>
	strcat(screen_x_y,"H");
 650:	f8 01       	movw	r30, r16
 652:	01 90       	ld	r0, Z+
 654:	00 20       	and	r0, r0
 656:	e9 f7       	brne	.-6      	; 0x652 <UART_gotoxy+0x98>
 658:	31 97       	sbiw	r30, 0x01	; 1
 65a:	88 e4       	ldi	r24, 0x48	; 72
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	91 83       	std	Z+1, r25	; 0x01
	UART_puts(com,screen_x_y);
 660:	80 83       	st	Z, r24
 662:	b8 01       	movw	r22, r16
 664:	8f 2d       	mov	r24, r15
 666:	d3 de       	rcall	.-602    	; 0x40e <UART_puts>
}
 668:	67 96       	adiw	r28, 0x17	; 23
 66a:	0f b6       	in	r0, 0x3f	; 63
 66c:	f8 94       	cli
 66e:	de bf       	out	0x3e, r29	; 62
 670:	0f be       	out	0x3f, r0	; 63
 672:	cd bf       	out	0x3d, r28	; 61
 674:	df 91       	pop	r29
 676:	cf 91       	pop	r28
 678:	1f 91       	pop	r17
 67a:	0f 91       	pop	r16
 67c:	ff 90       	pop	r15
 67e:	ef 90       	pop	r14
 680:	08 95       	ret

00000682 <__vector_25>:



ISR(USART0_RX_vect)
{
 682:	1f 92       	push	r1
 684:	0f 92       	push	r0
 686:	0f b6       	in	r0, 0x3f	; 63
 688:	0f 92       	push	r0
 68a:	11 24       	eor	r1, r1
 68c:	0b b6       	in	r0, 0x3b	; 59
 68e:	0f 92       	push	r0
 690:	8f 93       	push	r24
 692:	af 93       	push	r26
 694:	bf 93       	push	r27
 696:	ef 93       	push	r30
 698:	ff 93       	push	r31
	RX_0.UDR_MEM[RX_0.UDR_HEAD] = UDR0;
 69a:	ae eb       	ldi	r26, 0xBE	; 190
 69c:	b4 e0       	ldi	r27, 0x04	; 4
 69e:	ec 91       	ld	r30, X
 6a0:	f0 e0       	ldi	r31, 0x00	; 0
 6a2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 6a6:	e2 5c       	subi	r30, 0xC2	; 194
 6a8:	fb 4f       	sbci	r31, 0xFB	; 251
 6aa:	80 83       	st	Z, r24
	RX_0.UDR_HEAD = MOD(RX_0.UDR_HEAD+1);
 6ac:	8c 91       	ld	r24, X
 6ae:	8e 5f       	subi	r24, 0xFE	; 254
 6b0:	8f 77       	andi	r24, 0x7F	; 127
 6b2:	8c 93       	st	X, r24
}
 6b4:	ff 91       	pop	r31
 6b6:	ef 91       	pop	r30
 6b8:	bf 91       	pop	r27
 6ba:	af 91       	pop	r26
 6bc:	8f 91       	pop	r24
 6be:	0f 90       	pop	r0
 6c0:	0b be       	out	0x3b, r0	; 59
 6c2:	0f 90       	pop	r0
 6c4:	0f be       	out	0x3f, r0	; 63
 6c6:	0f 90       	pop	r0
 6c8:	1f 90       	pop	r1
 6ca:	18 95       	reti

000006cc <__vector_26>:

ISR(USART0_UDRE_vect)
{
 6cc:	1f 92       	push	r1
 6ce:	0f 92       	push	r0
 6d0:	0f b6       	in	r0, 0x3f	; 63
 6d2:	0f 92       	push	r0
 6d4:	11 24       	eor	r1, r1
 6d6:	0b b6       	in	r0, 0x3b	; 59
 6d8:	0f 92       	push	r0
 6da:	8f 93       	push	r24
 6dc:	9f 93       	push	r25
 6de:	af 93       	push	r26
 6e0:	bf 93       	push	r27
 6e2:	ef 93       	push	r30
 6e4:	ff 93       	push	r31
	UDR0 = TX_0.UDR_MEM[TX_0.UDR_TAIL];
 6e6:	ab eb       	ldi	r26, 0xBB	; 187
 6e8:	b3 e0       	ldi	r27, 0x03	; 3
 6ea:	ec 91       	ld	r30, X
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	e6 5c       	subi	r30, 0xC6	; 198
 6f0:	fc 4f       	sbci	r31, 0xFC	; 252
 6f2:	80 81       	ld	r24, Z
 6f4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	TX_0.UDR_TAIL = MOD(TX_0.UDR_TAIL+1);
 6f8:	8c 91       	ld	r24, X
 6fa:	8e 5f       	subi	r24, 0xFE	; 254
 6fc:	8f 77       	andi	r24, 0x7F	; 127
 6fe:	8c 93       	st	X, r24
	if(TX_0.UDR_TAIL == TX_0.UDR_HEAD)
 700:	9c 91       	ld	r25, X
 702:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <TX_0+0x80>
 706:	98 13       	cpse	r25, r24
 708:	05 c0       	rjmp	.+10     	; 0x714 <__vector_26+0x48>
	{
		UCSR0B &= ~(1<<UDRIE0);
 70a:	e1 ec       	ldi	r30, 0xC1	; 193
 70c:	f0 e0       	ldi	r31, 0x00	; 0
 70e:	80 81       	ld	r24, Z
 710:	8f 7d       	andi	r24, 0xDF	; 223
 712:	80 83       	st	Z, r24
	}
}
 714:	ff 91       	pop	r31
 716:	ef 91       	pop	r30
 718:	bf 91       	pop	r27
 71a:	af 91       	pop	r26
 71c:	9f 91       	pop	r25
 71e:	8f 91       	pop	r24
 720:	0f 90       	pop	r0
 722:	0b be       	out	0x3b, r0	; 59
 724:	0f 90       	pop	r0
 726:	0f be       	out	0x3f, r0	; 63
 728:	0f 90       	pop	r0
 72a:	1f 90       	pop	r1
 72c:	18 95       	reti

0000072e <__vector_36>:

ISR(USART1_RX_vect)
{
 72e:	1f 92       	push	r1
 730:	0f 92       	push	r0
 732:	0f b6       	in	r0, 0x3f	; 63
 734:	0f 92       	push	r0
 736:	11 24       	eor	r1, r1
 738:	0b b6       	in	r0, 0x3b	; 59
 73a:	0f 92       	push	r0
 73c:	8f 93       	push	r24
 73e:	af 93       	push	r26
 740:	bf 93       	push	r27
 742:	ef 93       	push	r30
 744:	ff 93       	push	r31
	RX_1.UDR_MEM[RX_1.UDR_HEAD] = UDR1;
 746:	a8 e3       	ldi	r26, 0x38	; 56
 748:	b3 e0       	ldi	r27, 0x03	; 3
 74a:	ec 91       	ld	r30, X
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 752:	e8 54       	subi	r30, 0x48	; 72
 754:	fd 4f       	sbci	r31, 0xFD	; 253
 756:	80 83       	st	Z, r24
	RX_1.UDR_HEAD = MOD(RX_1.UDR_HEAD+1);
 758:	8c 91       	ld	r24, X
 75a:	8e 5f       	subi	r24, 0xFE	; 254
 75c:	8f 77       	andi	r24, 0x7F	; 127
 75e:	8c 93       	st	X, r24
}
 760:	ff 91       	pop	r31
 762:	ef 91       	pop	r30
 764:	bf 91       	pop	r27
 766:	af 91       	pop	r26
 768:	8f 91       	pop	r24
 76a:	0f 90       	pop	r0
 76c:	0b be       	out	0x3b, r0	; 59
 76e:	0f 90       	pop	r0
 770:	0f be       	out	0x3f, r0	; 63
 772:	0f 90       	pop	r0
 774:	1f 90       	pop	r1
 776:	18 95       	reti

00000778 <__vector_37>:

ISR(USART1_UDRE_vect)
{
 778:	1f 92       	push	r1
 77a:	0f 92       	push	r0
 77c:	0f b6       	in	r0, 0x3f	; 63
 77e:	0f 92       	push	r0
 780:	11 24       	eor	r1, r1
 782:	0b b6       	in	r0, 0x3b	; 59
 784:	0f 92       	push	r0
 786:	8f 93       	push	r24
 788:	9f 93       	push	r25
 78a:	af 93       	push	r26
 78c:	bf 93       	push	r27
 78e:	ef 93       	push	r30
 790:	ff 93       	push	r31
	UDR1 = TX_1.UDR_MEM[TX_1.UDR_TAIL];
 792:	ad e3       	ldi	r26, 0x3D	; 61
 794:	b4 e0       	ldi	r27, 0x04	; 4
 796:	ec 91       	ld	r30, X
 798:	f0 e0       	ldi	r31, 0x00	; 0
 79a:	e4 54       	subi	r30, 0x44	; 68
 79c:	fc 4f       	sbci	r31, 0xFC	; 252
 79e:	80 81       	ld	r24, Z
 7a0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
	TX_1.UDR_TAIL = MOD(TX_1.UDR_TAIL+1);
 7a4:	8c 91       	ld	r24, X
 7a6:	8e 5f       	subi	r24, 0xFE	; 254
 7a8:	8f 77       	andi	r24, 0x7F	; 127
 7aa:	8c 93       	st	X, r24
	if(TX_1.UDR_TAIL == TX_1.UDR_HEAD)
 7ac:	9c 91       	ld	r25, X
 7ae:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <TX_1+0x80>
 7b2:	98 13       	cpse	r25, r24
 7b4:	05 c0       	rjmp	.+10     	; 0x7c0 <__vector_37+0x48>
	{
		UCSR1B &= ~(1<<UDRIE1);
 7b6:	e9 ec       	ldi	r30, 0xC9	; 201
 7b8:	f0 e0       	ldi	r31, 0x00	; 0
 7ba:	80 81       	ld	r24, Z
 7bc:	8f 7d       	andi	r24, 0xDF	; 223
 7be:	80 83       	st	Z, r24
	}
}
 7c0:	ff 91       	pop	r31
 7c2:	ef 91       	pop	r30
 7c4:	bf 91       	pop	r27
 7c6:	af 91       	pop	r26
 7c8:	9f 91       	pop	r25
 7ca:	8f 91       	pop	r24
 7cc:	0f 90       	pop	r0
 7ce:	0b be       	out	0x3b, r0	; 59
 7d0:	0f 90       	pop	r0
 7d2:	0f be       	out	0x3f, r0	; 63
 7d4:	0f 90       	pop	r0
 7d6:	1f 90       	pop	r1
 7d8:	18 95       	reti

000007da <__vector_51>:

ISR(USART2_RX_vect)
{
 7da:	1f 92       	push	r1
 7dc:	0f 92       	push	r0
 7de:	0f b6       	in	r0, 0x3f	; 63
 7e0:	0f 92       	push	r0
 7e2:	11 24       	eor	r1, r1
 7e4:	0b b6       	in	r0, 0x3b	; 59
 7e6:	0f 92       	push	r0
 7e8:	8f 93       	push	r24
 7ea:	af 93       	push	r26
 7ec:	bf 93       	push	r27
 7ee:	ef 93       	push	r30
 7f0:	ff 93       	push	r31
	RX_2.UDR_MEM[RX_2.UDR_HEAD] = UDR2;
 7f2:	a0 e4       	ldi	r26, 0x40	; 64
 7f4:	b5 e0       	ldi	r27, 0x05	; 5
 7f6:	ec 91       	ld	r30, X
 7f8:	f0 e0       	ldi	r31, 0x00	; 0
 7fa:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 7fe:	e0 54       	subi	r30, 0x40	; 64
 800:	fb 4f       	sbci	r31, 0xFB	; 251
 802:	80 83       	st	Z, r24
	RX_2.UDR_HEAD = MOD(RX_2.UDR_HEAD+1);
 804:	8c 91       	ld	r24, X
 806:	8e 5f       	subi	r24, 0xFE	; 254
 808:	8f 77       	andi	r24, 0x7F	; 127
 80a:	8c 93       	st	X, r24
}
 80c:	ff 91       	pop	r31
 80e:	ef 91       	pop	r30
 810:	bf 91       	pop	r27
 812:	af 91       	pop	r26
 814:	8f 91       	pop	r24
 816:	0f 90       	pop	r0
 818:	0b be       	out	0x3b, r0	; 59
 81a:	0f 90       	pop	r0
 81c:	0f be       	out	0x3f, r0	; 63
 81e:	0f 90       	pop	r0
 820:	1f 90       	pop	r1
 822:	18 95       	reti

00000824 <__vector_52>:

ISR(USART2_UDRE_vect)
{
 824:	1f 92       	push	r1
 826:	0f 92       	push	r0
 828:	0f b6       	in	r0, 0x3f	; 63
 82a:	0f 92       	push	r0
 82c:	11 24       	eor	r1, r1
 82e:	0b b6       	in	r0, 0x3b	; 59
 830:	0f 92       	push	r0
 832:	8f 93       	push	r24
 834:	9f 93       	push	r25
 836:	af 93       	push	r26
 838:	bf 93       	push	r27
 83a:	ef 93       	push	r30
 83c:	ff 93       	push	r31
	UDR2 = TX_2.UDR_MEM[TX_2.UDR_TAIL];
 83e:	a7 eb       	ldi	r26, 0xB7	; 183
 840:	b2 e0       	ldi	r27, 0x02	; 2
 842:	ec 91       	ld	r30, X
 844:	f0 e0       	ldi	r31, 0x00	; 0
 846:	ea 5c       	subi	r30, 0xCA	; 202
 848:	fd 4f       	sbci	r31, 0xFD	; 253
 84a:	80 81       	ld	r24, Z
 84c:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
	TX_2.UDR_TAIL = MOD(TX_2.UDR_TAIL+1);
 850:	8c 91       	ld	r24, X
 852:	8e 5f       	subi	r24, 0xFE	; 254
 854:	8f 77       	andi	r24, 0x7F	; 127
 856:	8c 93       	st	X, r24
	if(TX_2.UDR_TAIL == TX_2.UDR_HEAD)
 858:	9c 91       	ld	r25, X
 85a:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <__data_end+0x80>
 85e:	98 13       	cpse	r25, r24
 860:	05 c0       	rjmp	.+10     	; 0x86c <__vector_52+0x48>
	{
		UCSR2B &= ~(1<<UDRIE2);
 862:	e1 ed       	ldi	r30, 0xD1	; 209
 864:	f0 e0       	ldi	r31, 0x00	; 0
 866:	80 81       	ld	r24, Z
 868:	8f 7d       	andi	r24, 0xDF	; 223
 86a:	80 83       	st	Z, r24
	}
}
 86c:	ff 91       	pop	r31
 86e:	ef 91       	pop	r30
 870:	bf 91       	pop	r27
 872:	af 91       	pop	r26
 874:	9f 91       	pop	r25
 876:	8f 91       	pop	r24
 878:	0f 90       	pop	r0
 87a:	0b be       	out	0x3b, r0	; 59
 87c:	0f 90       	pop	r0
 87e:	0f be       	out	0x3f, r0	; 63
 880:	0f 90       	pop	r0
 882:	1f 90       	pop	r1
 884:	18 95       	reti

00000886 <__udivmodhi4>:
 886:	aa 1b       	sub	r26, r26
 888:	bb 1b       	sub	r27, r27
 88a:	51 e1       	ldi	r21, 0x11	; 17
 88c:	07 c0       	rjmp	.+14     	; 0x89c <__udivmodhi4_ep>

0000088e <__udivmodhi4_loop>:
 88e:	aa 1f       	adc	r26, r26
 890:	bb 1f       	adc	r27, r27
 892:	a6 17       	cp	r26, r22
 894:	b7 07       	cpc	r27, r23
 896:	10 f0       	brcs	.+4      	; 0x89c <__udivmodhi4_ep>
 898:	a6 1b       	sub	r26, r22
 89a:	b7 0b       	sbc	r27, r23

0000089c <__udivmodhi4_ep>:
 89c:	88 1f       	adc	r24, r24
 89e:	99 1f       	adc	r25, r25
 8a0:	5a 95       	dec	r21
 8a2:	a9 f7       	brne	.-22     	; 0x88e <__udivmodhi4_loop>
 8a4:	80 95       	com	r24
 8a6:	90 95       	com	r25
 8a8:	bc 01       	movw	r22, r24
 8aa:	cd 01       	movw	r24, r26
 8ac:	08 95       	ret

000008ae <__udivmodsi4>:
 8ae:	a1 e2       	ldi	r26, 0x21	; 33
 8b0:	1a 2e       	mov	r1, r26
 8b2:	aa 1b       	sub	r26, r26
 8b4:	bb 1b       	sub	r27, r27
 8b6:	fd 01       	movw	r30, r26
 8b8:	0d c0       	rjmp	.+26     	; 0x8d4 <__udivmodsi4_ep>

000008ba <__udivmodsi4_loop>:
 8ba:	aa 1f       	adc	r26, r26
 8bc:	bb 1f       	adc	r27, r27
 8be:	ee 1f       	adc	r30, r30
 8c0:	ff 1f       	adc	r31, r31
 8c2:	a2 17       	cp	r26, r18
 8c4:	b3 07       	cpc	r27, r19
 8c6:	e4 07       	cpc	r30, r20
 8c8:	f5 07       	cpc	r31, r21
 8ca:	20 f0       	brcs	.+8      	; 0x8d4 <__udivmodsi4_ep>
 8cc:	a2 1b       	sub	r26, r18
 8ce:	b3 0b       	sbc	r27, r19
 8d0:	e4 0b       	sbc	r30, r20
 8d2:	f5 0b       	sbc	r31, r21

000008d4 <__udivmodsi4_ep>:
 8d4:	66 1f       	adc	r22, r22
 8d6:	77 1f       	adc	r23, r23
 8d8:	88 1f       	adc	r24, r24
 8da:	99 1f       	adc	r25, r25
 8dc:	1a 94       	dec	r1
 8de:	69 f7       	brne	.-38     	; 0x8ba <__udivmodsi4_loop>
 8e0:	60 95       	com	r22
 8e2:	70 95       	com	r23
 8e4:	80 95       	com	r24
 8e6:	90 95       	com	r25
 8e8:	9b 01       	movw	r18, r22
 8ea:	ac 01       	movw	r20, r24
 8ec:	bd 01       	movw	r22, r26
 8ee:	cf 01       	movw	r24, r30
 8f0:	08 95       	ret

000008f2 <strcat>:
 8f2:	fb 01       	movw	r30, r22
 8f4:	dc 01       	movw	r26, r24
 8f6:	0d 90       	ld	r0, X+
 8f8:	00 20       	and	r0, r0
 8fa:	e9 f7       	brne	.-6      	; 0x8f6 <strcat+0x4>
 8fc:	11 97       	sbiw	r26, 0x01	; 1
 8fe:	01 90       	ld	r0, Z+
 900:	0d 92       	st	X+, r0
 902:	00 20       	and	r0, r0
 904:	e1 f7       	brne	.-8      	; 0x8fe <strcat+0xc>
 906:	08 95       	ret

00000908 <_exit>:
 908:	f8 94       	cli

0000090a <__stop_program>:
 90a:	ff cf       	rjmp	.-2      	; 0x90a <__stop_program>
