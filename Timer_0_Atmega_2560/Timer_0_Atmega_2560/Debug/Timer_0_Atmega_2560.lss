
Timer_0_Atmega_2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000001fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000188  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800200  00800200  000001fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d54  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c1d  00000000  00000000  00001010  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000369  00000000  00000000  00001c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00001f98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000585  00000000  00000000  0000201c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000056  00000000  00000000  000025a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000025f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	6b c0       	rjmp	.+214    	; 0x134 <__vector_23>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a3 30       	cpi	r26, 0x03	; 3
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	02 d0       	rcall	.+4      	; 0x10a <main>
 106:	3e c0       	rjmp	.+124    	; 0x184 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <main>:
#include <avr/io.h>
#include "Timer_0.h"

int main(void)
{
	Timer0_Ini();
 10a:	02 d0       	rcall	.+4      	; 0x110 <Timer0_Ini>
	
	while(1)
	{
		if( Timer0_SecFlag() ){ /* ¿ha pasado 1 Segundo? */
 10c:	0b d0       	rcall	.+22     	; 0x124 <Timer0_SecFlag>
 10e:	fe cf       	rjmp	.-4      	; 0x10c <main+0x2>

00000110 <Timer0_Ini>:
 110:	86 e0       	ldi	r24, 0x06	; 6
#include <inttypes.h>

static volatile uint8_t SecFlag;

void Timer0_Ini ( void ){
	TCNT0=0x06; /* Inicializar valor para el timer0 */
 112:	86 bd       	out	0x26, r24	; 38
	TCCR0A=0x00; /* inicializa timer0 en modo 0 (normal) */
 114:	14 bc       	out	0x24, r1	; 36
	/* Inicializar con fuente de osc. Int. */
	TCCR0B=0x03; /* con Prescalador 64 */
 116:	83 e0       	ldi	r24, 0x03	; 3
 118:	85 bd       	out	0x25, r24	; 37
	TIMSK0=0x01; /* habilita interrupcion del Timer0 */
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
	sei(); /* habilita interrupciones (global) */
 120:	78 94       	sei
 122:	08 95       	ret

00000124 <Timer0_SecFlag>:
}

uint8_t Timer0_SecFlag ( void ){

	if( SecFlag ){
 124:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <SecFlag>
 128:	88 23       	and	r24, r24
 12a:	19 f0       	breq	.+6      	; 0x132 <Timer0_SecFlag+0xe>
		SecFlag=0;
 12c:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <SecFlag>
		return 1;
 130:	81 e0       	ldi	r24, 0x01	; 1
	}
	else{
		return 0;
	}
}
 132:	08 95       	ret

00000134 <__vector_23>:

ISR (TIMER0_OVF_vect){ /* TIMER0_OVF_vect */
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	2f 93       	push	r18
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
	static uint16_t mSecCnt;
	TCNT0+=0x06; /* reinicializar Timer0 sin perder conteo */
 144:	86 b5       	in	r24, 0x26	; 38
 146:	8a 5f       	subi	r24, 0xFA	; 250
 148:	86 bd       	out	0x26, r24	; 38
	mSecCnt++; /* Incrementa contador de milisegundos */
 14a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 14e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 152:	01 96       	adiw	r24, 0x01	; 1
	if( mSecCnt==1000 ){
 154:	88 3e       	cpi	r24, 0xE8	; 232
 156:	23 e0       	ldi	r18, 0x03	; 3
 158:	92 07       	cpc	r25, r18
 15a:	29 f0       	breq	.+10     	; 0x166 <__vector_23+0x32>
}

ISR (TIMER0_OVF_vect){ /* TIMER0_OVF_vect */
	static uint16_t mSecCnt;
	TCNT0+=0x06; /* reinicializar Timer0 sin perder conteo */
	mSecCnt++; /* Incrementa contador de milisegundos */
 15c:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 160:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 164:	07 c0       	rjmp	.+14     	; 0x174 <__vector_23+0x40>
	if( mSecCnt==1000 ){
		mSecCnt=0;
 166:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 16a:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
		SecFlag=1; /* Bandera de Segundos */
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <SecFlag>
	}
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	2f 91       	pop	r18
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
