
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000002d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000262  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800200  00800200  000002d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cd9  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bdf  00000000  00000000  00001051  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000334  00000000  00000000  00001c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00001f64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055c  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014d  00000000  00000000  0000256c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000026b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	9d c0       	rjmp	.+314    	; 0x180 <__vector_17>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a9 30       	cpi	r26, 0x09	; 9
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	02 d0       	rcall	.+4      	; 0x10a <main>
 106:	ab c0       	rjmp	.+342    	; 0x25e <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <main>:
volatile uint8_t ISRcounter = 0;
volatile uint8_t PB_Out[8]={0};
void timer1_ini();

int main(void)
{
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
	timer1_ini();
 112:	03 d0       	rcall	.+6      	; 0x11a <timer1_ini>
	PB_Out[7]=0;
 114:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <PB_Out+0x7>
    while (1) 
    {
    }
 118:	ff cf       	rjmp	.-2      	; 0x118 <main+0xe>

0000011a <timer1_ini>:
}

void timer1_ini()
{
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
	TCCR1A|=0x00;
 122:	80 e8       	ldi	r24, 0x80	; 128
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	20 e8       	ldi	r18, 0x80	; 128
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	f9 01       	movw	r30, r18
 12c:	20 81       	ld	r18, Z
 12e:	fc 01       	movw	r30, r24
 130:	20 83       	st	Z, r18
	TCCR1B|=(1<<CS11)|(1<<WGM12);
 132:	81 e8       	ldi	r24, 0x81	; 129
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	21 e8       	ldi	r18, 0x81	; 129
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	f9 01       	movw	r30, r18
 13c:	20 81       	ld	r18, Z
 13e:	2a 60       	ori	r18, 0x0A	; 10
 140:	fc 01       	movw	r30, r24
 142:	20 83       	st	Z, r18
	TIMSK1|=(1<<OCIE1A);
 144:	8f e6       	ldi	r24, 0x6F	; 111
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	2f e6       	ldi	r18, 0x6F	; 111
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	f9 01       	movw	r30, r18
 14e:	20 81       	ld	r18, Z
 150:	22 60       	ori	r18, 0x02	; 2
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
	OCR1A=156;
 156:	88 e8       	ldi	r24, 0x88	; 136
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	2c e9       	ldi	r18, 0x9C	; 156
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	fc 01       	movw	r30, r24
 160:	31 83       	std	Z+1, r19	; 0x01
 162:	20 83       	st	Z, r18
	sei();
 164:	78 94       	sei
	DDRB=0xFF;
 166:	84 e2       	ldi	r24, 0x24	; 36
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	2f ef       	ldi	r18, 0xFF	; 255
 16c:	fc 01       	movw	r30, r24
 16e:	20 83       	st	Z, r18
	PORTB=0x00;
 170:	85 e2       	ldi	r24, 0x25	; 37
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	fc 01       	movw	r30, r24
 176:	10 82       	st	Z, r1
}
 178:	00 00       	nop
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <__vector_17>:

ISR(TIMER1_COMPA_vect)
{
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 190:	0f 92       	push	r0
 192:	2f 93       	push	r18
 194:	3f 93       	push	r19
 196:	4f 93       	push	r20
 198:	5f 93       	push	r21
 19a:	6f 93       	push	r22
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
 1a0:	ef 93       	push	r30
 1a2:	ff 93       	push	r31
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	1f 92       	push	r1
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62

for(uint8_t i=0; i<8; i++)
 1ae:	19 82       	std	Y+1, r1	; 0x01
 1b0:	38 c0       	rjmp	.+112    	; 0x222 <__vector_17+0xa2>
{
	if(ISRcounter < PB_Out[i]) 
 1b2:	89 81       	ldd	r24, Y+1	; 0x01
 1b4:	88 2f       	mov	r24, r24
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	8f 5f       	subi	r24, 0xFF	; 255
 1ba:	9d 4f       	sbci	r25, 0xFD	; 253
 1bc:	fc 01       	movw	r30, r24
 1be:	90 81       	ld	r25, Z
 1c0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1c4:	89 17       	cp	r24, r25
 1c6:	a8 f4       	brcc	.+42     	; 0x1f2 <__vector_17+0x72>
	{
		PORTB|=(1<<i);
 1c8:	85 e2       	ldi	r24, 0x25	; 37
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	25 e2       	ldi	r18, 0x25	; 37
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	f9 01       	movw	r30, r18
 1d2:	20 81       	ld	r18, Z
 1d4:	62 2f       	mov	r22, r18
 1d6:	29 81       	ldd	r18, Y+1	; 0x01
 1d8:	42 2f       	mov	r20, r18
 1da:	50 e0       	ldi	r21, 0x00	; 0
 1dc:	21 e0       	ldi	r18, 0x01	; 1
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <__vector_17+0x66>
 1e2:	22 0f       	add	r18, r18
 1e4:	33 1f       	adc	r19, r19
 1e6:	4a 95       	dec	r20
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <__vector_17+0x62>
 1ea:	26 2b       	or	r18, r22
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 83       	st	Z, r18
 1f0:	15 c0       	rjmp	.+42     	; 0x21c <__vector_17+0x9c>
		
	}
	else 
	{
		PORTB &=~(1<<i);
 1f2:	85 e2       	ldi	r24, 0x25	; 37
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	25 e2       	ldi	r18, 0x25	; 37
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	f9 01       	movw	r30, r18
 1fc:	20 81       	ld	r18, Z
 1fe:	62 2f       	mov	r22, r18
 200:	29 81       	ldd	r18, Y+1	; 0x01
 202:	42 2f       	mov	r20, r18
 204:	50 e0       	ldi	r21, 0x00	; 0
 206:	21 e0       	ldi	r18, 0x01	; 1
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <__vector_17+0x90>
 20c:	22 0f       	add	r18, r18
 20e:	33 1f       	adc	r19, r19
 210:	4a 95       	dec	r20
 212:	e2 f7       	brpl	.-8      	; 0x20c <__vector_17+0x8c>
 214:	20 95       	com	r18
 216:	26 23       	and	r18, r22
 218:	fc 01       	movw	r30, r24
 21a:	20 83       	st	Z, r18
}

ISR(TIMER1_COMPA_vect)
{

for(uint8_t i=0; i<8; i++)
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	8f 5f       	subi	r24, 0xFF	; 255
 220:	89 83       	std	Y+1, r24	; 0x01
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	88 30       	cpi	r24, 0x08	; 8
 226:	28 f2       	brcs	.-118    	; 0x1b2 <__vector_17+0x32>
	{
		PORTB &=~(1<<i);
	}
}

ISRcounter++;
 228:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 22c:	8f 5f       	subi	r24, 0xFF	; 255
 22e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	}
 232:	00 00       	nop
 234:	0f 90       	pop	r0
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	ff 91       	pop	r31
 23c:	ef 91       	pop	r30
 23e:	9f 91       	pop	r25
 240:	8f 91       	pop	r24
 242:	6f 91       	pop	r22
 244:	5f 91       	pop	r21
 246:	4f 91       	pop	r20
 248:	3f 91       	pop	r19
 24a:	2f 91       	pop	r18
 24c:	0f 90       	pop	r0
 24e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 252:	0f 90       	pop	r0
 254:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <_exit>:
 25e:	f8 94       	cli

00000260 <__stop_program>:
 260:	ff cf       	rjmp	.-2      	; 0x260 <__stop_program>
